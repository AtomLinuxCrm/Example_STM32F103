
Lcd2004.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001520  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  0800162c  0800162c  0001162c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001670  08001670  00011670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001674  08001674  00011674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001678  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000078  2000000c  08001684  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000084  08001684  00020084  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00008e73  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001769  00000000  00000000  00028ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000409e  00000000  00000000  0002a611  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000560  00000000  00000000  0002e6b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000009c8  00000000  00000000  0002ec10  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003d36  00000000  00000000  0002f5d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000024a1  00000000  00000000  0003330e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000357af  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000f44  00000000  00000000  0003582c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001614 	.word	0x08001614

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001614 	.word	0x08001614

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f892 	bl	800028c <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000178:	f000 f854 	bl	8000224 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f82d 	bl	8000200 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f001 f940 	bl	8001430 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	2000002c 	.word	0x2000002c
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	2000002c 	.word	0x2000002c

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
 80001e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001e8:	bf1e      	ittt	ne
 80001ea:	4b04      	ldrne	r3, [pc, #16]	; (80001fc <HAL_Delay+0x20>)
 80001ec:	781b      	ldrbne	r3, [r3, #0]
 80001ee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f0:	f7ff ffee 	bl	80001d0 <HAL_GetTick>
 80001f4:	1b40      	subs	r0, r0, r5
 80001f6:	4284      	cmp	r4, r0
 80001f8:	d8fa      	bhi.n	80001f0 <HAL_Delay+0x14>
  {
  }
}
 80001fa:	bd38      	pop	{r3, r4, r5, pc}
 80001fc:	20000000 	.word	0x20000000

08000200 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000200:	4a07      	ldr	r2, [pc, #28]	; (8000220 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000202:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000204:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000206:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800020a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800020e:	041b      	lsls	r3, r3, #16
 8000210:	0c1b      	lsrs	r3, r3, #16
 8000212:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800021a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800021c:	60d3      	str	r3, [r2, #12]
 800021e:	4770      	bx	lr
 8000220:	e000ed00 	.word	0xe000ed00

08000224 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000224:	4b17      	ldr	r3, [pc, #92]	; (8000284 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000226:	b530      	push	{r4, r5, lr}
 8000228:	68dc      	ldr	r4, [r3, #12]
 800022a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800022e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000232:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000234:	2b04      	cmp	r3, #4
 8000236:	bf28      	it	cs
 8000238:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800023a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000240:	bf98      	it	ls
 8000242:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000244:	fa05 f303 	lsl.w	r3, r5, r3
 8000248:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024c:	bf88      	it	hi
 800024e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000250:	4019      	ands	r1, r3
 8000252:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000254:	fa05 f404 	lsl.w	r4, r5, r4
 8000258:	3c01      	subs	r4, #1
 800025a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800025c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800025e:	ea42 0201 	orr.w	r2, r2, r1
 8000262:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000266:	bfa9      	itett	ge
 8000268:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026c:	4b06      	ldrlt	r3, [pc, #24]	; (8000288 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026e:	b2d2      	uxtbge	r2, r2
 8000270:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000274:	bfbb      	ittet	lt
 8000276:	f000 000f 	andlt.w	r0, r0, #15
 800027a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000280:	541a      	strblt	r2, [r3, r0]
 8000282:	bd30      	pop	{r4, r5, pc}
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000ed14 	.word	0xe000ed14

0800028c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800028c:	3801      	subs	r0, #1
 800028e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000292:	d20a      	bcs.n	80002aa <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000294:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000296:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000298:	4a06      	ldr	r2, [pc, #24]	; (80002b4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800029a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002a0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002a2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002a4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002a6:	601a      	str	r2, [r3, #0]
 80002a8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002aa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	e000e010 	.word	0xe000e010
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80002bc:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80002be:	4626      	mov	r6, r4
 80002c0:	4b66      	ldr	r3, [pc, #408]	; (800045c <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002c2:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 800046c <HAL_GPIO_Init+0x1b4>
 80002c6:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8000470 <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80002ca:	680a      	ldr	r2, [r1, #0]
 80002cc:	fa32 f506 	lsrs.w	r5, r2, r6
 80002d0:	d102      	bne.n	80002d8 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 80002d2:	b003      	add	sp, #12
 80002d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80002d8:	f04f 0801 	mov.w	r8, #1
 80002dc:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002e0:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 80002e4:	4590      	cmp	r8, r2
 80002e6:	d17f      	bne.n	80003e8 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 80002e8:	684d      	ldr	r5, [r1, #4]
 80002ea:	2d12      	cmp	r5, #18
 80002ec:	f000 80aa 	beq.w	8000444 <HAL_GPIO_Init+0x18c>
 80002f0:	f200 8083 	bhi.w	80003fa <HAL_GPIO_Init+0x142>
 80002f4:	2d02      	cmp	r5, #2
 80002f6:	f000 80a2 	beq.w	800043e <HAL_GPIO_Init+0x186>
 80002fa:	d877      	bhi.n	80003ec <HAL_GPIO_Init+0x134>
 80002fc:	2d00      	cmp	r5, #0
 80002fe:	f000 8089 	beq.w	8000414 <HAL_GPIO_Init+0x15c>
 8000302:	2d01      	cmp	r5, #1
 8000304:	f000 8099 	beq.w	800043a <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000308:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800030c:	2aff      	cmp	r2, #255	; 0xff
 800030e:	bf93      	iteet	ls
 8000310:	4682      	movls	sl, r0
 8000312:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000316:	3d08      	subhi	r5, #8
 8000318:	f8d0 b000 	ldrls.w	fp, [r0]
 800031c:	bf92      	itee	ls
 800031e:	00b5      	lslls	r5, r6, #2
 8000320:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000324:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000326:	fa09 f805 	lsl.w	r8, r9, r5
 800032a:	ea2b 0808 	bic.w	r8, fp, r8
 800032e:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000332:	bf88      	it	hi
 8000334:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000338:	ea48 0505 	orr.w	r5, r8, r5
 800033c:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000340:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000344:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000348:	d04e      	beq.n	80003e8 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800034a:	4d45      	ldr	r5, [pc, #276]	; (8000460 <HAL_GPIO_Init+0x1a8>)
 800034c:	4f44      	ldr	r7, [pc, #272]	; (8000460 <HAL_GPIO_Init+0x1a8>)
 800034e:	69ad      	ldr	r5, [r5, #24]
 8000350:	f026 0803 	bic.w	r8, r6, #3
 8000354:	f045 0501 	orr.w	r5, r5, #1
 8000358:	61bd      	str	r5, [r7, #24]
 800035a:	69bd      	ldr	r5, [r7, #24]
 800035c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000360:	f005 0501 	and.w	r5, r5, #1
 8000364:	9501      	str	r5, [sp, #4]
 8000366:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800036a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800036e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000370:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000374:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000378:	fa09 f90b 	lsl.w	r9, r9, fp
 800037c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000380:	4d38      	ldr	r5, [pc, #224]	; (8000464 <HAL_GPIO_Init+0x1ac>)
 8000382:	42a8      	cmp	r0, r5
 8000384:	d063      	beq.n	800044e <HAL_GPIO_Init+0x196>
 8000386:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800038a:	42a8      	cmp	r0, r5
 800038c:	d061      	beq.n	8000452 <HAL_GPIO_Init+0x19a>
 800038e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000392:	42a8      	cmp	r0, r5
 8000394:	d05f      	beq.n	8000456 <HAL_GPIO_Init+0x19e>
 8000396:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800039a:	42a8      	cmp	r0, r5
 800039c:	bf0c      	ite	eq
 800039e:	2503      	moveq	r5, #3
 80003a0:	2504      	movne	r5, #4
 80003a2:	fa05 f50b 	lsl.w	r5, r5, fp
 80003a6:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80003aa:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80003ae:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003b0:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80003b4:	bf14      	ite	ne
 80003b6:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003b8:	4395      	biceq	r5, r2
 80003ba:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80003bc:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003be:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003c2:	bf14      	ite	ne
 80003c4:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003c6:	4395      	biceq	r5, r2
 80003c8:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80003ca:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003cc:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003d0:	bf14      	ite	ne
 80003d2:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003d4:	4395      	biceq	r5, r2
 80003d6:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80003d8:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003da:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80003de:	bf14      	ite	ne
 80003e0:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003e2:	ea25 0202 	biceq.w	r2, r5, r2
 80003e6:	60da      	str	r2, [r3, #12]
	position++;
 80003e8:	3601      	adds	r6, #1
 80003ea:	e76e      	b.n	80002ca <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 80003ec:	2d03      	cmp	r5, #3
 80003ee:	d022      	beq.n	8000436 <HAL_GPIO_Init+0x17e>
 80003f0:	2d11      	cmp	r5, #17
 80003f2:	d189      	bne.n	8000308 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80003f4:	68cc      	ldr	r4, [r1, #12]
 80003f6:	3404      	adds	r4, #4
          break;
 80003f8:	e786      	b.n	8000308 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80003fa:	4f1b      	ldr	r7, [pc, #108]	; (8000468 <HAL_GPIO_Init+0x1b0>)
 80003fc:	42bd      	cmp	r5, r7
 80003fe:	d009      	beq.n	8000414 <HAL_GPIO_Init+0x15c>
 8000400:	d812      	bhi.n	8000428 <HAL_GPIO_Init+0x170>
 8000402:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8000474 <HAL_GPIO_Init+0x1bc>
 8000406:	454d      	cmp	r5, r9
 8000408:	d004      	beq.n	8000414 <HAL_GPIO_Init+0x15c>
 800040a:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800040e:	454d      	cmp	r5, r9
 8000410:	f47f af7a 	bne.w	8000308 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000414:	688c      	ldr	r4, [r1, #8]
 8000416:	b1c4      	cbz	r4, 800044a <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000418:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 800041a:	bf0c      	ite	eq
 800041c:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000420:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000424:	2408      	movs	r4, #8
 8000426:	e76f      	b.n	8000308 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000428:	4575      	cmp	r5, lr
 800042a:	d0f3      	beq.n	8000414 <HAL_GPIO_Init+0x15c>
 800042c:	4565      	cmp	r5, ip
 800042e:	d0f1      	beq.n	8000414 <HAL_GPIO_Init+0x15c>
 8000430:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000478 <HAL_GPIO_Init+0x1c0>
 8000434:	e7eb      	b.n	800040e <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000436:	2400      	movs	r4, #0
 8000438:	e766      	b.n	8000308 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800043a:	68cc      	ldr	r4, [r1, #12]
          break;
 800043c:	e764      	b.n	8000308 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800043e:	68cc      	ldr	r4, [r1, #12]
 8000440:	3408      	adds	r4, #8
          break;
 8000442:	e761      	b.n	8000308 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000444:	68cc      	ldr	r4, [r1, #12]
 8000446:	340c      	adds	r4, #12
          break;
 8000448:	e75e      	b.n	8000308 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800044a:	2404      	movs	r4, #4
 800044c:	e75c      	b.n	8000308 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800044e:	2500      	movs	r5, #0
 8000450:	e7a7      	b.n	80003a2 <HAL_GPIO_Init+0xea>
 8000452:	2501      	movs	r5, #1
 8000454:	e7a5      	b.n	80003a2 <HAL_GPIO_Init+0xea>
 8000456:	2502      	movs	r5, #2
 8000458:	e7a3      	b.n	80003a2 <HAL_GPIO_Init+0xea>
 800045a:	bf00      	nop
 800045c:	40010400 	.word	0x40010400
 8000460:	40021000 	.word	0x40021000
 8000464:	40010800 	.word	0x40010800
 8000468:	10210000 	.word	0x10210000
 800046c:	10310000 	.word	0x10310000
 8000470:	10320000 	.word	0x10320000
 8000474:	10110000 	.word	0x10110000
 8000478:	10220000 	.word	0x10220000

0800047c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800047c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8000480:	f04f 0a04 	mov.w	sl, #4
  uint32_t position = 0x00u;
 8000484:	2300      	movs	r3, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000486:	f04f 0901 	mov.w	r9, #1
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800048a:	f04f 0c0f 	mov.w	ip, #15
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800048e:	4a30      	ldr	r2, [pc, #192]	; (8000550 <HAL_GPIO_DeInit+0xd4>)
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000490:	eb00 0b0a 	add.w	fp, r0, sl
  while ((GPIO_Pin >> position) != 0u)
 8000494:	fa31 f403 	lsrs.w	r4, r1, r3
 8000498:	d101      	bne.n	800049e <HAL_GPIO_DeInit+0x22>
      CLEAR_BIT(GPIOx->ODR, iocurrent);
    }

    position++;
  }
}
 800049a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 800049e:	fa09 f603 	lsl.w	r6, r9, r3
    if (iocurrent)
 80004a2:	400e      	ands	r6, r1
 80004a4:	d04c      	beq.n	8000540 <HAL_GPIO_DeInit+0xc4>
 80004a6:	f023 0403 	bic.w	r4, r3, #3
 80004aa:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80004ae:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80004b2:	f003 0703 	and.w	r7, r3, #3
      tmp = AFIO->EXTICR[position >> 2u];
 80004b6:	68a5      	ldr	r5, [r4, #8]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80004b8:	00bf      	lsls	r7, r7, #2
 80004ba:	fa0c f807 	lsl.w	r8, ip, r7
 80004be:	ea05 0e08 	and.w	lr, r5, r8
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80004c2:	4d24      	ldr	r5, [pc, #144]	; (8000554 <HAL_GPIO_DeInit+0xd8>)
 80004c4:	42a8      	cmp	r0, r5
 80004c6:	d03d      	beq.n	8000544 <HAL_GPIO_DeInit+0xc8>
 80004c8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80004cc:	42a8      	cmp	r0, r5
 80004ce:	d03b      	beq.n	8000548 <HAL_GPIO_DeInit+0xcc>
 80004d0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80004d4:	42a8      	cmp	r0, r5
 80004d6:	d039      	beq.n	800054c <HAL_GPIO_DeInit+0xd0>
 80004d8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80004dc:	42a8      	cmp	r0, r5
 80004de:	bf0c      	ite	eq
 80004e0:	2503      	moveq	r5, #3
 80004e2:	2504      	movne	r5, #4
 80004e4:	40bd      	lsls	r5, r7
 80004e6:	45ae      	cmp	lr, r5
 80004e8:	ea6f 0506 	mvn.w	r5, r6
 80004ec:	d10f      	bne.n	800050e <HAL_GPIO_DeInit+0x92>
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80004ee:	68a7      	ldr	r7, [r4, #8]
 80004f0:	ea27 0708 	bic.w	r7, r7, r8
 80004f4:	60a7      	str	r7, [r4, #8]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80004f6:	6814      	ldr	r4, [r2, #0]
 80004f8:	402c      	ands	r4, r5
 80004fa:	6014      	str	r4, [r2, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80004fc:	6854      	ldr	r4, [r2, #4]
 80004fe:	402c      	ands	r4, r5
 8000500:	6054      	str	r4, [r2, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8000502:	6894      	ldr	r4, [r2, #8]
 8000504:	402c      	ands	r4, r5
 8000506:	6094      	str	r4, [r2, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8000508:	68d4      	ldr	r4, [r2, #12]
 800050a:	402c      	ands	r4, r5
 800050c:	60d4      	str	r4, [r2, #12]
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800050e:	2eff      	cmp	r6, #255	; 0xff
 8000510:	bf91      	iteee	ls
 8000512:	4607      	movls	r7, r0
 8000514:	465f      	movhi	r7, fp
 8000516:	f103 4480 	addhi.w	r4, r3, #1073741824	; 0x40000000
 800051a:	3c08      	subhi	r4, #8
 800051c:	bf95      	itete	ls
 800051e:	f8d0 e000 	ldrls.w	lr, [r0]
 8000522:	f8d0 e004 	ldrhi.w	lr, [r0, #4]
 8000526:	009c      	lslls	r4, r3, #2
 8000528:	00a4      	lslhi	r4, r4, #2
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800052a:	fa0c f604 	lsl.w	r6, ip, r4
 800052e:	ea2e 0606 	bic.w	r6, lr, r6
 8000532:	fa0a f404 	lsl.w	r4, sl, r4
 8000536:	4326      	orrs	r6, r4
 8000538:	603e      	str	r6, [r7, #0]
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800053a:	68c4      	ldr	r4, [r0, #12]
 800053c:	4025      	ands	r5, r4
 800053e:	60c5      	str	r5, [r0, #12]
    position++;
 8000540:	3301      	adds	r3, #1
 8000542:	e7a7      	b.n	8000494 <HAL_GPIO_DeInit+0x18>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000544:	2500      	movs	r5, #0
 8000546:	e7cd      	b.n	80004e4 <HAL_GPIO_DeInit+0x68>
 8000548:	2501      	movs	r5, #1
 800054a:	e7cb      	b.n	80004e4 <HAL_GPIO_DeInit+0x68>
 800054c:	2502      	movs	r5, #2
 800054e:	e7c9      	b.n	80004e4 <HAL_GPIO_DeInit+0x68>
 8000550:	40010400 	.word	0x40010400
 8000554:	40010800 	.word	0x40010800

08000558 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000558:	6883      	ldr	r3, [r0, #8]
 800055a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800055c:	bf14      	ite	ne
 800055e:	2001      	movne	r0, #1
 8000560:	2000      	moveq	r0, #0
 8000562:	4770      	bx	lr

08000564 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000564:	b10a      	cbz	r2, 800056a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000566:	6101      	str	r1, [r0, #16]
 8000568:	4770      	bx	lr
 800056a:	0409      	lsls	r1, r1, #16
 800056c:	e7fb      	b.n	8000566 <HAL_GPIO_WritePin+0x2>

0800056e <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800056e:	6801      	ldr	r1, [r0, #0]
 8000570:	2200      	movs	r2, #0
 8000572:	694b      	ldr	r3, [r1, #20]
 8000574:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8000578:	d010      	beq.n	800059c <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800057a:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800057e:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8000580:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8000582:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8000584:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000588:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800058c:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800058e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000592:	f043 0304 	orr.w	r3, r3, #4
 8000596:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8000598:	2001      	movs	r0, #1
 800059a:	4770      	bx	lr
  }
  return HAL_OK;
 800059c:	4618      	mov	r0, r3
}
 800059e:	4770      	bx	lr

080005a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80005a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80005a4:	4604      	mov	r4, r0
 80005a6:	4617      	mov	r7, r2
 80005a8:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80005aa:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80005ae:	b28e      	uxth	r6, r1
 80005b0:	6825      	ldr	r5, [r4, #0]
 80005b2:	f1b8 0f01 	cmp.w	r8, #1
 80005b6:	bf0c      	ite	eq
 80005b8:	696b      	ldreq	r3, [r5, #20]
 80005ba:	69ab      	ldrne	r3, [r5, #24]
 80005bc:	ea36 0303 	bics.w	r3, r6, r3
 80005c0:	bf14      	ite	ne
 80005c2:	2001      	movne	r0, #1
 80005c4:	2000      	moveq	r0, #0
 80005c6:	b908      	cbnz	r0, 80005cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 80005c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80005cc:	696b      	ldr	r3, [r5, #20]
 80005ce:	055a      	lsls	r2, r3, #21
 80005d0:	d516      	bpl.n	8000600 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80005d2:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 80005d4:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80005d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005da:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80005dc:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80005e0:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80005e2:	2300      	movs	r3, #0
 80005e4:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80005e6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80005ea:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80005ee:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80005f0:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80005f4:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80005f6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80005fa:	2001      	movs	r0, #1
 80005fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000600:	1c7b      	adds	r3, r7, #1
 8000602:	d0d5      	beq.n	80005b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000604:	f7ff fde4 	bl	80001d0 <HAL_GetTick>
 8000608:	eba0 0009 	sub.w	r0, r0, r9
 800060c:	4287      	cmp	r7, r0
 800060e:	d301      	bcc.n	8000614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
 8000610:	2f00      	cmp	r7, #0
 8000612:	d1cd      	bne.n	80005b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000614:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8000616:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000618:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800061a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800061e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000622:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000624:	f042 0220 	orr.w	r2, r2, #32
 8000628:	e7e4      	b.n	80005f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x54>

0800062a <I2C_WaitOnBTFFlagUntilTimeout>:
{
 800062a:	b570      	push	{r4, r5, r6, lr}
 800062c:	4604      	mov	r4, r0
 800062e:	460d      	mov	r5, r1
 8000630:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000632:	6823      	ldr	r3, [r4, #0]
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	075b      	lsls	r3, r3, #29
 8000638:	d501      	bpl.n	800063e <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 800063a:	2000      	movs	r0, #0
 800063c:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800063e:	4620      	mov	r0, r4
 8000640:	f7ff ff95 	bl	800056e <I2C_IsAcknowledgeFailed>
 8000644:	b9a8      	cbnz	r0, 8000672 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8000646:	1c6a      	adds	r2, r5, #1
 8000648:	d0f3      	beq.n	8000632 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800064a:	f7ff fdc1 	bl	80001d0 <HAL_GetTick>
 800064e:	1b80      	subs	r0, r0, r6
 8000650:	4285      	cmp	r5, r0
 8000652:	d301      	bcc.n	8000658 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8000654:	2d00      	cmp	r5, #0
 8000656:	d1ec      	bne.n	8000632 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000658:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 800065a:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800065c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800065e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000662:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000666:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000668:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800066c:	f042 0220 	orr.w	r2, r2, #32
 8000670:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000672:	2001      	movs	r0, #1
}
 8000674:	bd70      	pop	{r4, r5, r6, pc}

08000676 <I2C_WaitOnFlagUntilTimeout>:
{
 8000676:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800067a:	4604      	mov	r4, r0
 800067c:	4690      	mov	r8, r2
 800067e:	461f      	mov	r7, r3
 8000680:	9e08      	ldr	r6, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000682:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8000686:	b28d      	uxth	r5, r1
 8000688:	6823      	ldr	r3, [r4, #0]
 800068a:	f1b9 0f01 	cmp.w	r9, #1
 800068e:	bf0c      	ite	eq
 8000690:	695b      	ldreq	r3, [r3, #20]
 8000692:	699b      	ldrne	r3, [r3, #24]
 8000694:	ea35 0303 	bics.w	r3, r5, r3
 8000698:	bf0c      	ite	eq
 800069a:	2301      	moveq	r3, #1
 800069c:	2300      	movne	r3, #0
 800069e:	4543      	cmp	r3, r8
 80006a0:	d002      	beq.n	80006a8 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 80006a2:	2000      	movs	r0, #0
}
 80006a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 80006a8:	1c7b      	adds	r3, r7, #1
 80006aa:	d0ed      	beq.n	8000688 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80006ac:	f7ff fd90 	bl	80001d0 <HAL_GetTick>
 80006b0:	1b80      	subs	r0, r0, r6
 80006b2:	4287      	cmp	r7, r0
 80006b4:	d301      	bcc.n	80006ba <I2C_WaitOnFlagUntilTimeout+0x44>
 80006b6:	2f00      	cmp	r7, #0
 80006b8:	d1e6      	bne.n	8000688 <I2C_WaitOnFlagUntilTimeout+0x12>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80006ba:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80006bc:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80006be:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80006c0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80006c4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80006c8:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80006ca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80006ce:	f042 0220 	orr.w	r2, r2, #32
 80006d2:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80006d4:	2001      	movs	r0, #1
 80006d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080006da <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80006da:	b570      	push	{r4, r5, r6, lr}
 80006dc:	4604      	mov	r4, r0
 80006de:	460d      	mov	r5, r1
 80006e0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80006e2:	6823      	ldr	r3, [r4, #0]
 80006e4:	695b      	ldr	r3, [r3, #20]
 80006e6:	061b      	lsls	r3, r3, #24
 80006e8:	d501      	bpl.n	80006ee <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 80006ea:	2000      	movs	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80006ee:	4620      	mov	r0, r4
 80006f0:	f7ff ff3d 	bl	800056e <I2C_IsAcknowledgeFailed>
 80006f4:	b9a8      	cbnz	r0, 8000722 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80006f6:	1c6a      	adds	r2, r5, #1
 80006f8:	d0f3      	beq.n	80006e2 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80006fa:	f7ff fd69 	bl	80001d0 <HAL_GetTick>
 80006fe:	1b80      	subs	r0, r0, r6
 8000700:	4285      	cmp	r5, r0
 8000702:	d301      	bcc.n	8000708 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8000704:	2d00      	cmp	r5, #0
 8000706:	d1ec      	bne.n	80006e2 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000708:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 800070a:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800070c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800070e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000712:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000716:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000718:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800071c:	f042 0220 	orr.w	r2, r2, #32
 8000720:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000722:	2001      	movs	r0, #1
}
 8000724:	bd70      	pop	{r4, r5, r6, pc}
	...

08000728 <HAL_I2C_Init>:
{
 8000728:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 800072a:	4604      	mov	r4, r0
 800072c:	b908      	cbnz	r0, 8000732 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800072e:	2001      	movs	r0, #1
 8000730:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000732:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000736:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800073a:	b91b      	cbnz	r3, 8000744 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 800073c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8000740:	f000 fe98 	bl	8001474 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000744:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8000746:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000748:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800074c:	6813      	ldr	r3, [r2, #0]
 800074e:	f023 0301 	bic.w	r3, r3, #1
 8000752:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000754:	f000 fbec 	bl	8000f30 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000758:	6865      	ldr	r5, [r4, #4]
 800075a:	4b41      	ldr	r3, [pc, #260]	; (8000860 <HAL_I2C_Init+0x138>)
 800075c:	429d      	cmp	r5, r3
 800075e:	d84d      	bhi.n	80007fc <HAL_I2C_Init+0xd4>
 8000760:	4b40      	ldr	r3, [pc, #256]	; (8000864 <HAL_I2C_Init+0x13c>)
 8000762:	4298      	cmp	r0, r3
 8000764:	d9e3      	bls.n	800072e <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8000766:	4940      	ldr	r1, [pc, #256]	; (8000868 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000768:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800076a:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800076e:	6853      	ldr	r3, [r2, #4]
 8000770:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000774:	430b      	orrs	r3, r1
 8000776:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000778:	6a13      	ldr	r3, [r2, #32]
 800077a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800077e:	3101      	adds	r1, #1
 8000780:	4319      	orrs	r1, r3
 8000782:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000784:	69d1      	ldr	r1, [r2, #28]
 8000786:	4b36      	ldr	r3, [pc, #216]	; (8000860 <HAL_I2C_Init+0x138>)
 8000788:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800078c:	429d      	cmp	r5, r3
 800078e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000792:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8000796:	d848      	bhi.n	800082a <HAL_I2C_Init+0x102>
 8000798:	006d      	lsls	r5, r5, #1
 800079a:	fbb0 f0f5 	udiv	r0, r0, r5
 800079e:	3001      	adds	r0, #1
 80007a0:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80007a4:	2b04      	cmp	r3, #4
 80007a6:	bf38      	it	cc
 80007a8:	2304      	movcc	r3, #4
 80007aa:	430b      	orrs	r3, r1
 80007ac:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80007ae:	6811      	ldr	r1, [r2, #0]
 80007b0:	6a20      	ldr	r0, [r4, #32]
 80007b2:	69e3      	ldr	r3, [r4, #28]
 80007b4:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80007b8:	4303      	orrs	r3, r0
 80007ba:	430b      	orrs	r3, r1
 80007bc:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80007be:	6891      	ldr	r1, [r2, #8]
 80007c0:	68e0      	ldr	r0, [r4, #12]
 80007c2:	6923      	ldr	r3, [r4, #16]
 80007c4:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80007c8:	4303      	orrs	r3, r0
 80007ca:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80007ce:	430b      	orrs	r3, r1
 80007d0:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80007d2:	68d1      	ldr	r1, [r2, #12]
 80007d4:	69a0      	ldr	r0, [r4, #24]
 80007d6:	6963      	ldr	r3, [r4, #20]
 80007d8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80007dc:	4303      	orrs	r3, r0
 80007de:	430b      	orrs	r3, r1
 80007e0:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80007e2:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80007e4:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 80007e6:	f043 0301 	orr.w	r3, r3, #1
 80007ea:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80007ec:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80007ee:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80007f0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80007f4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80007f6:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80007fa:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80007fc:	4b1b      	ldr	r3, [pc, #108]	; (800086c <HAL_I2C_Init+0x144>)
 80007fe:	4298      	cmp	r0, r3
 8000800:	d995      	bls.n	800072e <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8000802:	4e19      	ldr	r6, [pc, #100]	; (8000868 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000804:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8000808:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800080c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800080e:	4371      	muls	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000810:	6853      	ldr	r3, [r2, #4]
 8000812:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000816:	4333      	orrs	r3, r6
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000818:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800081c:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800081e:	6a13      	ldr	r3, [r2, #32]
 8000820:	fbb1 f1f6 	udiv	r1, r1, r6
 8000824:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000828:	e7a9      	b.n	800077e <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800082a:	68a3      	ldr	r3, [r4, #8]
 800082c:	b953      	cbnz	r3, 8000844 <HAL_I2C_Init+0x11c>
 800082e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000832:	fbb0 f0f3 	udiv	r0, r0, r3
 8000836:	1c43      	adds	r3, r0, #1
 8000838:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800083c:	b16b      	cbz	r3, 800085a <HAL_I2C_Init+0x132>
 800083e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000842:	e7b2      	b.n	80007aa <HAL_I2C_Init+0x82>
 8000844:	2319      	movs	r3, #25
 8000846:	436b      	muls	r3, r5
 8000848:	fbb0 f0f3 	udiv	r0, r0, r3
 800084c:	1c43      	adds	r3, r0, #1
 800084e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000852:	b113      	cbz	r3, 800085a <HAL_I2C_Init+0x132>
 8000854:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000858:	e7a7      	b.n	80007aa <HAL_I2C_Init+0x82>
 800085a:	2301      	movs	r3, #1
 800085c:	e7a5      	b.n	80007aa <HAL_I2C_Init+0x82>
 800085e:	bf00      	nop
 8000860:	000186a0 	.word	0x000186a0
 8000864:	001e847f 	.word	0x001e847f
 8000868:	000f4240 	.word	0x000f4240
 800086c:	003d08ff 	.word	0x003d08ff

08000870 <HAL_I2C_DeInit>:
{
 8000870:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8000872:	4604      	mov	r4, r0
 8000874:	b198      	cbz	r0, 800089e <HAL_I2C_DeInit+0x2e>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000876:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8000878:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800087a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800087e:	6813      	ldr	r3, [r2, #0]
 8000880:	f023 0301 	bic.w	r3, r3, #1
 8000884:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8000886:	f000 fe27 	bl	80014d8 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800088a:	2000      	movs	r0, #0
 800088c:	6420      	str	r0, [r4, #64]	; 0x40
  __HAL_UNLOCK(hi2c);
 800088e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  hi2c->State         = HAL_I2C_STATE_RESET;
 8000892:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000896:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8000898:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 800089c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800089e:	2001      	movs	r0, #1
}
 80008a0:	bd10      	pop	{r4, pc}
	...

080008a4 <HAL_I2C_Master_Transmit>:
{
 80008a4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80008a8:	4604      	mov	r4, r0
 80008aa:	461f      	mov	r7, r3
 80008ac:	460d      	mov	r5, r1
 80008ae:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 80008b0:	f7ff fc8e 	bl	80001d0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80008b4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 80008b8:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80008ba:	2b20      	cmp	r3, #32
 80008bc:	d004      	beq.n	80008c8 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 80008be:	2502      	movs	r5, #2
}
 80008c0:	4628      	mov	r0, r5
 80008c2:	b004      	add	sp, #16
 80008c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80008c8:	9000      	str	r0, [sp, #0]
 80008ca:	2319      	movs	r3, #25
 80008cc:	2201      	movs	r2, #1
 80008ce:	4958      	ldr	r1, [pc, #352]	; (8000a30 <HAL_I2C_Master_Transmit+0x18c>)
 80008d0:	4620      	mov	r0, r4
 80008d2:	f7ff fed0 	bl	8000676 <I2C_WaitOnFlagUntilTimeout>
 80008d6:	2800      	cmp	r0, #0
 80008d8:	d1f1      	bne.n	80008be <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 80008da:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d0ed      	beq.n	80008be <HAL_I2C_Master_Transmit+0x1a>
 80008e2:	2301      	movs	r3, #1
 80008e4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80008e8:	6823      	ldr	r3, [r4, #0]
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80008ee:	bf5e      	ittt	pl
 80008f0:	681a      	ldrpl	r2, [r3, #0]
 80008f2:	f042 0201 	orrpl.w	r2, r2, #1
 80008f6:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80008fe:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000900:	2221      	movs	r2, #33	; 0x21
 8000902:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000906:	2210      	movs	r2, #16
 8000908:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800090c:	2200      	movs	r2, #0
 800090e:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8000910:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000912:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8000914:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8000918:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800091a:	4a46      	ldr	r2, [pc, #280]	; (8000a34 <HAL_I2C_Master_Transmit+0x190>)
 800091c:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800091e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000920:	2a08      	cmp	r2, #8
 8000922:	d004      	beq.n	800092e <HAL_I2C_Master_Transmit+0x8a>
 8000924:	2a01      	cmp	r2, #1
 8000926:	d002      	beq.n	800092e <HAL_I2C_Master_Transmit+0x8a>
 8000928:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800092c:	d104      	bne.n	8000938 <HAL_I2C_Master_Transmit+0x94>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	e002      	b.n	800093e <HAL_I2C_Master_Transmit+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8000938:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800093a:	2a12      	cmp	r2, #18
 800093c:	d0f7      	beq.n	800092e <HAL_I2C_Master_Transmit+0x8a>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800093e:	9600      	str	r6, [sp, #0]
 8000940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000942:	2200      	movs	r2, #0
 8000944:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000948:	4620      	mov	r0, r4
 800094a:	f7ff fe94 	bl	8000676 <I2C_WaitOnFlagUntilTimeout>
 800094e:	b108      	cbz	r0, 8000954 <HAL_I2C_Master_Transmit+0xb0>
        return HAL_ERROR;
 8000950:	2501      	movs	r5, #1
 8000952:	e7b5      	b.n	80008c0 <HAL_I2C_Master_Transmit+0x1c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000954:	6923      	ldr	r3, [r4, #16]
 8000956:	6822      	ldr	r2, [r4, #0]
 8000958:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800095c:	d113      	bne.n	8000986 <HAL_I2C_Master_Transmit+0xe2>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800095e:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8000962:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000964:	4633      	mov	r3, r6
 8000966:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000968:	4933      	ldr	r1, [pc, #204]	; (8000a38 <HAL_I2C_Master_Transmit+0x194>)
 800096a:	4620      	mov	r0, r4
 800096c:	f7ff fe18 	bl	80005a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000970:	4605      	mov	r5, r0
 8000972:	2800      	cmp	r0, #0
 8000974:	d1ec      	bne.n	8000950 <HAL_I2C_Master_Transmit+0xac>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000976:	6823      	ldr	r3, [r4, #0]
 8000978:	9003      	str	r0, [sp, #12]
 800097a:	695a      	ldr	r2, [r3, #20]
 800097c:	9203      	str	r2, [sp, #12]
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	9303      	str	r3, [sp, #12]
 8000982:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8000984:	e044      	b.n	8000a10 <HAL_I2C_Master_Transmit+0x16c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8000986:	11eb      	asrs	r3, r5, #7
 8000988:	f003 0306 	and.w	r3, r3, #6
 800098c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000990:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8000992:	492a      	ldr	r1, [pc, #168]	; (8000a3c <HAL_I2C_Master_Transmit+0x198>)
 8000994:	4633      	mov	r3, r6
 8000996:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000998:	4620      	mov	r0, r4
 800099a:	f7ff fe01 	bl	80005a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800099e:	2800      	cmp	r0, #0
 80009a0:	d1d6      	bne.n	8000950 <HAL_I2C_Master_Transmit+0xac>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80009a2:	6823      	ldr	r3, [r4, #0]
 80009a4:	b2ed      	uxtb	r5, r5
 80009a6:	611d      	str	r5, [r3, #16]
 80009a8:	e7dc      	b.n	8000964 <HAL_I2C_Master_Transmit+0xc0>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80009aa:	4632      	mov	r2, r6
 80009ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 80009ae:	4620      	mov	r0, r4
 80009b0:	f7ff fe93 	bl	80006da <I2C_WaitOnTXEFlagUntilTimeout>
 80009b4:	b140      	cbz	r0, 80009c8 <HAL_I2C_Master_Transmit+0x124>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80009b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80009b8:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80009ba:	bf01      	itttt	eq
 80009bc:	6822      	ldreq	r2, [r4, #0]
 80009be:	6813      	ldreq	r3, [r2, #0]
 80009c0:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80009c4:	6013      	streq	r3, [r2, #0]
 80009c6:	e7c3      	b.n	8000950 <HAL_I2C_Master_Transmit+0xac>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80009c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80009ca:	6820      	ldr	r0, [r4, #0]
 80009cc:	461a      	mov	r2, r3
 80009ce:	f812 1b01 	ldrb.w	r1, [r2], #1
 80009d2:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 80009d4:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80009d6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80009d8:	3a01      	subs	r2, #1
 80009da:	b292      	uxth	r2, r2
 80009dc:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80009de:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80009e0:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 80009e2:	1e51      	subs	r1, r2, #1
 80009e4:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80009e6:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 80009e8:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80009ea:	d50a      	bpl.n	8000a02 <HAL_I2C_Master_Transmit+0x15e>
 80009ec:	b149      	cbz	r1, 8000a02 <HAL_I2C_Master_Transmit+0x15e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80009ee:	7859      	ldrb	r1, [r3, #1]
        hi2c->pBuffPtr++;
 80009f0:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80009f2:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 80009f4:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80009f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80009f8:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 80009fa:	3b01      	subs	r3, #1
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8000a00:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000a02:	4632      	mov	r2, r6
 8000a04:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000a06:	4620      	mov	r0, r4
 8000a08:	f7ff fe0f 	bl	800062a <I2C_WaitOnBTFFlagUntilTimeout>
 8000a0c:	2800      	cmp	r0, #0
 8000a0e:	d1d2      	bne.n	80009b6 <HAL_I2C_Master_Transmit+0x112>
    while (hi2c->XferSize > 0U)
 8000a10:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d1c9      	bne.n	80009aa <HAL_I2C_Master_Transmit+0x106>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000a16:	6821      	ldr	r1, [r4, #0]
 8000a18:	680a      	ldr	r2, [r1, #0]
 8000a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a1e:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000a20:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8000a22:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8000a26:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a2a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8000a2e:	e747      	b.n	80008c0 <HAL_I2C_Master_Transmit+0x1c>
 8000a30:	00100002 	.word	0x00100002
 8000a34:	ffff0000 	.word	0xffff0000
 8000a38:	00010002 	.word	0x00010002
 8000a3c:	00010008 	.word	0x00010008

08000a40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000a44:	4605      	mov	r5, r0
 8000a46:	b908      	cbnz	r0, 8000a4c <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000a48:	2001      	movs	r0, #1
 8000a4a:	e03c      	b.n	8000ac6 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a4c:	6803      	ldr	r3, [r0, #0]
 8000a4e:	07db      	lsls	r3, r3, #31
 8000a50:	d410      	bmi.n	8000a74 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a52:	682b      	ldr	r3, [r5, #0]
 8000a54:	079f      	lsls	r7, r3, #30
 8000a56:	d45d      	bmi.n	8000b14 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a58:	682b      	ldr	r3, [r5, #0]
 8000a5a:	0719      	lsls	r1, r3, #28
 8000a5c:	f100 8094 	bmi.w	8000b88 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a60:	682b      	ldr	r3, [r5, #0]
 8000a62:	075a      	lsls	r2, r3, #29
 8000a64:	f100 80be 	bmi.w	8000be4 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000a68:	69e8      	ldr	r0, [r5, #28]
 8000a6a:	2800      	cmp	r0, #0
 8000a6c:	f040 812c 	bne.w	8000cc8 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8000a70:	2000      	movs	r0, #0
 8000a72:	e028      	b.n	8000ac6 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a74:	4c8f      	ldr	r4, [pc, #572]	; (8000cb4 <HAL_RCC_OscConfig+0x274>)
 8000a76:	6863      	ldr	r3, [r4, #4]
 8000a78:	f003 030c 	and.w	r3, r3, #12
 8000a7c:	2b04      	cmp	r3, #4
 8000a7e:	d007      	beq.n	8000a90 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a80:	6863      	ldr	r3, [r4, #4]
 8000a82:	f003 030c 	and.w	r3, r3, #12
 8000a86:	2b08      	cmp	r3, #8
 8000a88:	d109      	bne.n	8000a9e <HAL_RCC_OscConfig+0x5e>
 8000a8a:	6863      	ldr	r3, [r4, #4]
 8000a8c:	03de      	lsls	r6, r3, #15
 8000a8e:	d506      	bpl.n	8000a9e <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a90:	6823      	ldr	r3, [r4, #0]
 8000a92:	039c      	lsls	r4, r3, #14
 8000a94:	d5dd      	bpl.n	8000a52 <HAL_RCC_OscConfig+0x12>
 8000a96:	686b      	ldr	r3, [r5, #4]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d1da      	bne.n	8000a52 <HAL_RCC_OscConfig+0x12>
 8000a9c:	e7d4      	b.n	8000a48 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a9e:	686b      	ldr	r3, [r5, #4]
 8000aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000aa4:	d112      	bne.n	8000acc <HAL_RCC_OscConfig+0x8c>
 8000aa6:	6823      	ldr	r3, [r4, #0]
 8000aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000aac:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000aae:	f7ff fb8f 	bl	80001d0 <HAL_GetTick>
 8000ab2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ab4:	6823      	ldr	r3, [r4, #0]
 8000ab6:	0398      	lsls	r0, r3, #14
 8000ab8:	d4cb      	bmi.n	8000a52 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000aba:	f7ff fb89 	bl	80001d0 <HAL_GetTick>
 8000abe:	1b80      	subs	r0, r0, r6
 8000ac0:	2864      	cmp	r0, #100	; 0x64
 8000ac2:	d9f7      	bls.n	8000ab4 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000ac4:	2003      	movs	r0, #3
}
 8000ac6:	b002      	add	sp, #8
 8000ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000acc:	b99b      	cbnz	r3, 8000af6 <HAL_RCC_OscConfig+0xb6>
 8000ace:	6823      	ldr	r3, [r4, #0]
 8000ad0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ad4:	6023      	str	r3, [r4, #0]
 8000ad6:	6823      	ldr	r3, [r4, #0]
 8000ad8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000adc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000ade:	f7ff fb77 	bl	80001d0 <HAL_GetTick>
 8000ae2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ae4:	6823      	ldr	r3, [r4, #0]
 8000ae6:	0399      	lsls	r1, r3, #14
 8000ae8:	d5b3      	bpl.n	8000a52 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000aea:	f7ff fb71 	bl	80001d0 <HAL_GetTick>
 8000aee:	1b80      	subs	r0, r0, r6
 8000af0:	2864      	cmp	r0, #100	; 0x64
 8000af2:	d9f7      	bls.n	8000ae4 <HAL_RCC_OscConfig+0xa4>
 8000af4:	e7e6      	b.n	8000ac4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000af6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000afa:	6823      	ldr	r3, [r4, #0]
 8000afc:	d103      	bne.n	8000b06 <HAL_RCC_OscConfig+0xc6>
 8000afe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b02:	6023      	str	r3, [r4, #0]
 8000b04:	e7cf      	b.n	8000aa6 <HAL_RCC_OscConfig+0x66>
 8000b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b0a:	6023      	str	r3, [r4, #0]
 8000b0c:	6823      	ldr	r3, [r4, #0]
 8000b0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b12:	e7cb      	b.n	8000aac <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b14:	4c67      	ldr	r4, [pc, #412]	; (8000cb4 <HAL_RCC_OscConfig+0x274>)
 8000b16:	6863      	ldr	r3, [r4, #4]
 8000b18:	f013 0f0c 	tst.w	r3, #12
 8000b1c:	d007      	beq.n	8000b2e <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000b1e:	6863      	ldr	r3, [r4, #4]
 8000b20:	f003 030c 	and.w	r3, r3, #12
 8000b24:	2b08      	cmp	r3, #8
 8000b26:	d110      	bne.n	8000b4a <HAL_RCC_OscConfig+0x10a>
 8000b28:	6863      	ldr	r3, [r4, #4]
 8000b2a:	03da      	lsls	r2, r3, #15
 8000b2c:	d40d      	bmi.n	8000b4a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b2e:	6823      	ldr	r3, [r4, #0]
 8000b30:	079b      	lsls	r3, r3, #30
 8000b32:	d502      	bpl.n	8000b3a <HAL_RCC_OscConfig+0xfa>
 8000b34:	692b      	ldr	r3, [r5, #16]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d186      	bne.n	8000a48 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b3a:	6823      	ldr	r3, [r4, #0]
 8000b3c:	696a      	ldr	r2, [r5, #20]
 8000b3e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000b42:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000b46:	6023      	str	r3, [r4, #0]
 8000b48:	e786      	b.n	8000a58 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b4a:	692a      	ldr	r2, [r5, #16]
 8000b4c:	4b5a      	ldr	r3, [pc, #360]	; (8000cb8 <HAL_RCC_OscConfig+0x278>)
 8000b4e:	b16a      	cbz	r2, 8000b6c <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8000b50:	2201      	movs	r2, #1
 8000b52:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b54:	f7ff fb3c 	bl	80001d0 <HAL_GetTick>
 8000b58:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b5a:	6823      	ldr	r3, [r4, #0]
 8000b5c:	079f      	lsls	r7, r3, #30
 8000b5e:	d4ec      	bmi.n	8000b3a <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b60:	f7ff fb36 	bl	80001d0 <HAL_GetTick>
 8000b64:	1b80      	subs	r0, r0, r6
 8000b66:	2802      	cmp	r0, #2
 8000b68:	d9f7      	bls.n	8000b5a <HAL_RCC_OscConfig+0x11a>
 8000b6a:	e7ab      	b.n	8000ac4 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000b6c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b6e:	f7ff fb2f 	bl	80001d0 <HAL_GetTick>
 8000b72:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b74:	6823      	ldr	r3, [r4, #0]
 8000b76:	0798      	lsls	r0, r3, #30
 8000b78:	f57f af6e 	bpl.w	8000a58 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b7c:	f7ff fb28 	bl	80001d0 <HAL_GetTick>
 8000b80:	1b80      	subs	r0, r0, r6
 8000b82:	2802      	cmp	r0, #2
 8000b84:	d9f6      	bls.n	8000b74 <HAL_RCC_OscConfig+0x134>
 8000b86:	e79d      	b.n	8000ac4 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000b88:	69aa      	ldr	r2, [r5, #24]
 8000b8a:	4c4a      	ldr	r4, [pc, #296]	; (8000cb4 <HAL_RCC_OscConfig+0x274>)
 8000b8c:	4b4b      	ldr	r3, [pc, #300]	; (8000cbc <HAL_RCC_OscConfig+0x27c>)
 8000b8e:	b1da      	cbz	r2, 8000bc8 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8000b90:	2201      	movs	r2, #1
 8000b92:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000b94:	f7ff fb1c 	bl	80001d0 <HAL_GetTick>
 8000b98:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000b9c:	079b      	lsls	r3, r3, #30
 8000b9e:	d50d      	bpl.n	8000bbc <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000ba0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000ba4:	4b46      	ldr	r3, [pc, #280]	; (8000cc0 <HAL_RCC_OscConfig+0x280>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	fbb3 f3f2 	udiv	r3, r3, r2
 8000bac:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000bae:	bf00      	nop
  }
  while (Delay --);
 8000bb0:	9b01      	ldr	r3, [sp, #4]
 8000bb2:	1e5a      	subs	r2, r3, #1
 8000bb4:	9201      	str	r2, [sp, #4]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d1f9      	bne.n	8000bae <HAL_RCC_OscConfig+0x16e>
 8000bba:	e751      	b.n	8000a60 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000bbc:	f7ff fb08 	bl	80001d0 <HAL_GetTick>
 8000bc0:	1b80      	subs	r0, r0, r6
 8000bc2:	2802      	cmp	r0, #2
 8000bc4:	d9e9      	bls.n	8000b9a <HAL_RCC_OscConfig+0x15a>
 8000bc6:	e77d      	b.n	8000ac4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000bc8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000bca:	f7ff fb01 	bl	80001d0 <HAL_GetTick>
 8000bce:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000bd2:	079f      	lsls	r7, r3, #30
 8000bd4:	f57f af44 	bpl.w	8000a60 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000bd8:	f7ff fafa 	bl	80001d0 <HAL_GetTick>
 8000bdc:	1b80      	subs	r0, r0, r6
 8000bde:	2802      	cmp	r0, #2
 8000be0:	d9f6      	bls.n	8000bd0 <HAL_RCC_OscConfig+0x190>
 8000be2:	e76f      	b.n	8000ac4 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000be4:	4c33      	ldr	r4, [pc, #204]	; (8000cb4 <HAL_RCC_OscConfig+0x274>)
 8000be6:	69e3      	ldr	r3, [r4, #28]
 8000be8:	00d8      	lsls	r0, r3, #3
 8000bea:	d424      	bmi.n	8000c36 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8000bec:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000bee:	69e3      	ldr	r3, [r4, #28]
 8000bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf4:	61e3      	str	r3, [r4, #28]
 8000bf6:	69e3      	ldr	r3, [r4, #28]
 8000bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfc:	9300      	str	r3, [sp, #0]
 8000bfe:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c00:	4e30      	ldr	r6, [pc, #192]	; (8000cc4 <HAL_RCC_OscConfig+0x284>)
 8000c02:	6833      	ldr	r3, [r6, #0]
 8000c04:	05d9      	lsls	r1, r3, #23
 8000c06:	d518      	bpl.n	8000c3a <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c08:	68eb      	ldr	r3, [r5, #12]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d126      	bne.n	8000c5c <HAL_RCC_OscConfig+0x21c>
 8000c0e:	6a23      	ldr	r3, [r4, #32]
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000c16:	f7ff fadb 	bl	80001d0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c1a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000c1e:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c20:	6a23      	ldr	r3, [r4, #32]
 8000c22:	079b      	lsls	r3, r3, #30
 8000c24:	d53f      	bpl.n	8000ca6 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8000c26:	2f00      	cmp	r7, #0
 8000c28:	f43f af1e 	beq.w	8000a68 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c2c:	69e3      	ldr	r3, [r4, #28]
 8000c2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c32:	61e3      	str	r3, [r4, #28]
 8000c34:	e718      	b.n	8000a68 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000c36:	2700      	movs	r7, #0
 8000c38:	e7e2      	b.n	8000c00 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c3a:	6833      	ldr	r3, [r6, #0]
 8000c3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c40:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000c42:	f7ff fac5 	bl	80001d0 <HAL_GetTick>
 8000c46:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c48:	6833      	ldr	r3, [r6, #0]
 8000c4a:	05da      	lsls	r2, r3, #23
 8000c4c:	d4dc      	bmi.n	8000c08 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c4e:	f7ff fabf 	bl	80001d0 <HAL_GetTick>
 8000c52:	eba0 0008 	sub.w	r0, r0, r8
 8000c56:	2864      	cmp	r0, #100	; 0x64
 8000c58:	d9f6      	bls.n	8000c48 <HAL_RCC_OscConfig+0x208>
 8000c5a:	e733      	b.n	8000ac4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c5c:	b9ab      	cbnz	r3, 8000c8a <HAL_RCC_OscConfig+0x24a>
 8000c5e:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c60:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c64:	f023 0301 	bic.w	r3, r3, #1
 8000c68:	6223      	str	r3, [r4, #32]
 8000c6a:	6a23      	ldr	r3, [r4, #32]
 8000c6c:	f023 0304 	bic.w	r3, r3, #4
 8000c70:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000c72:	f7ff faad 	bl	80001d0 <HAL_GetTick>
 8000c76:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c78:	6a23      	ldr	r3, [r4, #32]
 8000c7a:	0798      	lsls	r0, r3, #30
 8000c7c:	d5d3      	bpl.n	8000c26 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c7e:	f7ff faa7 	bl	80001d0 <HAL_GetTick>
 8000c82:	1b80      	subs	r0, r0, r6
 8000c84:	4540      	cmp	r0, r8
 8000c86:	d9f7      	bls.n	8000c78 <HAL_RCC_OscConfig+0x238>
 8000c88:	e71c      	b.n	8000ac4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c8a:	2b05      	cmp	r3, #5
 8000c8c:	6a23      	ldr	r3, [r4, #32]
 8000c8e:	d103      	bne.n	8000c98 <HAL_RCC_OscConfig+0x258>
 8000c90:	f043 0304 	orr.w	r3, r3, #4
 8000c94:	6223      	str	r3, [r4, #32]
 8000c96:	e7ba      	b.n	8000c0e <HAL_RCC_OscConfig+0x1ce>
 8000c98:	f023 0301 	bic.w	r3, r3, #1
 8000c9c:	6223      	str	r3, [r4, #32]
 8000c9e:	6a23      	ldr	r3, [r4, #32]
 8000ca0:	f023 0304 	bic.w	r3, r3, #4
 8000ca4:	e7b6      	b.n	8000c14 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ca6:	f7ff fa93 	bl	80001d0 <HAL_GetTick>
 8000caa:	eba0 0008 	sub.w	r0, r0, r8
 8000cae:	42b0      	cmp	r0, r6
 8000cb0:	d9b6      	bls.n	8000c20 <HAL_RCC_OscConfig+0x1e0>
 8000cb2:	e707      	b.n	8000ac4 <HAL_RCC_OscConfig+0x84>
 8000cb4:	40021000 	.word	0x40021000
 8000cb8:	42420000 	.word	0x42420000
 8000cbc:	42420480 	.word	0x42420480
 8000cc0:	20000008 	.word	0x20000008
 8000cc4:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000cc8:	4b2a      	ldr	r3, [pc, #168]	; (8000d74 <HAL_RCC_OscConfig+0x334>)
 8000cca:	685a      	ldr	r2, [r3, #4]
 8000ccc:	461c      	mov	r4, r3
 8000cce:	f002 020c 	and.w	r2, r2, #12
 8000cd2:	2a08      	cmp	r2, #8
 8000cd4:	d03d      	beq.n	8000d52 <HAL_RCC_OscConfig+0x312>
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	4e27      	ldr	r6, [pc, #156]	; (8000d78 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000cda:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000cdc:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000cde:	d12b      	bne.n	8000d38 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8000ce0:	f7ff fa76 	bl	80001d0 <HAL_GetTick>
 8000ce4:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ce6:	6823      	ldr	r3, [r4, #0]
 8000ce8:	0199      	lsls	r1, r3, #6
 8000cea:	d41f      	bmi.n	8000d2c <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000cec:	6a2b      	ldr	r3, [r5, #32]
 8000cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cf2:	d105      	bne.n	8000d00 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000cf4:	6862      	ldr	r2, [r4, #4]
 8000cf6:	68a9      	ldr	r1, [r5, #8]
 8000cf8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d00:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000d02:	6862      	ldr	r2, [r4, #4]
 8000d04:	430b      	orrs	r3, r1
 8000d06:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000d0e:	2301      	movs	r3, #1
 8000d10:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000d12:	f7ff fa5d 	bl	80001d0 <HAL_GetTick>
 8000d16:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d18:	6823      	ldr	r3, [r4, #0]
 8000d1a:	019a      	lsls	r2, r3, #6
 8000d1c:	f53f aea8 	bmi.w	8000a70 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d20:	f7ff fa56 	bl	80001d0 <HAL_GetTick>
 8000d24:	1b40      	subs	r0, r0, r5
 8000d26:	2802      	cmp	r0, #2
 8000d28:	d9f6      	bls.n	8000d18 <HAL_RCC_OscConfig+0x2d8>
 8000d2a:	e6cb      	b.n	8000ac4 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d2c:	f7ff fa50 	bl	80001d0 <HAL_GetTick>
 8000d30:	1bc0      	subs	r0, r0, r7
 8000d32:	2802      	cmp	r0, #2
 8000d34:	d9d7      	bls.n	8000ce6 <HAL_RCC_OscConfig+0x2a6>
 8000d36:	e6c5      	b.n	8000ac4 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000d38:	f7ff fa4a 	bl	80001d0 <HAL_GetTick>
 8000d3c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d3e:	6823      	ldr	r3, [r4, #0]
 8000d40:	019b      	lsls	r3, r3, #6
 8000d42:	f57f ae95 	bpl.w	8000a70 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d46:	f7ff fa43 	bl	80001d0 <HAL_GetTick>
 8000d4a:	1b40      	subs	r0, r0, r5
 8000d4c:	2802      	cmp	r0, #2
 8000d4e:	d9f6      	bls.n	8000d3e <HAL_RCC_OscConfig+0x2fe>
 8000d50:	e6b8      	b.n	8000ac4 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000d52:	2801      	cmp	r0, #1
 8000d54:	f43f aeb7 	beq.w	8000ac6 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8000d58:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d5a:	6a2b      	ldr	r3, [r5, #32]
 8000d5c:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8000d60:	429a      	cmp	r2, r3
 8000d62:	f47f ae71 	bne.w	8000a48 <HAL_RCC_OscConfig+0x8>
 8000d66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000d68:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8000d6c:	1ac0      	subs	r0, r0, r3
 8000d6e:	bf18      	it	ne
 8000d70:	2001      	movne	r0, #1
 8000d72:	e6a8      	b.n	8000ac6 <HAL_RCC_OscConfig+0x86>
 8000d74:	40021000 	.word	0x40021000
 8000d78:	42420060 	.word	0x42420060

08000d7c <HAL_RCC_GetSysClockFreq>:
{
 8000d7c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000d7e:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000d80:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000d82:	ac02      	add	r4, sp, #8
 8000d84:	f103 0510 	add.w	r5, r3, #16
 8000d88:	4622      	mov	r2, r4
 8000d8a:	6818      	ldr	r0, [r3, #0]
 8000d8c:	6859      	ldr	r1, [r3, #4]
 8000d8e:	3308      	adds	r3, #8
 8000d90:	c203      	stmia	r2!, {r0, r1}
 8000d92:	42ab      	cmp	r3, r5
 8000d94:	4614      	mov	r4, r2
 8000d96:	d1f7      	bne.n	8000d88 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000d98:	2301      	movs	r3, #1
 8000d9a:	f88d 3004 	strb.w	r3, [sp, #4]
 8000d9e:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000da0:	4911      	ldr	r1, [pc, #68]	; (8000de8 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000da2:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000da6:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000da8:	f003 020c 	and.w	r2, r3, #12
 8000dac:	2a08      	cmp	r2, #8
 8000dae:	d117      	bne.n	8000de0 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000db0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000db4:	a806      	add	r0, sp, #24
 8000db6:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000db8:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000dba:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000dbe:	d50c      	bpl.n	8000dda <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000dc0:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000dc2:	480a      	ldr	r0, [pc, #40]	; (8000dec <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000dc4:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000dc8:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000dca:	aa06      	add	r2, sp, #24
 8000dcc:	4413      	add	r3, r2
 8000dce:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000dd2:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000dd6:	b007      	add	sp, #28
 8000dd8:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000dda:	4805      	ldr	r0, [pc, #20]	; (8000df0 <HAL_RCC_GetSysClockFreq+0x74>)
 8000ddc:	4350      	muls	r0, r2
 8000dde:	e7fa      	b.n	8000dd6 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000de0:	4802      	ldr	r0, [pc, #8]	; (8000dec <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000de2:	e7f8      	b.n	8000dd6 <HAL_RCC_GetSysClockFreq+0x5a>
 8000de4:	0800162c 	.word	0x0800162c
 8000de8:	40021000 	.word	0x40021000
 8000dec:	007a1200 	.word	0x007a1200
 8000df0:	003d0900 	.word	0x003d0900

08000df4 <HAL_RCC_ClockConfig>:
{
 8000df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000df8:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	b910      	cbnz	r0, 8000e04 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000dfe:	2001      	movs	r0, #1
 8000e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000e04:	4a45      	ldr	r2, [pc, #276]	; (8000f1c <HAL_RCC_ClockConfig+0x128>)
 8000e06:	6813      	ldr	r3, [r2, #0]
 8000e08:	f003 0307 	and.w	r3, r3, #7
 8000e0c:	428b      	cmp	r3, r1
 8000e0e:	d329      	bcc.n	8000e64 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e10:	6821      	ldr	r1, [r4, #0]
 8000e12:	078e      	lsls	r6, r1, #30
 8000e14:	d431      	bmi.n	8000e7a <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e16:	07ca      	lsls	r2, r1, #31
 8000e18:	d444      	bmi.n	8000ea4 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000e1a:	4a40      	ldr	r2, [pc, #256]	; (8000f1c <HAL_RCC_ClockConfig+0x128>)
 8000e1c:	6813      	ldr	r3, [r2, #0]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	429d      	cmp	r5, r3
 8000e24:	d367      	bcc.n	8000ef6 <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e26:	6822      	ldr	r2, [r4, #0]
 8000e28:	4d3d      	ldr	r5, [pc, #244]	; (8000f20 <HAL_RCC_ClockConfig+0x12c>)
 8000e2a:	f012 0f04 	tst.w	r2, #4
 8000e2e:	d16e      	bne.n	8000f0e <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e30:	0713      	lsls	r3, r2, #28
 8000e32:	d506      	bpl.n	8000e42 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000e34:	686b      	ldr	r3, [r5, #4]
 8000e36:	6922      	ldr	r2, [r4, #16]
 8000e38:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000e3c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000e40:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000e42:	f7ff ff9b 	bl	8000d7c <HAL_RCC_GetSysClockFreq>
 8000e46:	686b      	ldr	r3, [r5, #4]
 8000e48:	4a36      	ldr	r2, [pc, #216]	; (8000f24 <HAL_RCC_ClockConfig+0x130>)
 8000e4a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000e4e:	5cd3      	ldrb	r3, [r2, r3]
 8000e50:	40d8      	lsrs	r0, r3
 8000e52:	4b35      	ldr	r3, [pc, #212]	; (8000f28 <HAL_RCC_ClockConfig+0x134>)
 8000e54:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8000e56:	4b35      	ldr	r3, [pc, #212]	; (8000f2c <HAL_RCC_ClockConfig+0x138>)
 8000e58:	6818      	ldr	r0, [r3, #0]
 8000e5a:	f7ff f977 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000e5e:	2000      	movs	r0, #0
 8000e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e64:	6813      	ldr	r3, [r2, #0]
 8000e66:	f023 0307 	bic.w	r3, r3, #7
 8000e6a:	430b      	orrs	r3, r1
 8000e6c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e6e:	6813      	ldr	r3, [r2, #0]
 8000e70:	f003 0307 	and.w	r3, r3, #7
 8000e74:	4299      	cmp	r1, r3
 8000e76:	d1c2      	bne.n	8000dfe <HAL_RCC_ClockConfig+0xa>
 8000e78:	e7ca      	b.n	8000e10 <HAL_RCC_ClockConfig+0x1c>
 8000e7a:	4b29      	ldr	r3, [pc, #164]	; (8000f20 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e7c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000e80:	bf1e      	ittt	ne
 8000e82:	685a      	ldrne	r2, [r3, #4]
 8000e84:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000e88:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e8a:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000e8c:	bf42      	ittt	mi
 8000e8e:	685a      	ldrmi	r2, [r3, #4]
 8000e90:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000e94:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e96:	685a      	ldr	r2, [r3, #4]
 8000e98:	68a0      	ldr	r0, [r4, #8]
 8000e9a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000e9e:	4302      	orrs	r2, r0
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	e7b8      	b.n	8000e16 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ea4:	6862      	ldr	r2, [r4, #4]
 8000ea6:	4e1e      	ldr	r6, [pc, #120]	; (8000f20 <HAL_RCC_ClockConfig+0x12c>)
 8000ea8:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eaa:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000eac:	d11b      	bne.n	8000ee6 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eae:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eb2:	d0a4      	beq.n	8000dfe <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000eb4:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000eb6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000eba:	f023 0303 	bic.w	r3, r3, #3
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000ec2:	f7ff f985 	bl	80001d0 <HAL_GetTick>
 8000ec6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ec8:	6873      	ldr	r3, [r6, #4]
 8000eca:	6862      	ldr	r2, [r4, #4]
 8000ecc:	f003 030c 	and.w	r3, r3, #12
 8000ed0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000ed4:	d0a1      	beq.n	8000e1a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ed6:	f7ff f97b 	bl	80001d0 <HAL_GetTick>
 8000eda:	1bc0      	subs	r0, r0, r7
 8000edc:	4540      	cmp	r0, r8
 8000ede:	d9f3      	bls.n	8000ec8 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8000ee0:	2003      	movs	r0, #3
}
 8000ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ee6:	2a02      	cmp	r2, #2
 8000ee8:	d102      	bne.n	8000ef0 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000eea:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000eee:	e7e0      	b.n	8000eb2 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ef0:	f013 0f02 	tst.w	r3, #2
 8000ef4:	e7dd      	b.n	8000eb2 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ef6:	6813      	ldr	r3, [r2, #0]
 8000ef8:	f023 0307 	bic.w	r3, r3, #7
 8000efc:	432b      	orrs	r3, r5
 8000efe:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f00:	6813      	ldr	r3, [r2, #0]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	429d      	cmp	r5, r3
 8000f08:	f47f af79 	bne.w	8000dfe <HAL_RCC_ClockConfig+0xa>
 8000f0c:	e78b      	b.n	8000e26 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f0e:	686b      	ldr	r3, [r5, #4]
 8000f10:	68e1      	ldr	r1, [r4, #12]
 8000f12:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f16:	430b      	orrs	r3, r1
 8000f18:	606b      	str	r3, [r5, #4]
 8000f1a:	e789      	b.n	8000e30 <HAL_RCC_ClockConfig+0x3c>
 8000f1c:	40022000 	.word	0x40022000
 8000f20:	40021000 	.word	0x40021000
 8000f24:	08001657 	.word	0x08001657
 8000f28:	20000008 	.word	0x20000008
 8000f2c:	20000004 	.word	0x20000004

08000f30 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000f30:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000f32:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000f3a:	5cd3      	ldrb	r3, [r2, r3]
 8000f3c:	4a03      	ldr	r2, [pc, #12]	; (8000f4c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000f3e:	6810      	ldr	r0, [r2, #0]
}
 8000f40:	40d8      	lsrs	r0, r3
 8000f42:	4770      	bx	lr
 8000f44:	40021000 	.word	0x40021000
 8000f48:	08001667 	.word	0x08001667
 8000f4c:	20000008 	.word	0x20000008

08000f50 <wait_for_gpio_state_timeout.constprop.2>:

#define SDA_PIN     GPIO_PIN_7
#define SDA_PORT    GPIOB


static uint8_t wait_for_gpio_state_timeout(GPIO_TypeDef *port, uint16_t pin, GPIO_PinState state, uint32_t timeout)
 8000f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f54:	4606      	mov	r6, r0
 8000f56:	460f      	mov	r7, r1
 {
    uint32_t Tickstart = HAL_GetTick();
 8000f58:	f7ff f93a 	bl	80001d0 <HAL_GetTick>
    uint8_t ret = 1;
 8000f5c:	2401      	movs	r4, #1
    uint32_t Tickstart = HAL_GetTick();
 8000f5e:	4605      	mov	r5, r0

    for(;(state != HAL_GPIO_ReadPin(port, pin)) && (1 == ret);) // Wait until flag is set
 8000f60:	f8df 8028 	ldr.w	r8, [pc, #40]	; 8000f8c <wait_for_gpio_state_timeout.constprop.2+0x3c>
 8000f64:	4631      	mov	r1, r6
 8000f66:	4640      	mov	r0, r8
 8000f68:	f7ff faf6 	bl	8000558 <HAL_GPIO_ReadPin>
 8000f6c:	42b8      	cmp	r0, r7
 8000f6e:	d000      	beq.n	8000f72 <wait_for_gpio_state_timeout.constprop.2+0x22>
 8000f70:	b914      	cbnz	r4, 8000f78 <wait_for_gpio_state_timeout.constprop.2+0x28>
        }

        asm("nop");
    }
    return ret;
}
 8000f72:	4620      	mov	r0, r4
 8000f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if((timeout == 0U) || ((HAL_GetTick() - Tickstart) > timeout)) ret = 0;
 8000f78:	f7ff f92a 	bl	80001d0 <HAL_GetTick>
        asm("nop");
 8000f7c:	bf00      	nop
            if((timeout == 0U) || ((HAL_GetTick() - Tickstart) > timeout)) ret = 0;
 8000f7e:	1b44      	subs	r4, r0, r5
 8000f80:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8000f84:	bf8c      	ite	hi
 8000f86:	2400      	movhi	r4, #0
 8000f88:	2401      	movls	r4, #1
 8000f8a:	e7eb      	b.n	8000f64 <wait_for_gpio_state_timeout.constprop.2+0x14>
 8000f8c:	40010c00 	.word	0x40010c00

08000f90 <DWT_Init>:
extern I2C_HandleTypeDef hi2c1;
uint8_t control = 0; // команда управления

void DWT_Init(void)
{
    SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8000f90:	4a05      	ldr	r2, [pc, #20]	; (8000fa8 <DWT_Init+0x18>)
 8000f92:	6813      	ldr	r3, [r2, #0]
 8000f94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f98:	6013      	str	r3, [r2, #0]
	DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8000f9a:	4a04      	ldr	r2, [pc, #16]	; (8000fac <DWT_Init+0x1c>)
 8000f9c:	6813      	ldr	r3, [r2, #0]
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	6013      	str	r3, [r2, #0]
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	e000edfc 	.word	0xe000edfc
 8000fac:	e0001000 	.word	0xe0001000

08000fb0 <delay_us>:
}

void delay_us(uint32_t us)
{
    uint32_t us_count_tic =  us * (SystemCoreClock / 1000000);
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <delay_us+0x1c>)
 8000fb2:	4a07      	ldr	r2, [pc, #28]	; (8000fd0 <delay_us+0x20>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	fbb3 f3f2 	udiv	r3, r3, r2
    DWT->CYCCNT = 0U; // обнуляем счётчик
 8000fba:	2200      	movs	r2, #0
    uint32_t us_count_tic =  us * (SystemCoreClock / 1000000);
 8000fbc:	4358      	muls	r0, r3
    DWT->CYCCNT = 0U; // обнуляем счётчик
 8000fbe:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <delay_us+0x24>)
 8000fc0:	605a      	str	r2, [r3, #4]
    while(DWT->CYCCNT < us_count_tic);
 8000fc2:	685a      	ldr	r2, [r3, #4]
 8000fc4:	4290      	cmp	r0, r2
 8000fc6:	d8fc      	bhi.n	8000fc2 <delay_us+0x12>
}
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	20000008 	.word	0x20000008
 8000fd0:	000f4240 	.word	0x000f4240
 8000fd4:	e0001000 	.word	0xe0001000

08000fd8 <LCD_WriteByteI2CLCD>:

void LCD_WriteByteI2CLCD(uint8_t bt)
{
	uint32_t status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDR, &bt, 1, 1000);
 8000fd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 8000fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDR, &bt, 1, 1000);
 8000fde:	4e41      	ldr	r6, [pc, #260]	; (80010e4 <LCD_WriteByteI2CLCD+0x10c>)
{
 8000fe0:	b089      	sub	sp, #36	; 0x24
 8000fe2:	aa08      	add	r2, sp, #32
 8000fe4:	f802 0d11 	strb.w	r0, [r2, #-17]!
	uint32_t status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDR, &bt, 1, 1000);
 8000fe8:	217e      	movs	r1, #126	; 0x7e
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	4630      	mov	r0, r6
 8000fee:	2301      	movs	r3, #1
 8000ff0:	f7ff fc58 	bl	80008a4 <HAL_I2C_Master_Transmit>

	if(status != HAL_OK)
 8000ff4:	2800      	cmp	r0, #0
 8000ff6:	d072      	beq.n	80010de <LCD_WriteByteI2CLCD+0x106>

static void I2C_ClearBusyFlagErratum(I2C_HandleTypeDef *hi2c, uint32_t timeout)
{
	// 2.13.7 I2C analog filter may provide wrong value, locking BUSY. STM32F10xx8 STM32F10xxB Errata sheet

    GPIO_InitTypeDef GPIO_InitStructure = {0};
 8000ff8:	2210      	movs	r2, #16
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	eb0d 0002 	add.w	r0, sp, r2
 8001000:	f000 faf8 	bl	80015f4 <memset>

    // 1. Clear PE bit.
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_PE);
 8001004:	6832      	ldr	r2, [r6, #0]

    //  2. Configure the SCL and SDA I/Os as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    HAL_I2C_DeInit(hi2c);
 8001006:	4630      	mov	r0, r6
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_PE);
 8001008:	6813      	ldr	r3, [r2, #0]

    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
    GPIO_InitStructure.Pull = GPIO_NOPULL;

    GPIO_InitStructure.Pin = SCL_PIN;
 800100a:	2540      	movs	r5, #64	; 0x40
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_PE);
 800100c:	f023 0301 	bic.w	r3, r3, #1
 8001010:	6013      	str	r3, [r2, #0]
    HAL_I2C_DeInit(hi2c);
 8001012:	f7ff fc2d 	bl	8000870 <HAL_I2C_DeInit>
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001016:	2700      	movs	r7, #0
    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 8001018:	2311      	movs	r3, #17
    HAL_GPIO_Init(SCL_PORT, &GPIO_InitStructure);

    GPIO_InitStructure.Pin = SDA_PIN;
 800101a:	2480      	movs	r4, #128	; 0x80
    HAL_GPIO_Init(SCL_PORT, &GPIO_InitStructure);
 800101c:	a904      	add	r1, sp, #16
 800101e:	4832      	ldr	r0, [pc, #200]	; (80010e8 <LCD_WriteByteI2CLCD+0x110>)
    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 8001020:	9305      	str	r3, [sp, #20]
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001022:	9706      	str	r7, [sp, #24]
    GPIO_InitStructure.Pin = SCL_PIN;
 8001024:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(SCL_PORT, &GPIO_InitStructure);
 8001026:	f7ff f947 	bl	80002b8 <HAL_GPIO_Init>
    HAL_GPIO_Init(SDA_PORT, &GPIO_InitStructure);
 800102a:	a904      	add	r1, sp, #16
 800102c:	482e      	ldr	r0, [pc, #184]	; (80010e8 <LCD_WriteByteI2CLCD+0x110>)
    GPIO_InitStructure.Pin = SDA_PIN;
 800102e:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(SDA_PORT, &GPIO_InitStructure);
 8001030:	f7ff f942 	bl	80002b8 <HAL_GPIO_Init>

    // 3. Check SCL and SDA High level in GPIOx_IDR.
    HAL_GPIO_WritePin(SDA_PORT, SDA_PIN, GPIO_PIN_SET);
 8001034:	4621      	mov	r1, r4
 8001036:	2201      	movs	r2, #1
 8001038:	482b      	ldr	r0, [pc, #172]	; (80010e8 <LCD_WriteByteI2CLCD+0x110>)
 800103a:	f7ff fa93 	bl	8000564 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_SET);
 800103e:	2201      	movs	r2, #1
 8001040:	4629      	mov	r1, r5
 8001042:	4829      	ldr	r0, [pc, #164]	; (80010e8 <LCD_WriteByteI2CLCD+0x110>)
 8001044:	f7ff fa8e 	bl	8000564 <HAL_GPIO_WritePin>

    wait_for_gpio_state_timeout(SCL_PORT, SCL_PIN, GPIO_PIN_SET, timeout);
 8001048:	2101      	movs	r1, #1
 800104a:	4628      	mov	r0, r5
 800104c:	f7ff ff80 	bl	8000f50 <wait_for_gpio_state_timeout.constprop.2>
    wait_for_gpio_state_timeout(SDA_PORT, SDA_PIN, GPIO_PIN_SET, timeout);
 8001050:	2101      	movs	r1, #1
 8001052:	4620      	mov	r0, r4
 8001054:	f7ff ff7c 	bl	8000f50 <wait_for_gpio_state_timeout.constprop.2>

    // 4. Configure the SDA I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(SDA_PORT, SDA_PIN, GPIO_PIN_RESET);
 8001058:	463a      	mov	r2, r7
 800105a:	4621      	mov	r1, r4
 800105c:	4822      	ldr	r0, [pc, #136]	; (80010e8 <LCD_WriteByteI2CLCD+0x110>)
 800105e:	f7ff fa81 	bl	8000564 <HAL_GPIO_WritePin>

    // 5. Check SDA Low level in GPIOx_IDR.
    wait_for_gpio_state_timeout(SDA_PORT, SDA_PIN, GPIO_PIN_RESET, timeout);
 8001062:	4639      	mov	r1, r7
 8001064:	4620      	mov	r0, r4
 8001066:	f7ff ff73 	bl	8000f50 <wait_for_gpio_state_timeout.constprop.2>

    // 6. Configure the SCL I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_RESET);
 800106a:	463a      	mov	r2, r7
 800106c:	4629      	mov	r1, r5
 800106e:	481e      	ldr	r0, [pc, #120]	; (80010e8 <LCD_WriteByteI2CLCD+0x110>)
 8001070:	f7ff fa78 	bl	8000564 <HAL_GPIO_WritePin>

    // 7. Check SCL Low level in GPIOx_IDR.
    wait_for_gpio_state_timeout(SCL_PORT, SCL_PIN, GPIO_PIN_RESET, timeout);
 8001074:	4639      	mov	r1, r7
 8001076:	4628      	mov	r0, r5
 8001078:	f7ff ff6a 	bl	8000f50 <wait_for_gpio_state_timeout.constprop.2>

    // 8. Configure the SCL I/O as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_SET);
 800107c:	2201      	movs	r2, #1
 800107e:	4629      	mov	r1, r5
 8001080:	4819      	ldr	r0, [pc, #100]	; (80010e8 <LCD_WriteByteI2CLCD+0x110>)
 8001082:	f7ff fa6f 	bl	8000564 <HAL_GPIO_WritePin>

    // 9. Check SCL High level in GPIOx_IDR.
    wait_for_gpio_state_timeout(SCL_PORT, SCL_PIN, GPIO_PIN_SET, timeout);
 8001086:	2101      	movs	r1, #1
 8001088:	4628      	mov	r0, r5
 800108a:	f7ff ff61 	bl	8000f50 <wait_for_gpio_state_timeout.constprop.2>

    // 10. Configure the SDA I/O as General Purpose Output Open-Drain , High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(SDA_PORT, SDA_PIN, GPIO_PIN_SET);
 800108e:	2201      	movs	r2, #1
 8001090:	4621      	mov	r1, r4
 8001092:	4815      	ldr	r0, [pc, #84]	; (80010e8 <LCD_WriteByteI2CLCD+0x110>)
 8001094:	f7ff fa66 	bl	8000564 <HAL_GPIO_WritePin>

    // 11. Check SDA High level in GPIOx_IDR.
    wait_for_gpio_state_timeout(SDA_PORT, SDA_PIN, GPIO_PIN_SET, timeout);
 8001098:	2101      	movs	r1, #1
 800109a:	4620      	mov	r0, r4
 800109c:	f7ff ff58 	bl	8000f50 <wait_for_gpio_state_timeout.constprop.2>

    // 12. Configure the SCL and SDA I/Os as Alternate function Open-Drain.
    GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 80010a0:	2312      	movs	r3, #18
    //GPIO_InitStructure.Alternate = GPIO_AF4_I2C2; // F4

    GPIO_InitStructure.Pin = SCL_PIN;
    HAL_GPIO_Init(SCL_PORT, &GPIO_InitStructure);
 80010a2:	a904      	add	r1, sp, #16
 80010a4:	4810      	ldr	r0, [pc, #64]	; (80010e8 <LCD_WriteByteI2CLCD+0x110>)
    GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 80010a6:	9305      	str	r3, [sp, #20]
    GPIO_InitStructure.Pin = SCL_PIN;
 80010a8:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(SCL_PORT, &GPIO_InitStructure);
 80010aa:	f7ff f905 	bl	80002b8 <HAL_GPIO_Init>

    GPIO_InitStructure.Pin = SDA_PIN;
    HAL_GPIO_Init(SDA_PORT, &GPIO_InitStructure);
 80010ae:	a904      	add	r1, sp, #16
 80010b0:	480d      	ldr	r0, [pc, #52]	; (80010e8 <LCD_WriteByteI2CLCD+0x110>)
    GPIO_InitStructure.Pin = SDA_PIN;
 80010b2:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(SDA_PORT, &GPIO_InitStructure);
 80010b4:	f7ff f900 	bl	80002b8 <HAL_GPIO_Init>

    // 13. Set SWRST bit in I2Cx_CR1 register.
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80010b8:	6833      	ldr	r3, [r6, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010c0:	601a      	str	r2, [r3, #0]
    asm("nop");
 80010c2:	bf00      	nop

    /* 14. Clear SWRST bit in I2Cx_CR1 register. */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010ca:	601a      	str	r2, [r3, #0]
    asm("nop");
 80010cc:	bf00      	nop

    /* 15. Enable the I2C peripheral by setting the PE bit in I2Cx_CR1 register */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_PE);
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	f042 0201 	orr.w	r2, r2, #1
 80010d4:	601a      	str	r2, [r3, #0]
    asm("nop");
 80010d6:	bf00      	nop

    // Call initialization function.
    HAL_I2C_Init(hi2c);
 80010d8:	4630      	mov	r0, r6
 80010da:	f7ff fb25 	bl	8000728 <HAL_I2C_Init>
	{
		char str[32] = {0,};
		snprintf(str, 32, "HAL_I2C_Master_Transmit");
		I2C_Error(str, status);
	}*/
}
 80010de:	b009      	add	sp, #36	; 0x24
 80010e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000030 	.word	0x20000030
 80010e8:	40010c00 	.word	0x40010c00

080010ec <sendhalfbyte>:

void sendhalfbyte(uint8_t c)
{
 80010ec:	b538      	push	{r3, r4, r5, lr}
 80010ee:	4605      	mov	r5, r0
	c <<= 4;
	E_high(); // установка линии Е в 1
 80010f0:	4c0d      	ldr	r4, [pc, #52]	; (8001128 <sendhalfbyte+0x3c>)
 80010f2:	7820      	ldrb	r0, [r4, #0]
 80010f4:	f040 0004 	orr.w	r0, r0, #4
 80010f8:	7020      	strb	r0, [r4, #0]
 80010fa:	f7ff ff6d 	bl	8000fd8 <LCD_WriteByteI2CLCD>
	delay_us(50);
 80010fe:	2032      	movs	r0, #50	; 0x32
 8001100:	f7ff ff56 	bl	8000fb0 <delay_us>
	LCD_WriteByteI2CLCD(control | c);
 8001104:	7820      	ldrb	r0, [r4, #0]
 8001106:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
 800110a:	b2c0      	uxtb	r0, r0
 800110c:	f7ff ff64 	bl	8000fd8 <LCD_WriteByteI2CLCD>
	E_low(); // установка линии Е в 0
 8001110:	7820      	ldrb	r0, [r4, #0]
 8001112:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
 8001116:	7020      	strb	r0, [r4, #0]
 8001118:	f7ff ff5e 	bl	8000fd8 <LCD_WriteByteI2CLCD>
	delay_us(50);
}
 800111c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delay_us(50);
 8001120:	2032      	movs	r0, #50	; 0x32
 8001122:	f7ff bf45 	b.w	8000fb0 <delay_us>
 8001126:	bf00      	nop
 8001128:	20000028 	.word	0x20000028

0800112c <sendbyte>:

void sendbyte(uint8_t c, uint8_t RS)
{
 800112c:	b510      	push	{r4, lr}
 800112e:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <sendbyte+0x2c>)
 8001130:	4604      	mov	r4, r0
	if(RS == 0) RS_low();
 8001132:	7818      	ldrb	r0, [r3, #0]
 8001134:	b961      	cbnz	r1, 8001150 <sendbyte+0x24>
 8001136:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	else RS_high();
 800113a:	7018      	strb	r0, [r3, #0]
 800113c:	f7ff ff4c 	bl	8000fd8 <LCD_WriteByteI2CLCD>
	uint8_t hc = 0;
	hc = c >> 4;
	sendhalfbyte(hc);
 8001140:	0920      	lsrs	r0, r4, #4
 8001142:	f7ff ffd3 	bl	80010ec <sendhalfbyte>
	sendhalfbyte(c);
 8001146:	4620      	mov	r0, r4
}
 8001148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	sendhalfbyte(c);
 800114c:	f7ff bfce 	b.w	80010ec <sendhalfbyte>
	else RS_high();
 8001150:	f040 0001 	orr.w	r0, r0, #1
 8001154:	e7f1      	b.n	800113a <sendbyte+0xe>
 8001156:	bf00      	nop
 8001158:	20000028 	.word	0x20000028

0800115c <LCD_Clear>:

void LCD_Clear(void)
{
 800115c:	b508      	push	{r3, lr}
	sendbyte(0x01, 0);
 800115e:	2001      	movs	r0, #1
 8001160:	2100      	movs	r1, #0
 8001162:	f7ff ffe3 	bl	800112c <sendbyte>
	HAL_Delay(2);
}
 8001166:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(2);
 800116a:	2002      	movs	r0, #2
 800116c:	f7ff b836 	b.w	80001dc <HAL_Delay>

08001170 <LCD_SendChar>:

void LCD_SendChar(char ch)
{
	sendbyte(ch, 1);
 8001170:	2101      	movs	r1, #1
 8001172:	f7ff bfdb 	b.w	800112c <sendbyte>

08001176 <LCD_String>:
}

void LCD_String(char* st)
{
 8001176:	b538      	push	{r3, r4, r5, lr}
 8001178:	4605      	mov	r5, r0
	uint8_t i = 0;
	while(st[i] != 0)
 800117a:	2400      	movs	r4, #0
 800117c:	b2e3      	uxtb	r3, r4
 800117e:	5ce8      	ldrb	r0, [r5, r3]
 8001180:	3401      	adds	r4, #1
 8001182:	b900      	cbnz	r0, 8001186 <LCD_String+0x10>
	{
		sendbyte(st[i], 1);
		i++;
	}
}
 8001184:	bd38      	pop	{r3, r4, r5, pc}
		sendbyte(st[i], 1);
 8001186:	2101      	movs	r1, #1
 8001188:	f7ff ffd0 	bl	800112c <sendbyte>
 800118c:	e7f6      	b.n	800117c <LCD_String+0x6>

0800118e <LCD_SetPos>:

void LCD_SetPos(uint8_t x, uint8_t y)
{
 800118e:	b508      	push	{r3, lr}
	switch(y)
 8001190:	2903      	cmp	r1, #3
 8001192:	d817      	bhi.n	80011c4 <LCD_SetPos+0x36>
 8001194:	e8df f001 	tbb	[pc, r1]
 8001198:	14120c02 	.word	0x14120c02
	{
		case 0:
			sendbyte(x|0x80, 0);
 800119c:	2100      	movs	r1, #0
 800119e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
		case 2:
			sendbyte((0x14+x)|0x80, 0);
			HAL_Delay(1);
			break;
		case 3:
			sendbyte((0x54+x)|0x80, 0);
 80011a2:	f7ff ffc3 	bl	800112c <sendbyte>
			HAL_Delay(1);
			break;
	}
}
 80011a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			HAL_Delay(1);
 80011aa:	2001      	movs	r0, #1
 80011ac:	f7ff b816 	b.w	80001dc <HAL_Delay>
			sendbyte((0x40+x)|0x80, 0);
 80011b0:	3040      	adds	r0, #64	; 0x40
			sendbyte((0x54+x)|0x80, 0);
 80011b2:	f060 007f 	orn	r0, r0, #127	; 0x7f
 80011b6:	2100      	movs	r1, #0
 80011b8:	b2c0      	uxtb	r0, r0
 80011ba:	e7f2      	b.n	80011a2 <LCD_SetPos+0x14>
			sendbyte((0x14+x)|0x80, 0);
 80011bc:	3014      	adds	r0, #20
 80011be:	e7f8      	b.n	80011b2 <LCD_SetPos+0x24>
			sendbyte((0x54+x)|0x80, 0);
 80011c0:	3054      	adds	r0, #84	; 0x54
 80011c2:	e7f6      	b.n	80011b2 <LCD_SetPos+0x24>
 80011c4:	bd08      	pop	{r3, pc}
	...

080011c8 <LCD_ini>:

void LCD_ini(void)
{
 80011c8:	b510      	push	{r4, lr}
	DWT_Init();
 80011ca:	f7ff fee1 	bl	8000f90 <DWT_Init>
	
	HAL_Delay(15);
 80011ce:	200f      	movs	r0, #15
 80011d0:	f7ff f804 	bl	80001dc <HAL_Delay>
	sendhalfbyte(0x03);
 80011d4:	2003      	movs	r0, #3
 80011d6:	f7ff ff89 	bl	80010ec <sendhalfbyte>
	HAL_Delay(4);
 80011da:	2004      	movs	r0, #4
 80011dc:	f7fe fffe 	bl	80001dc <HAL_Delay>
	sendhalfbyte(0x03);
 80011e0:	2003      	movs	r0, #3
 80011e2:	f7ff ff83 	bl	80010ec <sendhalfbyte>
	HAL_Delay(1);
 80011e6:	2001      	movs	r0, #1
 80011e8:	f7fe fff8 	bl	80001dc <HAL_Delay>
	sendhalfbyte(0x03);
 80011ec:	2003      	movs	r0, #3
 80011ee:	f7ff ff7d 	bl	80010ec <sendhalfbyte>
	HAL_Delay(1);
 80011f2:	2001      	movs	r0, #1
 80011f4:	f7fe fff2 	bl	80001dc <HAL_Delay>
	sendhalfbyte(0x02);
 80011f8:	2002      	movs	r0, #2
 80011fa:	f7ff ff77 	bl	80010ec <sendhalfbyte>
	HAL_Delay(1);
 80011fe:	2001      	movs	r0, #1
 8001200:	f7fe ffec 	bl	80001dc <HAL_Delay>
	sendbyte(0x28, 0);//режим 4 бит, 2 линии (для нашего большого дисплея это 4 линии, шрифт 5х8
 8001204:	2100      	movs	r1, #0
 8001206:	2028      	movs	r0, #40	; 0x28
 8001208:	f7ff ff90 	bl	800112c <sendbyte>
	HAL_Delay(1);
 800120c:	2001      	movs	r0, #1
 800120e:	f7fe ffe5 	bl	80001dc <HAL_Delay>
	sendbyte(0x0C,0);//дисплей включаем (D=1), курсоры никакие не нужны
 8001212:	2100      	movs	r1, #0
 8001214:	200c      	movs	r0, #12
 8001216:	f7ff ff89 	bl	800112c <sendbyte>
	HAL_Delay(1);
 800121a:	2001      	movs	r0, #1
 800121c:	f7fe ffde 	bl	80001dc <HAL_Delay>
	sendbyte(0x01,0);//уберем мусор
 8001220:	2100      	movs	r1, #0
 8001222:	2001      	movs	r0, #1
 8001224:	f7ff ff82 	bl	800112c <sendbyte>
	HAL_Delay(2);
 8001228:	2002      	movs	r0, #2
	sendbyte(0x06,0);//пишем влево
	HAL_Delay(1);
	led_on();//подсветка
 800122a:	4c0d      	ldr	r4, [pc, #52]	; (8001260 <LCD_ini+0x98>)
	HAL_Delay(2);
 800122c:	f7fe ffd6 	bl	80001dc <HAL_Delay>
	sendbyte(0x06,0);//пишем влево
 8001230:	2100      	movs	r1, #0
 8001232:	2006      	movs	r0, #6
 8001234:	f7ff ff7a 	bl	800112c <sendbyte>
	HAL_Delay(1);
 8001238:	2001      	movs	r0, #1
 800123a:	f7fe ffcf 	bl	80001dc <HAL_Delay>
	led_on();//подсветка
 800123e:	7820      	ldrb	r0, [r4, #0]
 8001240:	f040 0008 	orr.w	r0, r0, #8
 8001244:	7020      	strb	r0, [r4, #0]
 8001246:	f7ff fec7 	bl	8000fd8 <LCD_WriteByteI2CLCD>
	HAL_Delay(1);
 800124a:	2001      	movs	r0, #1
 800124c:	f7fe ffc6 	bl	80001dc <HAL_Delay>
	RW_low(); // запись в дисплей
 8001250:	7820      	ldrb	r0, [r4, #0]
 8001252:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 8001256:	7020      	strb	r0, [r4, #0]
}
 8001258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	RW_low(); // запись в дисплей
 800125c:	f7ff bebc 	b.w	8000fd8 <LCD_WriteByteI2CLCD>
 8001260:	20000028 	.word	0x20000028

08001264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001264:	b510      	push	{r4, lr}
 8001266:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001268:	2228      	movs	r2, #40	; 0x28
 800126a:	2100      	movs	r1, #0
 800126c:	a806      	add	r0, sp, #24
 800126e:	f000 f9c1 	bl	80015f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001272:	2214      	movs	r2, #20
 8001274:	2100      	movs	r1, #0
 8001276:	a801      	add	r0, sp, #4
 8001278:	f000 f9bc 	bl	80015f4 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800127c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001280:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001282:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001284:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001286:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001288:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800128c:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800128e:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001290:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001292:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001294:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001296:	f7ff fbd3 	bl	8000a40 <HAL_RCC_OscConfig>
 800129a:	b100      	cbz	r0, 800129e <SystemClock_Config+0x3a>
 800129c:	e7fe      	b.n	800129c <SystemClock_Config+0x38>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800129e:	230f      	movs	r3, #15
 80012a0:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012a6:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012a8:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012aa:	4621      	mov	r1, r4
 80012ac:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ae:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012b0:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012b2:	f7ff fd9f 	bl	8000df4 <HAL_RCC_ClockConfig>
 80012b6:	b100      	cbz	r0, 80012ba <SystemClock_Config+0x56>
 80012b8:	e7fe      	b.n	80012b8 <SystemClock_Config+0x54>
  {
    Error_Handler();
  }
}
 80012ba:	b010      	add	sp, #64	; 0x40
 80012bc:	bd10      	pop	{r4, pc}
	...

080012c0 <main>:
{
 80012c0:	b500      	push	{lr}
  __HAL_RCC_I2C1_CLK_ENABLE();
 80012c2:	4c54      	ldr	r4, [pc, #336]	; (8001414 <main+0x154>)
{
 80012c4:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 80012c6:	f7fe ff65 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 80012ca:	f7ff ffcb 	bl	8001264 <SystemClock_Config>
  __HAL_RCC_I2C1_CLK_ENABLE();
 80012ce:	69e3      	ldr	r3, [r4, #28]
  HAL_Delay(100);
 80012d0:	2064      	movs	r0, #100	; 0x64
  __HAL_RCC_I2C1_CLK_ENABLE();
 80012d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012d6:	61e3      	str	r3, [r4, #28]
 80012d8:	69e3      	ldr	r3, [r4, #28]
 80012da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	9b00      	ldr	r3, [sp, #0]
  HAL_Delay(100);
 80012e2:	f7fe ff7b 	bl	80001dc <HAL_Delay>
  __HAL_RCC_I2C1_FORCE_RESET();
 80012e6:	6923      	ldr	r3, [r4, #16]
  HAL_Delay(100);
 80012e8:	2064      	movs	r0, #100	; 0x64
  __HAL_RCC_I2C1_FORCE_RESET();
 80012ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012ee:	6123      	str	r3, [r4, #16]
  HAL_Delay(100);
 80012f0:	f7fe ff74 	bl	80001dc <HAL_Delay>
  __HAL_RCC_I2C1_RELEASE_RESET();
 80012f4:	6923      	ldr	r3, [r4, #16]
  HAL_Delay(100);
 80012f6:	2064      	movs	r0, #100	; 0x64
  __HAL_RCC_I2C1_RELEASE_RESET();
 80012f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80012fc:	6123      	str	r3, [r4, #16]
  HAL_Delay(100);
 80012fe:	f7fe ff6d 	bl	80001dc <HAL_Delay>
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001302:	69a3      	ldr	r3, [r4, #24]
  hi2c1.Instance = I2C1;
 8001304:	4844      	ldr	r0, [pc, #272]	; (8001418 <main+0x158>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001306:	f043 0320 	orr.w	r3, r3, #32
 800130a:	61a3      	str	r3, [r4, #24]
 800130c:	69a3      	ldr	r3, [r4, #24]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800130e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001312:	f003 0320 	and.w	r3, r3, #32
 8001316:	9301      	str	r3, [sp, #4]
 8001318:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800131a:	69a3      	ldr	r3, [r4, #24]
 800131c:	f043 0304 	orr.w	r3, r3, #4
 8001320:	61a3      	str	r3, [r4, #24]
 8001322:	69a3      	ldr	r3, [r4, #24]
 8001324:	f003 0304 	and.w	r3, r3, #4
 8001328:	9302      	str	r3, [sp, #8]
 800132a:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800132c:	69a3      	ldr	r3, [r4, #24]
 800132e:	f043 0308 	orr.w	r3, r3, #8
 8001332:	61a3      	str	r3, [r4, #24]
 8001334:	69a3      	ldr	r3, [r4, #24]
  hi2c1.Init.ClockSpeed = 100000;
 8001336:	4c39      	ldr	r4, [pc, #228]	; (800141c <main+0x15c>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001338:	f003 0308 	and.w	r3, r3, #8
 800133c:	9303      	str	r3, [sp, #12]
 800133e:	9b03      	ldr	r3, [sp, #12]
  hi2c1.Init.ClockSpeed = 100000;
 8001340:	4b37      	ldr	r3, [pc, #220]	; (8001420 <main+0x160>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001342:	6102      	str	r2, [r0, #16]
  hi2c1.Init.ClockSpeed = 100000;
 8001344:	e880 0018 	stmia.w	r0, {r3, r4}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001348:	2300      	movs	r3, #0
 800134a:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800134c:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800134e:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001350:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001352:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001354:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001356:	f7ff f9e7 	bl	8000728 <HAL_I2C_Init>
 800135a:	4604      	mov	r4, r0
 800135c:	b100      	cbz	r0, 8001360 <main+0xa0>
 800135e:	e7fe      	b.n	800135e <main+0x9e>
  char str[16] = {0,};
 8001360:	2210      	movs	r2, #16
 8001362:	4601      	mov	r1, r0
 8001364:	eb0d 0002 	add.w	r0, sp, r2
 8001368:	f000 f944 	bl	80015f4 <memset>
  LCD_ini();
 800136c:	f7ff ff2c 	bl	80011c8 <LCD_ini>
  snprintf(str, 10, "Stm32F103");
 8001370:	492c      	ldr	r1, [pc, #176]	; (8001424 <main+0x164>)
 8001372:	a804      	add	r0, sp, #16
 8001374:	f000 f946 	bl	8001604 <strcpy>
  LCD_String(str);
 8001378:	a804      	add	r0, sp, #16
 800137a:	f7ff fefc 	bl	8001176 <LCD_String>
  HAL_Delay(1000);
 800137e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001382:	f7fe ff2b 	bl	80001dc <HAL_Delay>
  LCD_Clear();
 8001386:	f7ff fee9 	bl	800115c <LCD_Clear>
  LCD_SetPos(4, 0); // с четвертого символа в первой строке
 800138a:	4621      	mov	r1, r4
 800138c:	2004      	movs	r0, #4
 800138e:	f7ff fefe 	bl	800118e <LCD_SetPos>
  LCD_SendChar('s');
 8001392:	2073      	movs	r0, #115	; 0x73
 8001394:	f7ff feec 	bl	8001170 <LCD_SendChar>
  LCD_SetPos(8, 1); // с восьмого символа во второй строке
 8001398:	2101      	movs	r1, #1
 800139a:	2008      	movs	r0, #8
 800139c:	f7ff fef7 	bl	800118e <LCD_SetPos>
  LCD_SendChar('t');
 80013a0:	2074      	movs	r0, #116	; 0x74
 80013a2:	f7ff fee5 	bl	8001170 <LCD_SendChar>
  LCD_SetPos(12, 2);
 80013a6:	2102      	movs	r1, #2
 80013a8:	200c      	movs	r0, #12
 80013aa:	f7ff fef0 	bl	800118e <LCD_SetPos>
  LCD_SendChar('m');
 80013ae:	206d      	movs	r0, #109	; 0x6d
 80013b0:	f7ff fede 	bl	8001170 <LCD_SendChar>
  LCD_SetPos(16, 3);
 80013b4:	2103      	movs	r1, #3
 80013b6:	2010      	movs	r0, #16
 80013b8:	f7ff fee9 	bl	800118e <LCD_SetPos>
  LCD_SendChar('3');
 80013bc:	2033      	movs	r0, #51	; 0x33
 80013be:	f7ff fed7 	bl	8001170 <LCD_SendChar>
  LCD_SendChar('2');
 80013c2:	2032      	movs	r0, #50	; 0x32
 80013c4:	f7ff fed4 	bl	8001170 <LCD_SendChar>
  HAL_Delay(1000);
 80013c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013cc:	f7fe ff06 	bl	80001dc <HAL_Delay>
	  snprintf(str, 6, "Kisia");
 80013d0:	4d15      	ldr	r5, [pc, #84]	; (8001428 <main+0x168>)
	  snprintf(str, 11, "I love you");
 80013d2:	4c16      	ldr	r4, [pc, #88]	; (800142c <main+0x16c>)
	  LCD_Clear();
 80013d4:	f7ff fec2 	bl	800115c <LCD_Clear>
	  snprintf(str, 6, "Kisia");
 80013d8:	4629      	mov	r1, r5
 80013da:	a804      	add	r0, sp, #16
 80013dc:	f000 f912 	bl	8001604 <strcpy>
	  LCD_String(str);
 80013e0:	a804      	add	r0, sp, #16
 80013e2:	f7ff fec8 	bl	8001176 <LCD_String>
	  HAL_Delay(1000);
 80013e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013ea:	f7fe fef7 	bl	80001dc <HAL_Delay>
	  LCD_Clear();
 80013ee:	f7ff feb5 	bl	800115c <LCD_Clear>
	  LCD_SetPos(0, 1);
 80013f2:	2101      	movs	r1, #1
 80013f4:	2000      	movs	r0, #0
 80013f6:	f7ff feca 	bl	800118e <LCD_SetPos>
	  snprintf(str, 11, "I love you");
 80013fa:	4621      	mov	r1, r4
 80013fc:	a804      	add	r0, sp, #16
 80013fe:	f000 f901 	bl	8001604 <strcpy>
	  LCD_String(str);
 8001402:	a804      	add	r0, sp, #16
 8001404:	f7ff feb7 	bl	8001176 <LCD_String>
	  HAL_Delay(1000);
 8001408:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800140c:	f7fe fee6 	bl	80001dc <HAL_Delay>
 8001410:	e7e0      	b.n	80013d4 <main+0x114>
 8001412:	bf00      	nop
 8001414:	40021000 	.word	0x40021000
 8001418:	20000030 	.word	0x20000030
 800141c:	000186a0 	.word	0x000186a0
 8001420:	40005400 	.word	0x40005400
 8001424:	0800163c 	.word	0x0800163c
 8001428:	08001646 	.word	0x08001646
 800142c:	0800164c 	.word	0x0800164c

08001430 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001430:	4b0e      	ldr	r3, [pc, #56]	; (800146c <HAL_MspInit+0x3c>)
{
 8001432:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001434:	699a      	ldr	r2, [r3, #24]
 8001436:	f042 0201 	orr.w	r2, r2, #1
 800143a:	619a      	str	r2, [r3, #24]
 800143c:	699a      	ldr	r2, [r3, #24]
 800143e:	f002 0201 	and.w	r2, r2, #1
 8001442:	9200      	str	r2, [sp, #0]
 8001444:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001446:	69da      	ldr	r2, [r3, #28]
 8001448:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800144c:	61da      	str	r2, [r3, #28]
 800144e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001450:	4a07      	ldr	r2, [pc, #28]	; (8001470 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001456:	9301      	str	r3, [sp, #4]
 8001458:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800145a:	6853      	ldr	r3, [r2, #4]
 800145c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001460:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001464:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001466:	b002      	add	sp, #8
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	40021000 	.word	0x40021000
 8001470:	40010000 	.word	0x40010000

08001474 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001474:	b510      	push	{r4, lr}
 8001476:	4604      	mov	r4, r0
 8001478:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147a:	2210      	movs	r2, #16
 800147c:	2100      	movs	r1, #0
 800147e:	a802      	add	r0, sp, #8
 8001480:	f000 f8b8 	bl	80015f4 <memset>
  if(hi2c->Instance==I2C1)
 8001484:	6822      	ldr	r2, [r4, #0]
 8001486:	4b11      	ldr	r3, [pc, #68]	; (80014cc <HAL_I2C_MspInit+0x58>)
 8001488:	429a      	cmp	r2, r3
 800148a:	d11c      	bne.n	80014c6 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800148c:	4c10      	ldr	r4, [pc, #64]	; (80014d0 <HAL_I2C_MspInit+0x5c>)
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148e:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001490:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001492:	4810      	ldr	r0, [pc, #64]	; (80014d4 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001494:	f043 0308 	orr.w	r3, r3, #8
 8001498:	61a3      	str	r3, [r4, #24]
 800149a:	69a3      	ldr	r3, [r4, #24]
 800149c:	f003 0308 	and.w	r3, r3, #8
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014a4:	23c0      	movs	r3, #192	; 0xc0
 80014a6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014a8:	2312      	movs	r3, #18
 80014aa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014ac:	2303      	movs	r3, #3
 80014ae:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b0:	f7fe ff02 	bl	80002b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014b4:	69e3      	ldr	r3, [r4, #28]
 80014b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014ba:	61e3      	str	r3, [r4, #28]
 80014bc:	69e3      	ldr	r3, [r4, #28]
 80014be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c2:	9301      	str	r3, [sp, #4]
 80014c4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014c6:	b006      	add	sp, #24
 80014c8:	bd10      	pop	{r4, pc}
 80014ca:	bf00      	nop
 80014cc:	40005400 	.word	0x40005400
 80014d0:	40021000 	.word	0x40021000
 80014d4:	40010c00 	.word	0x40010c00

080014d8 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C1)
 80014d8:	6802      	ldr	r2, [r0, #0]
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <HAL_I2C_MspDeInit+0x1c>)
 80014dc:	429a      	cmp	r2, r3
 80014de:	d108      	bne.n	80014f2 <HAL_I2C_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80014e0:	4a05      	ldr	r2, [pc, #20]	; (80014f8 <HAL_I2C_MspDeInit+0x20>)
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 80014e2:	21c0      	movs	r1, #192	; 0xc0
    __HAL_RCC_I2C1_CLK_DISABLE();
 80014e4:	69d3      	ldr	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 80014e6:	4805      	ldr	r0, [pc, #20]	; (80014fc <HAL_I2C_MspDeInit+0x24>)
    __HAL_RCC_I2C1_CLK_DISABLE();
 80014e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80014ec:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 80014ee:	f7fe bfc5 	b.w	800047c <HAL_GPIO_DeInit>
 80014f2:	4770      	bx	lr
 80014f4:	40005400 	.word	0x40005400
 80014f8:	40021000 	.word	0x40021000
 80014fc:	40010c00 	.word	0x40010c00

08001500 <NMI_Handler>:
 8001500:	4770      	bx	lr

08001502 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001502:	e7fe      	b.n	8001502 <HardFault_Handler>

08001504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001504:	e7fe      	b.n	8001504 <MemManage_Handler>

08001506 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001506:	e7fe      	b.n	8001506 <BusFault_Handler>

08001508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001508:	e7fe      	b.n	8001508 <UsageFault_Handler>

0800150a <SVC_Handler>:
 800150a:	4770      	bx	lr

0800150c <DebugMon_Handler>:
 800150c:	4770      	bx	lr

0800150e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800150e:	4770      	bx	lr

08001510 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001510:	f7fe be52 	b.w	80001b8 <HAL_IncTick>

08001514 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001514:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <SystemInit+0x40>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	f042 0201 	orr.w	r2, r2, #1
 800151c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800151e:	6859      	ldr	r1, [r3, #4]
 8001520:	4a0d      	ldr	r2, [pc, #52]	; (8001558 <SystemInit+0x44>)
 8001522:	400a      	ands	r2, r1
 8001524:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800152c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001530:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001538:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800153a:	685a      	ldr	r2, [r3, #4]
 800153c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001540:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001542:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001546:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001548:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800154c:	4b03      	ldr	r3, [pc, #12]	; (800155c <SystemInit+0x48>)
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	40021000 	.word	0x40021000
 8001558:	f8ff0000 	.word	0xf8ff0000
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001560:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001562:	e003      	b.n	800156c <LoopCopyDataInit>

08001564 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001564:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001566:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001568:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800156a:	3104      	adds	r1, #4

0800156c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800156c:	480a      	ldr	r0, [pc, #40]	; (8001598 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800156e:	4b0b      	ldr	r3, [pc, #44]	; (800159c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001570:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001572:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001574:	d3f6      	bcc.n	8001564 <CopyDataInit>
  ldr r2, =_sbss
 8001576:	4a0a      	ldr	r2, [pc, #40]	; (80015a0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001578:	e002      	b.n	8001580 <LoopFillZerobss>

0800157a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800157a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800157c:	f842 3b04 	str.w	r3, [r2], #4

08001580 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001580:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001582:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001584:	d3f9      	bcc.n	800157a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001586:	f7ff ffc5 	bl	8001514 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800158a:	f000 f80f 	bl	80015ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800158e:	f7ff fe97 	bl	80012c0 <main>
  bx lr
 8001592:	4770      	bx	lr
  ldr r3, =_sidata
 8001594:	08001678 	.word	0x08001678
  ldr r0, =_sdata
 8001598:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800159c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80015a0:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80015a4:	20000084 	.word	0x20000084

080015a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015a8:	e7fe      	b.n	80015a8 <ADC1_2_IRQHandler>
	...

080015ac <__libc_init_array>:
 80015ac:	b570      	push	{r4, r5, r6, lr}
 80015ae:	2500      	movs	r5, #0
 80015b0:	4e0c      	ldr	r6, [pc, #48]	; (80015e4 <__libc_init_array+0x38>)
 80015b2:	4c0d      	ldr	r4, [pc, #52]	; (80015e8 <__libc_init_array+0x3c>)
 80015b4:	1ba4      	subs	r4, r4, r6
 80015b6:	10a4      	asrs	r4, r4, #2
 80015b8:	42a5      	cmp	r5, r4
 80015ba:	d109      	bne.n	80015d0 <__libc_init_array+0x24>
 80015bc:	f000 f82a 	bl	8001614 <_init>
 80015c0:	2500      	movs	r5, #0
 80015c2:	4e0a      	ldr	r6, [pc, #40]	; (80015ec <__libc_init_array+0x40>)
 80015c4:	4c0a      	ldr	r4, [pc, #40]	; (80015f0 <__libc_init_array+0x44>)
 80015c6:	1ba4      	subs	r4, r4, r6
 80015c8:	10a4      	asrs	r4, r4, #2
 80015ca:	42a5      	cmp	r5, r4
 80015cc:	d105      	bne.n	80015da <__libc_init_array+0x2e>
 80015ce:	bd70      	pop	{r4, r5, r6, pc}
 80015d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80015d4:	4798      	blx	r3
 80015d6:	3501      	adds	r5, #1
 80015d8:	e7ee      	b.n	80015b8 <__libc_init_array+0xc>
 80015da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80015de:	4798      	blx	r3
 80015e0:	3501      	adds	r5, #1
 80015e2:	e7f2      	b.n	80015ca <__libc_init_array+0x1e>
 80015e4:	08001670 	.word	0x08001670
 80015e8:	08001670 	.word	0x08001670
 80015ec:	08001670 	.word	0x08001670
 80015f0:	08001674 	.word	0x08001674

080015f4 <memset>:
 80015f4:	4603      	mov	r3, r0
 80015f6:	4402      	add	r2, r0
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d100      	bne.n	80015fe <memset+0xa>
 80015fc:	4770      	bx	lr
 80015fe:	f803 1b01 	strb.w	r1, [r3], #1
 8001602:	e7f9      	b.n	80015f8 <memset+0x4>

08001604 <strcpy>:
 8001604:	4603      	mov	r3, r0
 8001606:	f811 2b01 	ldrb.w	r2, [r1], #1
 800160a:	f803 2b01 	strb.w	r2, [r3], #1
 800160e:	2a00      	cmp	r2, #0
 8001610:	d1f9      	bne.n	8001606 <strcpy+0x2>
 8001612:	4770      	bx	lr

08001614 <_init>:
 8001614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001616:	bf00      	nop
 8001618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800161a:	bc08      	pop	{r3}
 800161c:	469e      	mov	lr, r3
 800161e:	4770      	bx	lr

08001620 <_fini>:
 8001620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001622:	bf00      	nop
 8001624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001626:	bc08      	pop	{r3}
 8001628:	469e      	mov	lr, r3
 800162a:	4770      	bx	lr
