
DS3231_RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a2c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  08004b40  08004b40  00014b40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004fb8  08004fb8  00014fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004fbc  08004fbc  00014fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001dc  20000000  08004fc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000cc  200001dc  0800519c  000201dc  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200002a8  0800519c  000202a8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d17d  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001e67  00000000  00000000  0002d382  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005b09  00000000  00000000  0002f1e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000820  00000000  00000000  00034cf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ce8  00000000  00000000  00035518  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004f91  00000000  00000000  00036200  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002e5e  00000000  00000000  0003b191  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003dfef  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000021d8  00000000  00000000  0003e06c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08004b24 	.word	0x08004b24

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08004b24 	.word	0x08004b24

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	bf14      	ite	ne
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e720      	b.n	80002a4 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_ul2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f04f 0500 	mov.w	r5, #0
 8000472:	e00a      	b.n	800048a <__aeabi_l2d+0x16>

08000474 <__aeabi_l2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000482:	d502      	bpl.n	800048a <__aeabi_l2d+0x16>
 8000484:	4240      	negs	r0, r0
 8000486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000496:	f43f aedc 	beq.w	8000252 <__adddf3+0xe6>
 800049a:	f04f 0203 	mov.w	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ba:	fa20 f002 	lsr.w	r0, r0, r2
 80004be:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c2:	ea40 000e 	orr.w	r0, r0, lr
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	4414      	add	r4, r2
 80004cc:	e6c1      	b.n	8000252 <__adddf3+0xe6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_dmul>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004de:	bf1d      	ittte	ne
 80004e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e4:	ea94 0f0c 	teqne	r4, ip
 80004e8:	ea95 0f0c 	teqne	r5, ip
 80004ec:	f000 f8de 	bleq	80006ac <__aeabi_dmul+0x1dc>
 80004f0:	442c      	add	r4, r5
 80004f2:	ea81 0603 	eor.w	r6, r1, r3
 80004f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000502:	bf18      	it	ne
 8000504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000510:	d038      	beq.n	8000584 <__aeabi_dmul+0xb4>
 8000512:	fba0 ce02 	umull	ip, lr, r0, r2
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800051e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000522:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000526:	f04f 0600 	mov.w	r6, #0
 800052a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800052e:	f09c 0f00 	teq	ip, #0
 8000532:	bf18      	it	ne
 8000534:	f04e 0e01 	orrne.w	lr, lr, #1
 8000538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800053c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000544:	d204      	bcs.n	8000550 <__aeabi_dmul+0x80>
 8000546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054a:	416d      	adcs	r5, r5
 800054c:	eb46 0606 	adc.w	r6, r6, r6
 8000550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800055c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000568:	bf88      	it	hi
 800056a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800056e:	d81e      	bhi.n	80005ae <__aeabi_dmul+0xde>
 8000570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000588:	ea46 0101 	orr.w	r1, r6, r1
 800058c:	ea40 0002 	orr.w	r0, r0, r2
 8000590:	ea81 0103 	eor.w	r1, r1, r3
 8000594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000598:	bfc2      	ittt	gt
 800059a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800059e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	popgt	{r4, r5, r6, pc}
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f04f 0e00 	mov.w	lr, #0
 80005ac:	3c01      	subs	r4, #1
 80005ae:	f300 80ab 	bgt.w	8000708 <__aeabi_dmul+0x238>
 80005b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005b6:	bfde      	ittt	le
 80005b8:	2000      	movle	r0, #0
 80005ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005be:	bd70      	pople	{r4, r5, r6, pc}
 80005c0:	f1c4 0400 	rsb	r4, r4, #0
 80005c4:	3c20      	subs	r4, #32
 80005c6:	da35      	bge.n	8000634 <__aeabi_dmul+0x164>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc1b      	bgt.n	8000604 <__aeabi_dmul+0x134>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0520 	rsb	r5, r4, #32
 80005d4:	fa00 f305 	lsl.w	r3, r0, r5
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f205 	lsl.w	r2, r1, r5
 80005e0:	ea40 0002 	orr.w	r0, r0, r2
 80005e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f0:	fa21 f604 	lsr.w	r6, r1, r4
 80005f4:	eb42 0106 	adc.w	r1, r2, r6
 80005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005fc:	bf08      	it	eq
 80005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f1c4 040c 	rsb	r4, r4, #12
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f304 	lsl.w	r3, r0, r4
 8000610:	fa20 f005 	lsr.w	r0, r0, r5
 8000614:	fa01 f204 	lsl.w	r2, r1, r4
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000624:	f141 0100 	adc.w	r1, r1, #0
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f205 	lsl.w	r2, r0, r5
 800063c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000640:	fa20 f304 	lsr.w	r3, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea43 0302 	orr.w	r3, r3, r2
 800064c:	fa21 f004 	lsr.w	r0, r1, r4
 8000650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000654:	fa21 f204 	lsr.w	r2, r1, r4
 8000658:	ea20 0002 	bic.w	r0, r0, r2
 800065c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f094 0f00 	teq	r4, #0
 8000670:	d10f      	bne.n	8000692 <__aeabi_dmul+0x1c2>
 8000672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000676:	0040      	lsls	r0, r0, #1
 8000678:	eb41 0101 	adc.w	r1, r1, r1
 800067c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000680:	bf08      	it	eq
 8000682:	3c01      	subeq	r4, #1
 8000684:	d0f7      	beq.n	8000676 <__aeabi_dmul+0x1a6>
 8000686:	ea41 0106 	orr.w	r1, r1, r6
 800068a:	f095 0f00 	teq	r5, #0
 800068e:	bf18      	it	ne
 8000690:	4770      	bxne	lr
 8000692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000696:	0052      	lsls	r2, r2, #1
 8000698:	eb43 0303 	adc.w	r3, r3, r3
 800069c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3d01      	subeq	r5, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1c6>
 80006a6:	ea43 0306 	orr.w	r3, r3, r6
 80006aa:	4770      	bx	lr
 80006ac:	ea94 0f0c 	teq	r4, ip
 80006b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b4:	bf18      	it	ne
 80006b6:	ea95 0f0c 	teqne	r5, ip
 80006ba:	d00c      	beq.n	80006d6 <__aeabi_dmul+0x206>
 80006bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c0:	bf18      	it	ne
 80006c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006c6:	d1d1      	bne.n	800066c <__aeabi_dmul+0x19c>
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
 80006d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006da:	bf06      	itte	eq
 80006dc:	4610      	moveq	r0, r2
 80006de:	4619      	moveq	r1, r3
 80006e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e4:	d019      	beq.n	800071a <__aeabi_dmul+0x24a>
 80006e6:	ea94 0f0c 	teq	r4, ip
 80006ea:	d102      	bne.n	80006f2 <__aeabi_dmul+0x222>
 80006ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f0:	d113      	bne.n	800071a <__aeabi_dmul+0x24a>
 80006f2:	ea95 0f0c 	teq	r5, ip
 80006f6:	d105      	bne.n	8000704 <__aeabi_dmul+0x234>
 80006f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006fc:	bf1c      	itt	ne
 80006fe:	4610      	movne	r0, r2
 8000700:	4619      	movne	r1, r3
 8000702:	d10a      	bne.n	800071a <__aeabi_dmul+0x24a>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000722:	bd70      	pop	{r4, r5, r6, pc}

08000724 <__aeabi_ddiv>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000732:	bf1d      	ittte	ne
 8000734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000738:	ea94 0f0c 	teqne	r4, ip
 800073c:	ea95 0f0c 	teqne	r5, ip
 8000740:	f000 f8a7 	bleq	8000892 <__aeabi_ddiv+0x16e>
 8000744:	eba4 0405 	sub.w	r4, r4, r5
 8000748:	ea81 0e03 	eor.w	lr, r1, r3
 800074c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000750:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000754:	f000 8088 	beq.w	8000868 <__aeabi_ddiv+0x144>
 8000758:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800075c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000768:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800076c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000774:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800077c:	429d      	cmp	r5, r3
 800077e:	bf08      	it	eq
 8000780:	4296      	cmpeq	r6, r2
 8000782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000786:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078a:	d202      	bcs.n	8000792 <__aeabi_ddiv+0x6e>
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	1ab6      	subs	r6, r6, r2
 8000794:	eb65 0503 	sbc.w	r5, r5, r3
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000800:	ea55 0e06 	orrs.w	lr, r5, r6
 8000804:	d018      	beq.n	8000838 <__aeabi_ddiv+0x114>
 8000806:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800080e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800081e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000822:	d1c0      	bne.n	80007a6 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	d10b      	bne.n	8000842 <__aeabi_ddiv+0x11e>
 800082a:	ea41 0100 	orr.w	r1, r1, r0
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000836:	e7b6      	b.n	80007a6 <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	bf04      	itt	eq
 800083e:	4301      	orreq	r1, r0
 8000840:	2000      	moveq	r0, #0
 8000842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000846:	bf88      	it	hi
 8000848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800084c:	f63f aeaf 	bhi.w	80005ae <__aeabi_dmul+0xde>
 8000850:	ebb5 0c03 	subs.w	ip, r5, r3
 8000854:	bf04      	itt	eq
 8000856:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085e:	f150 0000 	adcs.w	r0, r0, #0
 8000862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800086c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000874:	bfc2      	ittt	gt
 8000876:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800087e:	bd70      	popgt	{r4, r5, r6, pc}
 8000880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000884:	f04f 0e00 	mov.w	lr, #0
 8000888:	3c01      	subs	r4, #1
 800088a:	e690      	b.n	80005ae <__aeabi_dmul+0xde>
 800088c:	ea45 0e06 	orr.w	lr, r5, r6
 8000890:	e68d      	b.n	80005ae <__aeabi_dmul+0xde>
 8000892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000896:	ea94 0f0c 	teq	r4, ip
 800089a:	bf08      	it	eq
 800089c:	ea95 0f0c 	teqeq	r5, ip
 80008a0:	f43f af3b 	beq.w	800071a <__aeabi_dmul+0x24a>
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	d10a      	bne.n	80008c0 <__aeabi_ddiv+0x19c>
 80008aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ae:	f47f af34 	bne.w	800071a <__aeabi_dmul+0x24a>
 80008b2:	ea95 0f0c 	teq	r5, ip
 80008b6:	f47f af25 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e72c      	b.n	800071a <__aeabi_dmul+0x24a>
 80008c0:	ea95 0f0c 	teq	r5, ip
 80008c4:	d106      	bne.n	80008d4 <__aeabi_ddiv+0x1b0>
 80008c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ca:	f43f aefd 	beq.w	80006c8 <__aeabi_dmul+0x1f8>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e722      	b.n	800071a <__aeabi_dmul+0x24a>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	f47f aec5 	bne.w	800066c <__aeabi_dmul+0x19c>
 80008e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008e6:	f47f af0d 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008ee:	f47f aeeb 	bne.w	80006c8 <__aeabi_dmul+0x1f8>
 80008f2:	e712      	b.n	800071a <__aeabi_dmul+0x24a>

080008f4 <__gedf2>:
 80008f4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f8:	e006      	b.n	8000908 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__ledf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	e002      	b.n	8000908 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__cmpdf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	f84d cd04 	str.w	ip, [sp, #-4]!
 800090c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800091e:	d01b      	beq.n	8000958 <__cmpdf2+0x54>
 8000920:	b001      	add	sp, #4
 8000922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000926:	bf0c      	ite	eq
 8000928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800092c:	ea91 0f03 	teqne	r1, r3
 8000930:	bf02      	ittt	eq
 8000932:	ea90 0f02 	teqeq	r0, r2
 8000936:	2000      	moveq	r0, #0
 8000938:	4770      	bxeq	lr
 800093a:	f110 0f00 	cmn.w	r0, #0
 800093e:	ea91 0f03 	teq	r1, r3
 8000942:	bf58      	it	pl
 8000944:	4299      	cmppl	r1, r3
 8000946:	bf08      	it	eq
 8000948:	4290      	cmpeq	r0, r2
 800094a:	bf2c      	ite	cs
 800094c:	17d8      	asrcs	r0, r3, #31
 800094e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000952:	f040 0001 	orr.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d102      	bne.n	8000968 <__cmpdf2+0x64>
 8000962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000966:	d107      	bne.n	8000978 <__cmpdf2+0x74>
 8000968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800096c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000970:	d1d6      	bne.n	8000920 <__cmpdf2+0x1c>
 8000972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000976:	d0d3      	beq.n	8000920 <__cmpdf2+0x1c>
 8000978:	f85d 0b04 	ldr.w	r0, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <__aeabi_cdrcmple>:
 8000980:	4684      	mov	ip, r0
 8000982:	4610      	mov	r0, r2
 8000984:	4662      	mov	r2, ip
 8000986:	468c      	mov	ip, r1
 8000988:	4619      	mov	r1, r3
 800098a:	4663      	mov	r3, ip
 800098c:	e000      	b.n	8000990 <__aeabi_cdcmpeq>
 800098e:	bf00      	nop

08000990 <__aeabi_cdcmpeq>:
 8000990:	b501      	push	{r0, lr}
 8000992:	f7ff ffb7 	bl	8000904 <__cmpdf2>
 8000996:	2800      	cmp	r0, #0
 8000998:	bf48      	it	mi
 800099a:	f110 0f00 	cmnmi.w	r0, #0
 800099e:	bd01      	pop	{r0, pc}

080009a0 <__aeabi_dcmpeq>:
 80009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a4:	f7ff fff4 	bl	8000990 <__aeabi_cdcmpeq>
 80009a8:	bf0c      	ite	eq
 80009aa:	2001      	moveq	r0, #1
 80009ac:	2000      	movne	r0, #0
 80009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b2:	bf00      	nop

080009b4 <__aeabi_dcmplt>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff ffea 	bl	8000990 <__aeabi_cdcmpeq>
 80009bc:	bf34      	ite	cc
 80009be:	2001      	movcc	r0, #1
 80009c0:	2000      	movcs	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmple>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffe0 	bl	8000990 <__aeabi_cdcmpeq>
 80009d0:	bf94      	ite	ls
 80009d2:	2001      	movls	r0, #1
 80009d4:	2000      	movhi	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmpge>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffce 	bl	8000980 <__aeabi_cdrcmple>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpgt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffc4 	bl	8000980 <__aeabi_cdrcmple>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpun>:
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_dcmpun+0x10>
 8000a0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a12:	d10a      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a1c:	d102      	bne.n	8000a24 <__aeabi_dcmpun+0x20>
 8000a1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a22:	d102      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	f04f 0001 	mov.w	r0, #1
 8000a2e:	4770      	bx	lr

08000a30 <__aeabi_d2iz>:
 8000a30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a38:	d215      	bcs.n	8000a66 <__aeabi_d2iz+0x36>
 8000a3a:	d511      	bpl.n	8000a60 <__aeabi_d2iz+0x30>
 8000a3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a44:	d912      	bls.n	8000a6c <__aeabi_d2iz+0x3c>
 8000a46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a56:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5a:	bf18      	it	ne
 8000a5c:	4240      	negne	r0, r0
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d105      	bne.n	8000a78 <__aeabi_d2iz+0x48>
 8000a6c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a70:	bf08      	it	eq
 8000a72:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop

08000a80 <__aeabi_d2f>:
 8000a80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a88:	bf24      	itt	cs
 8000a8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a92:	d90d      	bls.n	8000ab0 <__aeabi_d2f+0x30>
 8000a94:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa8:	bf08      	it	eq
 8000aaa:	f020 0001 	biceq.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab4:	d121      	bne.n	8000afa <__aeabi_d2f+0x7a>
 8000ab6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aba:	bfbc      	itt	lt
 8000abc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac0:	4770      	bxlt	lr
 8000ac2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ac6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aca:	f1c2 0218 	rsb	r2, r2, #24
 8000ace:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad6:	fa20 f002 	lsr.w	r0, r0, r2
 8000ada:	bf18      	it	ne
 8000adc:	f040 0001 	orrne.w	r0, r0, #1
 8000ae0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aec:	ea40 000c 	orr.w	r0, r0, ip
 8000af0:	fa23 f302 	lsr.w	r3, r3, r2
 8000af4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af8:	e7cc      	b.n	8000a94 <__aeabi_d2f+0x14>
 8000afa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afe:	d107      	bne.n	8000b10 <__aeabi_d2f+0x90>
 8000b00:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b04:	bf1e      	ittt	ne
 8000b06:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b0e:	4770      	bxne	lr
 8000b10:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop

08000b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b20:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <HAL_InitTick+0x3c>)
{
 8000b24:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b26:	7818      	ldrb	r0, [r3, #0]
 8000b28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b2c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000b30:	4a0b      	ldr	r2, [pc, #44]	; (8000b60 <HAL_InitTick+0x40>)
 8000b32:	6810      	ldr	r0, [r2, #0]
 8000b34:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b38:	f000 f8a0 	bl	8000c7c <HAL_SYSTICK_Config>
 8000b3c:	4604      	mov	r4, r0
 8000b3e:	b958      	cbnz	r0, 8000b58 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b40:	2d0f      	cmp	r5, #15
 8000b42:	d809      	bhi.n	8000b58 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b44:	4602      	mov	r2, r0
 8000b46:	4629      	mov	r1, r5
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b4c:	f000 f854 	bl	8000bf8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b50:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <HAL_InitTick+0x44>)
 8000b52:	4620      	mov	r0, r4
 8000b54:	601d      	str	r5, [r3, #0]
 8000b56:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000b58:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000b5a:	bd38      	pop	{r3, r4, r5, pc}
 8000b5c:	20000000 	.word	0x20000000
 8000b60:	20000008 	.word	0x20000008
 8000b64:	20000004 	.word	0x20000004

08000b68 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b68:	4a07      	ldr	r2, [pc, #28]	; (8000b88 <HAL_Init+0x20>)
{
 8000b6a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b6c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b6e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b70:	f043 0310 	orr.w	r3, r3, #16
 8000b74:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b76:	f000 f82d 	bl	8000bd4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f7ff ffd0 	bl	8000b20 <HAL_InitTick>
  HAL_MspInit();
 8000b80:	f001 fe18 	bl	80027b4 <HAL_MspInit>
}
 8000b84:	2000      	movs	r0, #0
 8000b86:	bd08      	pop	{r3, pc}
 8000b88:	40022000 	.word	0x40022000

08000b8c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000b8c:	4a03      	ldr	r2, [pc, #12]	; (8000b9c <HAL_IncTick+0x10>)
 8000b8e:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <HAL_IncTick+0x14>)
 8000b90:	6811      	ldr	r1, [r2, #0]
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	440b      	add	r3, r1
 8000b96:	6013      	str	r3, [r2, #0]
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	2000020c 	.word	0x2000020c
 8000ba0:	20000000 	.word	0x20000000

08000ba4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ba4:	4b01      	ldr	r3, [pc, #4]	; (8000bac <HAL_GetTick+0x8>)
 8000ba6:	6818      	ldr	r0, [r3, #0]
}
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	2000020c 	.word	0x2000020c

08000bb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bb0:	b538      	push	{r3, r4, r5, lr}
 8000bb2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000bb4:	f7ff fff6 	bl	8000ba4 <HAL_GetTick>
 8000bb8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bba:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000bbc:	bf1e      	ittt	ne
 8000bbe:	4b04      	ldrne	r3, [pc, #16]	; (8000bd0 <HAL_Delay+0x20>)
 8000bc0:	781b      	ldrbne	r3, [r3, #0]
 8000bc2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bc4:	f7ff ffee 	bl	8000ba4 <HAL_GetTick>
 8000bc8:	1b40      	subs	r0, r0, r5
 8000bca:	4284      	cmp	r4, r0
 8000bcc:	d8fa      	bhi.n	8000bc4 <HAL_Delay+0x14>
  {
  }
}
 8000bce:	bd38      	pop	{r3, r4, r5, pc}
 8000bd0:	20000000 	.word	0x20000000

08000bd4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd4:	4a07      	ldr	r2, [pc, #28]	; (8000bf4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bd6:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd8:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bda:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bde:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000be2:	041b      	lsls	r3, r3, #16
 8000be4:	0c1b      	lsrs	r3, r3, #16
 8000be6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000bee:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000bf0:	60d3      	str	r3, [r2, #12]
 8000bf2:	4770      	bx	lr
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf8:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bfa:	b530      	push	{r4, r5, lr}
 8000bfc:	68dc      	ldr	r4, [r3, #12]
 8000bfe:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c02:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c06:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c08:	2b04      	cmp	r3, #4
 8000c0a:	bf28      	it	cs
 8000c0c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c10:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c14:	bf98      	it	ls
 8000c16:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c18:	fa05 f303 	lsl.w	r3, r5, r3
 8000c1c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c20:	bf88      	it	hi
 8000c22:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c24:	4019      	ands	r1, r3
 8000c26:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c28:	fa05 f404 	lsl.w	r4, r5, r4
 8000c2c:	3c01      	subs	r4, #1
 8000c2e:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000c30:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c32:	ea42 0201 	orr.w	r2, r2, r1
 8000c36:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3a:	bfa9      	itett	ge
 8000c3c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c40:	4b06      	ldrlt	r3, [pc, #24]	; (8000c5c <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c42:	b2d2      	uxtbge	r2, r2
 8000c44:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c48:	bfbb      	ittet	lt
 8000c4a:	f000 000f 	andlt.w	r0, r0, #15
 8000c4e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c50:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c54:	541a      	strblt	r2, [r3, r0]
 8000c56:	bd30      	pop	{r4, r5, pc}
 8000c58:	e000ed00 	.word	0xe000ed00
 8000c5c:	e000ed14 	.word	0xe000ed14

08000c60 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000c60:	2800      	cmp	r0, #0
 8000c62:	db08      	blt.n	8000c76 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c64:	2301      	movs	r3, #1
 8000c66:	0942      	lsrs	r2, r0, #5
 8000c68:	f000 001f 	and.w	r0, r0, #31
 8000c6c:	fa03 f000 	lsl.w	r0, r3, r0
 8000c70:	4b01      	ldr	r3, [pc, #4]	; (8000c78 <HAL_NVIC_EnableIRQ+0x18>)
 8000c72:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000c76:	4770      	bx	lr
 8000c78:	e000e100 	.word	0xe000e100

08000c7c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c7c:	3801      	subs	r0, #1
 8000c7e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c82:	d20a      	bcs.n	8000c9a <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c84:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c86:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c88:	4a06      	ldr	r2, [pc, #24]	; (8000ca4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c8a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c90:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c92:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c94:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c9a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000e010 	.word	0xe000e010
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cac:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8000cae:	4626      	mov	r6, r4
 8000cb0:	4b66      	ldr	r3, [pc, #408]	; (8000e4c <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cb2:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8000e5c <HAL_GPIO_Init+0x1b4>
 8000cb6:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8000e60 <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cba:	680a      	ldr	r2, [r1, #0]
 8000cbc:	fa32 f506 	lsrs.w	r5, r2, r6
 8000cc0:	d102      	bne.n	8000cc8 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8000cc2:	b003      	add	sp, #12
 8000cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000cc8:	f04f 0801 	mov.w	r8, #1
 8000ccc:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cd0:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8000cd4:	4590      	cmp	r8, r2
 8000cd6:	d17f      	bne.n	8000dd8 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 8000cd8:	684d      	ldr	r5, [r1, #4]
 8000cda:	2d12      	cmp	r5, #18
 8000cdc:	f000 80aa 	beq.w	8000e34 <HAL_GPIO_Init+0x18c>
 8000ce0:	f200 8083 	bhi.w	8000dea <HAL_GPIO_Init+0x142>
 8000ce4:	2d02      	cmp	r5, #2
 8000ce6:	f000 80a2 	beq.w	8000e2e <HAL_GPIO_Init+0x186>
 8000cea:	d877      	bhi.n	8000ddc <HAL_GPIO_Init+0x134>
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	f000 8089 	beq.w	8000e04 <HAL_GPIO_Init+0x15c>
 8000cf2:	2d01      	cmp	r5, #1
 8000cf4:	f000 8099 	beq.w	8000e2a <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cf8:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cfc:	2aff      	cmp	r2, #255	; 0xff
 8000cfe:	bf93      	iteet	ls
 8000d00:	4682      	movls	sl, r0
 8000d02:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000d06:	3d08      	subhi	r5, #8
 8000d08:	f8d0 b000 	ldrls.w	fp, [r0]
 8000d0c:	bf92      	itee	ls
 8000d0e:	00b5      	lslls	r5, r6, #2
 8000d10:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000d14:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d16:	fa09 f805 	lsl.w	r8, r9, r5
 8000d1a:	ea2b 0808 	bic.w	r8, fp, r8
 8000d1e:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d22:	bf88      	it	hi
 8000d24:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d28:	ea48 0505 	orr.w	r5, r8, r5
 8000d2c:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d30:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000d34:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000d38:	d04e      	beq.n	8000dd8 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d3a:	4d45      	ldr	r5, [pc, #276]	; (8000e50 <HAL_GPIO_Init+0x1a8>)
 8000d3c:	4f44      	ldr	r7, [pc, #272]	; (8000e50 <HAL_GPIO_Init+0x1a8>)
 8000d3e:	69ad      	ldr	r5, [r5, #24]
 8000d40:	f026 0803 	bic.w	r8, r6, #3
 8000d44:	f045 0501 	orr.w	r5, r5, #1
 8000d48:	61bd      	str	r5, [r7, #24]
 8000d4a:	69bd      	ldr	r5, [r7, #24]
 8000d4c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000d50:	f005 0501 	and.w	r5, r5, #1
 8000d54:	9501      	str	r5, [sp, #4]
 8000d56:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d5a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d5e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d60:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000d64:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d68:	fa09 f90b 	lsl.w	r9, r9, fp
 8000d6c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d70:	4d38      	ldr	r5, [pc, #224]	; (8000e54 <HAL_GPIO_Init+0x1ac>)
 8000d72:	42a8      	cmp	r0, r5
 8000d74:	d063      	beq.n	8000e3e <HAL_GPIO_Init+0x196>
 8000d76:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d7a:	42a8      	cmp	r0, r5
 8000d7c:	d061      	beq.n	8000e42 <HAL_GPIO_Init+0x19a>
 8000d7e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d82:	42a8      	cmp	r0, r5
 8000d84:	d05f      	beq.n	8000e46 <HAL_GPIO_Init+0x19e>
 8000d86:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d8a:	42a8      	cmp	r0, r5
 8000d8c:	bf0c      	ite	eq
 8000d8e:	2503      	moveq	r5, #3
 8000d90:	2504      	movne	r5, #4
 8000d92:	fa05 f50b 	lsl.w	r5, r5, fp
 8000d96:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000d9a:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8000d9e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000da0:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000da4:	bf14      	ite	ne
 8000da6:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000da8:	4395      	biceq	r5, r2
 8000daa:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000dac:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dae:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000db2:	bf14      	ite	ne
 8000db4:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000db6:	4395      	biceq	r5, r2
 8000db8:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000dba:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dbc:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000dc0:	bf14      	ite	ne
 8000dc2:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000dc4:	4395      	biceq	r5, r2
 8000dc6:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000dc8:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dca:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000dce:	bf14      	ite	ne
 8000dd0:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000dd2:	ea25 0202 	biceq.w	r2, r5, r2
 8000dd6:	60da      	str	r2, [r3, #12]
	position++;
 8000dd8:	3601      	adds	r6, #1
 8000dda:	e76e      	b.n	8000cba <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8000ddc:	2d03      	cmp	r5, #3
 8000dde:	d022      	beq.n	8000e26 <HAL_GPIO_Init+0x17e>
 8000de0:	2d11      	cmp	r5, #17
 8000de2:	d189      	bne.n	8000cf8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000de4:	68cc      	ldr	r4, [r1, #12]
 8000de6:	3404      	adds	r4, #4
          break;
 8000de8:	e786      	b.n	8000cf8 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000dea:	4f1b      	ldr	r7, [pc, #108]	; (8000e58 <HAL_GPIO_Init+0x1b0>)
 8000dec:	42bd      	cmp	r5, r7
 8000dee:	d009      	beq.n	8000e04 <HAL_GPIO_Init+0x15c>
 8000df0:	d812      	bhi.n	8000e18 <HAL_GPIO_Init+0x170>
 8000df2:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8000e64 <HAL_GPIO_Init+0x1bc>
 8000df6:	454d      	cmp	r5, r9
 8000df8:	d004      	beq.n	8000e04 <HAL_GPIO_Init+0x15c>
 8000dfa:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000dfe:	454d      	cmp	r5, r9
 8000e00:	f47f af7a 	bne.w	8000cf8 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e04:	688c      	ldr	r4, [r1, #8]
 8000e06:	b1c4      	cbz	r4, 8000e3a <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e08:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8000e0a:	bf0c      	ite	eq
 8000e0c:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000e10:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e14:	2408      	movs	r4, #8
 8000e16:	e76f      	b.n	8000cf8 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000e18:	4575      	cmp	r5, lr
 8000e1a:	d0f3      	beq.n	8000e04 <HAL_GPIO_Init+0x15c>
 8000e1c:	4565      	cmp	r5, ip
 8000e1e:	d0f1      	beq.n	8000e04 <HAL_GPIO_Init+0x15c>
 8000e20:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000e68 <HAL_GPIO_Init+0x1c0>
 8000e24:	e7eb      	b.n	8000dfe <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e26:	2400      	movs	r4, #0
 8000e28:	e766      	b.n	8000cf8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e2a:	68cc      	ldr	r4, [r1, #12]
          break;
 8000e2c:	e764      	b.n	8000cf8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e2e:	68cc      	ldr	r4, [r1, #12]
 8000e30:	3408      	adds	r4, #8
          break;
 8000e32:	e761      	b.n	8000cf8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e34:	68cc      	ldr	r4, [r1, #12]
 8000e36:	340c      	adds	r4, #12
          break;
 8000e38:	e75e      	b.n	8000cf8 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e3a:	2404      	movs	r4, #4
 8000e3c:	e75c      	b.n	8000cf8 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e3e:	2500      	movs	r5, #0
 8000e40:	e7a7      	b.n	8000d92 <HAL_GPIO_Init+0xea>
 8000e42:	2501      	movs	r5, #1
 8000e44:	e7a5      	b.n	8000d92 <HAL_GPIO_Init+0xea>
 8000e46:	2502      	movs	r5, #2
 8000e48:	e7a3      	b.n	8000d92 <HAL_GPIO_Init+0xea>
 8000e4a:	bf00      	nop
 8000e4c:	40010400 	.word	0x40010400
 8000e50:	40021000 	.word	0x40021000
 8000e54:	40010800 	.word	0x40010800
 8000e58:	10210000 	.word	0x10210000
 8000e5c:	10310000 	.word	0x10310000
 8000e60:	10320000 	.word	0x10320000
 8000e64:	10110000 	.word	0x10110000
 8000e68:	10220000 	.word	0x10220000

08000e6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e6c:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e6e:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000e70:	6959      	ldr	r1, [r3, #20]
 8000e72:	4201      	tst	r1, r0
 8000e74:	d002      	beq.n	8000e7c <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e76:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e78:	f001 fb88 	bl	800258c <HAL_GPIO_EXTI_Callback>
 8000e7c:	bd08      	pop	{r3, pc}
 8000e7e:	bf00      	nop
 8000e80:	40010400 	.word	0x40010400

08000e84 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000e84:	6801      	ldr	r1, [r0, #0]
 8000e86:	2200      	movs	r2, #0
 8000e88:	694b      	ldr	r3, [r1, #20]
 8000e8a:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8000e8e:	d010      	beq.n	8000eb2 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000e90:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000e94:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8000e96:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8000e98:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8000e9a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000e9e:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000ea2:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000ea4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000ea8:	f043 0304 	orr.w	r3, r3, #4
 8000eac:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8000eae:	2001      	movs	r0, #1
 8000eb0:	4770      	bx	lr
  }
  return HAL_OK;
 8000eb2:	4618      	mov	r0, r3
}
 8000eb4:	4770      	bx	lr

08000eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8000eb6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000eba:	4604      	mov	r4, r0
 8000ebc:	4617      	mov	r7, r2
 8000ebe:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000ec0:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8000ec4:	b28e      	uxth	r6, r1
 8000ec6:	6825      	ldr	r5, [r4, #0]
 8000ec8:	f1b8 0f01 	cmp.w	r8, #1
 8000ecc:	bf0c      	ite	eq
 8000ece:	696b      	ldreq	r3, [r5, #20]
 8000ed0:	69ab      	ldrne	r3, [r5, #24]
 8000ed2:	ea36 0303 	bics.w	r3, r6, r3
 8000ed6:	bf14      	ite	ne
 8000ed8:	2001      	movne	r0, #1
 8000eda:	2000      	moveq	r0, #0
 8000edc:	b908      	cbnz	r0, 8000ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8000ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000ee2:	696b      	ldr	r3, [r5, #20]
 8000ee4:	055a      	lsls	r2, r3, #21
 8000ee6:	d516      	bpl.n	8000f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000ee8:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8000eea:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000eec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ef0:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000ef2:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000ef6:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000efc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000f00:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000f04:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000f06:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000f0a:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000f0c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8000f10:	2001      	movs	r0, #1
 8000f12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000f16:	1c7b      	adds	r3, r7, #1
 8000f18:	d0d5      	beq.n	8000ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000f1a:	f7ff fe43 	bl	8000ba4 <HAL_GetTick>
 8000f1e:	eba0 0009 	sub.w	r0, r0, r9
 8000f22:	4287      	cmp	r7, r0
 8000f24:	d301      	bcc.n	8000f2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
 8000f26:	2f00      	cmp	r7, #0
 8000f28:	d1cd      	bne.n	8000ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000f2a:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8000f2c:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000f2e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8000f30:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000f34:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000f38:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000f3a:	f042 0220 	orr.w	r2, r2, #32
 8000f3e:	e7e4      	b.n	8000f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x54>

08000f40 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8000f40:	b570      	push	{r4, r5, r6, lr}
 8000f42:	4604      	mov	r4, r0
 8000f44:	460d      	mov	r5, r1
 8000f46:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000f48:	6823      	ldr	r3, [r4, #0]
 8000f4a:	695b      	ldr	r3, [r3, #20]
 8000f4c:	075b      	lsls	r3, r3, #29
 8000f4e:	d501      	bpl.n	8000f54 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8000f50:	2000      	movs	r0, #0
 8000f52:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000f54:	4620      	mov	r0, r4
 8000f56:	f7ff ff95 	bl	8000e84 <I2C_IsAcknowledgeFailed>
 8000f5a:	b9a8      	cbnz	r0, 8000f88 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8000f5c:	1c6a      	adds	r2, r5, #1
 8000f5e:	d0f3      	beq.n	8000f48 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000f60:	f7ff fe20 	bl	8000ba4 <HAL_GetTick>
 8000f64:	1b80      	subs	r0, r0, r6
 8000f66:	4285      	cmp	r5, r0
 8000f68:	d301      	bcc.n	8000f6e <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8000f6a:	2d00      	cmp	r5, #0
 8000f6c:	d1ec      	bne.n	8000f48 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000f6e:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8000f70:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000f72:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000f74:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000f78:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000f7c:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000f7e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000f82:	f042 0220 	orr.w	r2, r2, #32
 8000f86:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000f88:	2001      	movs	r0, #1
}
 8000f8a:	bd70      	pop	{r4, r5, r6, pc}

08000f8c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8000f8c:	b570      	push	{r4, r5, r6, lr}
 8000f8e:	4604      	mov	r4, r0
 8000f90:	460d      	mov	r5, r1
 8000f92:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000f94:	6820      	ldr	r0, [r4, #0]
 8000f96:	6943      	ldr	r3, [r0, #20]
 8000f98:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8000f9c:	d001      	beq.n	8000fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8000f9e:	2000      	movs	r0, #0
}
 8000fa0:	bd70      	pop	{r4, r5, r6, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000fa2:	6942      	ldr	r2, [r0, #20]
 8000fa4:	06d2      	lsls	r2, r2, #27
 8000fa6:	d50e      	bpl.n	8000fc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000fa8:	f06f 0210 	mvn.w	r2, #16
 8000fac:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8000fae:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000fb0:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000fb2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000fb6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8000fba:	6c22      	ldr	r2, [r4, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000fbc:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000fbe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000fc6:	f7ff fded 	bl	8000ba4 <HAL_GetTick>
 8000fca:	1b80      	subs	r0, r0, r6
 8000fcc:	42a8      	cmp	r0, r5
 8000fce:	d801      	bhi.n	8000fd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8000fd0:	2d00      	cmp	r5, #0
 8000fd2:	d1df      	bne.n	8000f94 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000fd4:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8000fd6:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000fd8:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000fda:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000fde:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000fe2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000fe4:	f042 0220 	orr.w	r2, r2, #32
 8000fe8:	e7e8      	b.n	8000fbc <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08000fea <I2C_WaitOnFlagUntilTimeout>:
{
 8000fea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000fee:	4604      	mov	r4, r0
 8000ff0:	4690      	mov	r8, r2
 8000ff2:	461f      	mov	r7, r3
 8000ff4:	9e08      	ldr	r6, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000ff6:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8000ffa:	b28d      	uxth	r5, r1
 8000ffc:	6823      	ldr	r3, [r4, #0]
 8000ffe:	f1b9 0f01 	cmp.w	r9, #1
 8001002:	bf0c      	ite	eq
 8001004:	695b      	ldreq	r3, [r3, #20]
 8001006:	699b      	ldrne	r3, [r3, #24]
 8001008:	ea35 0303 	bics.w	r3, r5, r3
 800100c:	bf0c      	ite	eq
 800100e:	2301      	moveq	r3, #1
 8001010:	2300      	movne	r3, #0
 8001012:	4543      	cmp	r3, r8
 8001014:	d002      	beq.n	800101c <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8001016:	2000      	movs	r0, #0
}
 8001018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 800101c:	1c7b      	adds	r3, r7, #1
 800101e:	d0ed      	beq.n	8000ffc <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001020:	f7ff fdc0 	bl	8000ba4 <HAL_GetTick>
 8001024:	1b80      	subs	r0, r0, r6
 8001026:	4287      	cmp	r7, r0
 8001028:	d301      	bcc.n	800102e <I2C_WaitOnFlagUntilTimeout+0x44>
 800102a:	2f00      	cmp	r7, #0
 800102c:	d1e6      	bne.n	8000ffc <I2C_WaitOnFlagUntilTimeout+0x12>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800102e:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8001030:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001032:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001034:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001038:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800103c:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800103e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001042:	f042 0220 	orr.w	r2, r2, #32
 8001046:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001048:	2001      	movs	r0, #1
 800104a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800104e <I2C_WaitOnTXEFlagUntilTimeout>:
{
 800104e:	b570      	push	{r4, r5, r6, lr}
 8001050:	4604      	mov	r4, r0
 8001052:	460d      	mov	r5, r1
 8001054:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001056:	6823      	ldr	r3, [r4, #0]
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	061b      	lsls	r3, r3, #24
 800105c:	d501      	bpl.n	8001062 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 800105e:	2000      	movs	r0, #0
 8001060:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001062:	4620      	mov	r0, r4
 8001064:	f7ff ff0e 	bl	8000e84 <I2C_IsAcknowledgeFailed>
 8001068:	b9a8      	cbnz	r0, 8001096 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 800106a:	1c6a      	adds	r2, r5, #1
 800106c:	d0f3      	beq.n	8001056 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800106e:	f7ff fd99 	bl	8000ba4 <HAL_GetTick>
 8001072:	1b80      	subs	r0, r0, r6
 8001074:	4285      	cmp	r5, r0
 8001076:	d301      	bcc.n	800107c <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8001078:	2d00      	cmp	r5, #0
 800107a:	d1ec      	bne.n	8001056 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800107c:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 800107e:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001080:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001082:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001086:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800108a:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800108c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001090:	f042 0220 	orr.w	r2, r2, #32
 8001094:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001096:	2001      	movs	r0, #1
}
 8001098:	bd70      	pop	{r4, r5, r6, pc}
	...

0800109c <I2C_RequestMemoryWrite>:
{
 800109c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80010a0:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80010a2:	6802      	ldr	r2, [r0, #0]
{
 80010a4:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80010a6:	6813      	ldr	r3, [r2, #0]
{
 80010a8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80010aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ae:	6013      	str	r3, [r2, #0]
{
 80010b0:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80010b2:	9600      	str	r6, [sp, #0]
 80010b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80010b6:	2200      	movs	r2, #0
 80010b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 80010bc:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80010be:	f7ff ff94 	bl	8000fea <I2C_WaitOnFlagUntilTimeout>
 80010c2:	b118      	cbz	r0, 80010cc <I2C_RequestMemoryWrite+0x30>
      return HAL_ERROR;
 80010c4:	2001      	movs	r0, #1
}
 80010c6:	b004      	add	sp, #16
 80010c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80010cc:	6823      	ldr	r3, [r4, #0]
 80010ce:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 80010d2:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80010d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80010d6:	4633      	mov	r3, r6
 80010d8:	4916      	ldr	r1, [pc, #88]	; (8001134 <I2C_RequestMemoryWrite+0x98>)
 80010da:	4620      	mov	r0, r4
 80010dc:	f7ff feeb 	bl	8000eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80010e0:	2800      	cmp	r0, #0
 80010e2:	d1ef      	bne.n	80010c4 <I2C_RequestMemoryWrite+0x28>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010e4:	6823      	ldr	r3, [r4, #0]
 80010e6:	9003      	str	r0, [sp, #12]
 80010e8:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80010ea:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010ec:	9203      	str	r2, [sp, #12]
 80010ee:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80010f0:	4632      	mov	r2, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010f2:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80010f4:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010f6:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80010f8:	f7ff ffa9 	bl	800104e <I2C_WaitOnTXEFlagUntilTimeout>
 80010fc:	b140      	cbz	r0, 8001110 <I2C_RequestMemoryWrite+0x74>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80010fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001100:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001102:	bf01      	itttt	eq
 8001104:	6822      	ldreq	r2, [r4, #0]
 8001106:	6813      	ldreq	r3, [r2, #0]
 8001108:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 800110c:	6013      	streq	r3, [r2, #0]
 800110e:	e7d9      	b.n	80010c4 <I2C_RequestMemoryWrite+0x28>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001110:	f1b8 0f01 	cmp.w	r8, #1
 8001114:	6823      	ldr	r3, [r4, #0]
 8001116:	d102      	bne.n	800111e <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001118:	b2ed      	uxtb	r5, r5
 800111a:	611d      	str	r5, [r3, #16]
 800111c:	e7d3      	b.n	80010c6 <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800111e:	0a2a      	lsrs	r2, r5, #8
 8001120:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001122:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001124:	4632      	mov	r2, r6
 8001126:	4620      	mov	r0, r4
 8001128:	f7ff ff91 	bl	800104e <I2C_WaitOnTXEFlagUntilTimeout>
 800112c:	2800      	cmp	r0, #0
 800112e:	d1e6      	bne.n	80010fe <I2C_RequestMemoryWrite+0x62>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001130:	6823      	ldr	r3, [r4, #0]
 8001132:	e7f1      	b.n	8001118 <I2C_RequestMemoryWrite+0x7c>
 8001134:	00010002 	.word	0x00010002

08001138 <I2C_RequestMemoryRead>:
{
 8001138:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800113c:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800113e:	6803      	ldr	r3, [r0, #0]
{
 8001140:	4616      	mov	r6, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001142:	681a      	ldr	r2, [r3, #0]
{
 8001144:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001146:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800114a:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800114c:	681a      	ldr	r2, [r3, #0]
{
 800114e:	460f      	mov	r7, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001150:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001154:	601a      	str	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001156:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800115a:	9500      	str	r5, [sp, #0]
 800115c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800115e:	2200      	movs	r2, #0
{
 8001160:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001162:	f7ff ff42 	bl	8000fea <I2C_WaitOnFlagUntilTimeout>
 8001166:	b118      	cbz	r0, 8001170 <I2C_RequestMemoryRead+0x38>
    return HAL_ERROR;
 8001168:	2001      	movs	r0, #1
}
 800116a:	b004      	add	sp, #16
 800116c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001170:	6823      	ldr	r3, [r4, #0]
 8001172:	b2ff      	uxtb	r7, r7
 8001174:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 8001178:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800117a:	4929      	ldr	r1, [pc, #164]	; (8001220 <I2C_RequestMemoryRead+0xe8>)
 800117c:	462b      	mov	r3, r5
 800117e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001180:	4620      	mov	r0, r4
 8001182:	f7ff fe98 	bl	8000eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001186:	2800      	cmp	r0, #0
 8001188:	d1ee      	bne.n	8001168 <I2C_RequestMemoryRead+0x30>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800118a:	6823      	ldr	r3, [r4, #0]
 800118c:	9003      	str	r0, [sp, #12]
 800118e:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001190:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001192:	9203      	str	r2, [sp, #12]
 8001194:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001196:	462a      	mov	r2, r5
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001198:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800119a:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800119c:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800119e:	f7ff ff56 	bl	800104e <I2C_WaitOnTXEFlagUntilTimeout>
 80011a2:	b140      	cbz	r0, 80011b6 <I2C_RequestMemoryRead+0x7e>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80011a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011a6:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011a8:	bf01      	itttt	eq
 80011aa:	6822      	ldreq	r2, [r4, #0]
 80011ac:	6813      	ldreq	r3, [r2, #0]
 80011ae:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80011b2:	6013      	streq	r3, [r2, #0]
 80011b4:	e7d8      	b.n	8001168 <I2C_RequestMemoryRead+0x30>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80011b6:	f1b8 0f01 	cmp.w	r8, #1
 80011ba:	6823      	ldr	r3, [r4, #0]
 80011bc:	d125      	bne.n	800120a <I2C_RequestMemoryRead+0xd2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80011be:	b2f6      	uxtb	r6, r6
 80011c0:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80011c2:	462a      	mov	r2, r5
 80011c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80011c6:	4620      	mov	r0, r4
 80011c8:	f7ff ff41 	bl	800104e <I2C_WaitOnTXEFlagUntilTimeout>
 80011cc:	4602      	mov	r2, r0
 80011ce:	2800      	cmp	r0, #0
 80011d0:	d1e8      	bne.n	80011a4 <I2C_RequestMemoryRead+0x6c>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80011d2:	6821      	ldr	r1, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80011d4:	4620      	mov	r0, r4
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80011d6:	680b      	ldr	r3, [r1, #0]
 80011d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011dc:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80011de:	9500      	str	r5, [sp, #0]
 80011e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80011e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80011e6:	f7ff ff00 	bl	8000fea <I2C_WaitOnFlagUntilTimeout>
 80011ea:	2800      	cmp	r0, #0
 80011ec:	d1bc      	bne.n	8001168 <I2C_RequestMemoryRead+0x30>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80011ee:	6823      	ldr	r3, [r4, #0]
 80011f0:	f047 0701 	orr.w	r7, r7, #1
 80011f4:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80011f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80011f8:	462b      	mov	r3, r5
 80011fa:	4909      	ldr	r1, [pc, #36]	; (8001220 <I2C_RequestMemoryRead+0xe8>)
 80011fc:	4620      	mov	r0, r4
 80011fe:	f7ff fe5a 	bl	8000eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_ERROR;
 8001202:	3000      	adds	r0, #0
 8001204:	bf18      	it	ne
 8001206:	2001      	movne	r0, #1
 8001208:	e7af      	b.n	800116a <I2C_RequestMemoryRead+0x32>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800120a:	0a32      	lsrs	r2, r6, #8
 800120c:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800120e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001210:	462a      	mov	r2, r5
 8001212:	4620      	mov	r0, r4
 8001214:	f7ff ff1b 	bl	800104e <I2C_WaitOnTXEFlagUntilTimeout>
 8001218:	2800      	cmp	r0, #0
 800121a:	d1c3      	bne.n	80011a4 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800121c:	6823      	ldr	r3, [r4, #0]
 800121e:	e7ce      	b.n	80011be <I2C_RequestMemoryRead+0x86>
 8001220:	00010002 	.word	0x00010002

08001224 <HAL_I2C_Init>:
{
 8001224:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8001226:	4604      	mov	r4, r0
 8001228:	b908      	cbnz	r0, 800122e <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800122a:	2001      	movs	r0, #1
 800122c:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800122e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001232:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001236:	b91b      	cbnz	r3, 8001240 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8001238:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800123c:	f001 fadc 	bl	80027f8 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001240:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8001242:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001244:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001248:	6813      	ldr	r3, [r2, #0]
 800124a:	f023 0301 	bic.w	r3, r3, #1
 800124e:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001250:	f000 fd5a 	bl	8001d08 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001254:	6865      	ldr	r5, [r4, #4]
 8001256:	4b41      	ldr	r3, [pc, #260]	; (800135c <HAL_I2C_Init+0x138>)
 8001258:	429d      	cmp	r5, r3
 800125a:	d84d      	bhi.n	80012f8 <HAL_I2C_Init+0xd4>
 800125c:	4b40      	ldr	r3, [pc, #256]	; (8001360 <HAL_I2C_Init+0x13c>)
 800125e:	4298      	cmp	r0, r3
 8001260:	d9e3      	bls.n	800122a <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8001262:	4940      	ldr	r1, [pc, #256]	; (8001364 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001264:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001266:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800126a:	6853      	ldr	r3, [r2, #4]
 800126c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001270:	430b      	orrs	r3, r1
 8001272:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001274:	6a13      	ldr	r3, [r2, #32]
 8001276:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800127a:	3101      	adds	r1, #1
 800127c:	4319      	orrs	r1, r3
 800127e:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001280:	69d1      	ldr	r1, [r2, #28]
 8001282:	4b36      	ldr	r3, [pc, #216]	; (800135c <HAL_I2C_Init+0x138>)
 8001284:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001288:	429d      	cmp	r5, r3
 800128a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800128e:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8001292:	d848      	bhi.n	8001326 <HAL_I2C_Init+0x102>
 8001294:	006d      	lsls	r5, r5, #1
 8001296:	fbb0 f0f5 	udiv	r0, r0, r5
 800129a:	3001      	adds	r0, #1
 800129c:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80012a0:	2b04      	cmp	r3, #4
 80012a2:	bf38      	it	cc
 80012a4:	2304      	movcc	r3, #4
 80012a6:	430b      	orrs	r3, r1
 80012a8:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80012aa:	6811      	ldr	r1, [r2, #0]
 80012ac:	6a20      	ldr	r0, [r4, #32]
 80012ae:	69e3      	ldr	r3, [r4, #28]
 80012b0:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80012b4:	4303      	orrs	r3, r0
 80012b6:	430b      	orrs	r3, r1
 80012b8:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80012ba:	6891      	ldr	r1, [r2, #8]
 80012bc:	68e0      	ldr	r0, [r4, #12]
 80012be:	6923      	ldr	r3, [r4, #16]
 80012c0:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80012c4:	4303      	orrs	r3, r0
 80012c6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80012ca:	430b      	orrs	r3, r1
 80012cc:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80012ce:	68d1      	ldr	r1, [r2, #12]
 80012d0:	69a0      	ldr	r0, [r4, #24]
 80012d2:	6963      	ldr	r3, [r4, #20]
 80012d4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80012d8:	4303      	orrs	r3, r0
 80012da:	430b      	orrs	r3, r1
 80012dc:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80012de:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012e0:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80012e8:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012ea:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80012ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80012f0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012f2:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80012f6:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80012f8:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <HAL_I2C_Init+0x144>)
 80012fa:	4298      	cmp	r0, r3
 80012fc:	d995      	bls.n	800122a <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 80012fe:	4e19      	ldr	r6, [pc, #100]	; (8001364 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001300:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8001304:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001308:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800130a:	4371      	muls	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800130c:	6853      	ldr	r3, [r2, #4]
 800130e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001312:	4333      	orrs	r3, r6
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001314:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001318:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800131a:	6a13      	ldr	r3, [r2, #32]
 800131c:	fbb1 f1f6 	udiv	r1, r1, r6
 8001320:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001324:	e7a9      	b.n	800127a <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001326:	68a3      	ldr	r3, [r4, #8]
 8001328:	b953      	cbnz	r3, 8001340 <HAL_I2C_Init+0x11c>
 800132a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800132e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001332:	1c43      	adds	r3, r0, #1
 8001334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001338:	b16b      	cbz	r3, 8001356 <HAL_I2C_Init+0x132>
 800133a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800133e:	e7b2      	b.n	80012a6 <HAL_I2C_Init+0x82>
 8001340:	2319      	movs	r3, #25
 8001342:	436b      	muls	r3, r5
 8001344:	fbb0 f0f3 	udiv	r0, r0, r3
 8001348:	1c43      	adds	r3, r0, #1
 800134a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800134e:	b113      	cbz	r3, 8001356 <HAL_I2C_Init+0x132>
 8001350:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001354:	e7a7      	b.n	80012a6 <HAL_I2C_Init+0x82>
 8001356:	2301      	movs	r3, #1
 8001358:	e7a5      	b.n	80012a6 <HAL_I2C_Init+0x82>
 800135a:	bf00      	nop
 800135c:	000186a0 	.word	0x000186a0
 8001360:	001e847f 	.word	0x001e847f
 8001364:	000f4240 	.word	0x000f4240
 8001368:	003d08ff 	.word	0x003d08ff

0800136c <HAL_I2C_Mem_Write>:
{
 800136c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001370:	4604      	mov	r4, r0
 8001372:	4699      	mov	r9, r3
 8001374:	460f      	mov	r7, r1
 8001376:	4690      	mov	r8, r2
 8001378:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 800137a:	f7ff fc13 	bl	8000ba4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800137e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8001382:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001384:	2b20      	cmp	r3, #32
 8001386:	d003      	beq.n	8001390 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8001388:	2002      	movs	r0, #2
}
 800138a:	b003      	add	sp, #12
 800138c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001390:	9000      	str	r0, [sp, #0]
 8001392:	2319      	movs	r3, #25
 8001394:	2201      	movs	r2, #1
 8001396:	493b      	ldr	r1, [pc, #236]	; (8001484 <HAL_I2C_Mem_Write+0x118>)
 8001398:	4620      	mov	r0, r4
 800139a:	f7ff fe26 	bl	8000fea <I2C_WaitOnFlagUntilTimeout>
 800139e:	2800      	cmp	r0, #0
 80013a0:	d1f2      	bne.n	8001388 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 80013a2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d0ee      	beq.n	8001388 <HAL_I2C_Mem_Write+0x1c>
 80013aa:	2301      	movs	r3, #1
 80013ac:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80013b0:	6823      	ldr	r3, [r4, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80013b2:	4620      	mov	r0, r4
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	07d1      	lsls	r1, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80013b8:	bf58      	it	pl
 80013ba:	681a      	ldrpl	r2, [r3, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80013bc:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 80013be:	bf5c      	itt	pl
 80013c0:	f042 0201 	orrpl.w	r2, r2, #1
 80013c4:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013cc:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80013ce:	2321      	movs	r3, #33	; 0x21
 80013d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80013d4:	2340      	movs	r3, #64	; 0x40
 80013d6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013da:	2300      	movs	r3, #0
 80013dc:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80013de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80013e0:	9501      	str	r5, [sp, #4]
    hi2c->pBuffPtr    = pData;
 80013e2:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80013e4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80013e8:	9600      	str	r6, [sp, #0]
    hi2c->XferCount   = Size;
 80013ea:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80013ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80013ee:	4642      	mov	r2, r8
    hi2c->XferSize    = hi2c->XferCount;
 80013f0:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80013f2:	4b25      	ldr	r3, [pc, #148]	; (8001488 <HAL_I2C_Mem_Write+0x11c>)
 80013f4:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80013f6:	464b      	mov	r3, r9
 80013f8:	f7ff fe50 	bl	800109c <I2C_RequestMemoryWrite>
 80013fc:	2800      	cmp	r0, #0
 80013fe:	d02a      	beq.n	8001456 <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 8001400:	2001      	movs	r0, #1
 8001402:	e7c2      	b.n	800138a <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001404:	f7ff fe23 	bl	800104e <I2C_WaitOnTXEFlagUntilTimeout>
 8001408:	b140      	cbz	r0, 800141c <HAL_I2C_Mem_Write+0xb0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800140a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800140c:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800140e:	bf01      	itttt	eq
 8001410:	6822      	ldreq	r2, [r4, #0]
 8001412:	6813      	ldreq	r3, [r2, #0]
 8001414:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8001418:	6013      	streq	r3, [r2, #0]
 800141a:	e7f1      	b.n	8001400 <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800141c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800141e:	6827      	ldr	r7, [r4, #0]
 8001420:	461a      	mov	r2, r3
 8001422:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001426:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8001428:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800142a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800142c:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800142e:	3a01      	subs	r2, #1
 8001430:	b292      	uxth	r2, r2
 8001432:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001434:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8001436:	1e48      	subs	r0, r1, #1
 8001438:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800143a:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 800143c:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800143e:	d50a      	bpl.n	8001456 <HAL_I2C_Mem_Write+0xea>
 8001440:	b148      	cbz	r0, 8001456 <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001442:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 8001444:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001446:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8001448:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 800144a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 800144c:	3902      	subs	r1, #2
        hi2c->XferCount--;
 800144e:	3b01      	subs	r3, #1
 8001450:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8001452:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001454:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001456:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001458:	462a      	mov	r2, r5
 800145a:	4631      	mov	r1, r6
 800145c:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1d0      	bne.n	8001404 <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001462:	f7ff fd6d 	bl	8000f40 <I2C_WaitOnBTFFlagUntilTimeout>
 8001466:	2800      	cmp	r0, #0
 8001468:	d1cf      	bne.n	800140a <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800146a:	6822      	ldr	r2, [r4, #0]
 800146c:	6813      	ldr	r3, [r2, #0]
 800146e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001472:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001474:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8001476:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 800147a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800147e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8001482:	e782      	b.n	800138a <HAL_I2C_Mem_Write+0x1e>
 8001484:	00100002 	.word	0x00100002
 8001488:	ffff0000 	.word	0xffff0000

0800148c <HAL_I2C_Mem_Read>:
{
 800148c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001490:	4604      	mov	r4, r0
 8001492:	b087      	sub	sp, #28
 8001494:	4699      	mov	r9, r3
 8001496:	460d      	mov	r5, r1
 8001498:	4690      	mov	r8, r2
 800149a:	9f10      	ldr	r7, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800149c:	f7ff fb82 	bl	8000ba4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80014a0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 80014a4:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80014a6:	2b20      	cmp	r3, #32
 80014a8:	d004      	beq.n	80014b4 <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 80014aa:	2502      	movs	r5, #2
}
 80014ac:	4628      	mov	r0, r5
 80014ae:	b007      	add	sp, #28
 80014b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80014b4:	9000      	str	r0, [sp, #0]
 80014b6:	2319      	movs	r3, #25
 80014b8:	2201      	movs	r2, #1
 80014ba:	497e      	ldr	r1, [pc, #504]	; (80016b4 <HAL_I2C_Mem_Read+0x228>)
 80014bc:	4620      	mov	r0, r4
 80014be:	f7ff fd94 	bl	8000fea <I2C_WaitOnFlagUntilTimeout>
 80014c2:	2800      	cmp	r0, #0
 80014c4:	d1f1      	bne.n	80014aa <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 80014c6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d0ed      	beq.n	80014aa <HAL_I2C_Mem_Read+0x1e>
 80014ce:	2301      	movs	r3, #1
 80014d0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014d4:	6823      	ldr	r3, [r4, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80014d6:	4629      	mov	r1, r5
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	07d0      	lsls	r0, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80014dc:	bf58      	it	pl
 80014de:	681a      	ldrpl	r2, [r3, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80014e0:	4620      	mov	r0, r4
      __HAL_I2C_ENABLE(hi2c);
 80014e2:	bf5c      	itt	pl
 80014e4:	f042 0201 	orrpl.w	r2, r2, #1
 80014e8:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014f0:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80014f2:	2322      	movs	r3, #34	; 0x22
 80014f4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80014f8:	2340      	movs	r3, #64	; 0x40
 80014fa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014fe:	2300      	movs	r3, #0
 8001500:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001502:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001504:	9601      	str	r6, [sp, #4]
    hi2c->pBuffPtr    = pData;
 8001506:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001508:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800150c:	9700      	str	r7, [sp, #0]
    hi2c->XferCount   = Size;
 800150e:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001510:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001512:	4642      	mov	r2, r8
    hi2c->XferSize    = hi2c->XferCount;
 8001514:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001516:	4b68      	ldr	r3, [pc, #416]	; (80016b8 <HAL_I2C_Mem_Read+0x22c>)
 8001518:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800151a:	464b      	mov	r3, r9
 800151c:	f7ff fe0c 	bl	8001138 <I2C_RequestMemoryRead>
 8001520:	4605      	mov	r5, r0
 8001522:	b108      	cbz	r0, 8001528 <HAL_I2C_Mem_Read+0x9c>
      return HAL_ERROR;
 8001524:	2501      	movs	r5, #1
 8001526:	e7c1      	b.n	80014ac <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 8001528:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800152a:	6823      	ldr	r3, [r4, #0]
 800152c:	b992      	cbnz	r2, 8001554 <HAL_I2C_Mem_Read+0xc8>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800152e:	9002      	str	r0, [sp, #8]
 8001530:	695a      	ldr	r2, [r3, #20]
 8001532:	9202      	str	r2, [sp, #8]
 8001534:	699a      	ldr	r2, [r3, #24]
 8001536:	9202      	str	r2, [sp, #8]
 8001538:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001540:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001542:	2320      	movs	r3, #32
 8001544:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001548:	2300      	movs	r3, #0
 800154a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 800154e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001552:	e7ab      	b.n	80014ac <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 8001554:	2a01      	cmp	r2, #1
 8001556:	d12f      	bne.n	80015b8 <HAL_I2C_Mem_Read+0x12c>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800155e:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001560:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001562:	6823      	ldr	r3, [r4, #0]
 8001564:	9003      	str	r0, [sp, #12]
 8001566:	695a      	ldr	r2, [r3, #20]
 8001568:	9203      	str	r2, [sp, #12]
 800156a:	699a      	ldr	r2, [r3, #24]
 800156c:	9203      	str	r2, [sp, #12]
 800156e:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001576:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001578:	b662      	cpsie	i
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800157a:	f8df 8140 	ldr.w	r8, [pc, #320]	; 80016bc <HAL_I2C_Mem_Read+0x230>
    while (hi2c->XferSize > 0U)
 800157e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0de      	beq.n	8001542 <HAL_I2C_Mem_Read+0xb6>
      if (hi2c->XferSize <= 3U)
 8001584:	2b03      	cmp	r3, #3
 8001586:	d877      	bhi.n	8001678 <HAL_I2C_Mem_Read+0x1ec>
        if (hi2c->XferSize == 1U)
 8001588:	2b01      	cmp	r3, #1
 800158a:	d131      	bne.n	80015f0 <HAL_I2C_Mem_Read+0x164>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800158c:	4632      	mov	r2, r6
 800158e:	4639      	mov	r1, r7
 8001590:	4620      	mov	r0, r4
 8001592:	f7ff fcfb 	bl	8000f8c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001596:	2800      	cmp	r0, #0
 8001598:	d1c4      	bne.n	8001524 <HAL_I2C_Mem_Read+0x98>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800159a:	6822      	ldr	r2, [r4, #0]
 800159c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800159e:	6912      	ldr	r2, [r2, #16]
 80015a0:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80015a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015a4:	3301      	adds	r3, #1
 80015a6:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80015a8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80015aa:	3b01      	subs	r3, #1
 80015ac:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80015ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80015b0:	3b01      	subs	r3, #1
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	8563      	strh	r3, [r4, #42]	; 0x2a
 80015b6:	e7e2      	b.n	800157e <HAL_I2C_Mem_Read+0xf2>
    else if (hi2c->XferSize == 2U)
 80015b8:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015ba:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 80015bc:	d10e      	bne.n	80015dc <HAL_I2C_Mem_Read+0x150>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80015c4:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015c6:	6823      	ldr	r3, [r4, #0]
 80015c8:	9004      	str	r0, [sp, #16]
 80015ca:	695a      	ldr	r2, [r3, #20]
 80015cc:	9204      	str	r2, [sp, #16]
 80015ce:	699a      	ldr	r2, [r3, #24]
 80015d0:	9204      	str	r2, [sp, #16]
 80015d2:	9a04      	ldr	r2, [sp, #16]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015da:	e7cc      	b.n	8001576 <HAL_I2C_Mem_Read+0xea>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80015e0:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015e2:	9005      	str	r0, [sp, #20]
 80015e4:	695a      	ldr	r2, [r3, #20]
 80015e6:	9205      	str	r2, [sp, #20]
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	9305      	str	r3, [sp, #20]
 80015ec:	9b05      	ldr	r3, [sp, #20]
 80015ee:	e7c4      	b.n	800157a <HAL_I2C_Mem_Read+0xee>
        else if (hi2c->XferSize == 2U)
 80015f0:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80015f2:	9600      	str	r6, [sp, #0]
 80015f4:	463b      	mov	r3, r7
 80015f6:	f04f 0200 	mov.w	r2, #0
 80015fa:	4641      	mov	r1, r8
 80015fc:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 80015fe:	d118      	bne.n	8001632 <HAL_I2C_Mem_Read+0x1a6>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001600:	f7ff fcf3 	bl	8000fea <I2C_WaitOnFlagUntilTimeout>
 8001604:	2800      	cmp	r0, #0
 8001606:	d18d      	bne.n	8001524 <HAL_I2C_Mem_Read+0x98>
 8001608:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800160a:	6823      	ldr	r3, [r4, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001612:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001618:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 800161a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800161c:	3301      	adds	r3, #1
 800161e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001620:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001622:	3b01      	subs	r3, #1
 8001624:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001626:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001628:	3b01      	subs	r3, #1
 800162a:	b29b      	uxth	r3, r3
 800162c:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800162e:	b662      	cpsie	i
 8001630:	e7b3      	b.n	800159a <HAL_I2C_Mem_Read+0x10e>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001632:	f7ff fcda 	bl	8000fea <I2C_WaitOnFlagUntilTimeout>
 8001636:	4602      	mov	r2, r0
 8001638:	2800      	cmp	r0, #0
 800163a:	f47f af73 	bne.w	8001524 <HAL_I2C_Mem_Read+0x98>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800163e:	6821      	ldr	r1, [r4, #0]
 8001640:	680b      	ldr	r3, [r1, #0]
 8001642:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001646:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001648:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800164a:	6821      	ldr	r1, [r4, #0]
 800164c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800164e:	6909      	ldr	r1, [r1, #16]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001650:	4620      	mov	r0, r4
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001652:	7019      	strb	r1, [r3, #0]
          hi2c->pBuffPtr++;
 8001654:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001656:	9600      	str	r6, [sp, #0]
          hi2c->pBuffPtr++;
 8001658:	3301      	adds	r3, #1
 800165a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800165c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800165e:	4641      	mov	r1, r8
          hi2c->XferSize--;
 8001660:	3b01      	subs	r3, #1
 8001662:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001664:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001666:	3b01      	subs	r3, #1
 8001668:	b29b      	uxth	r3, r3
 800166a:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800166c:	463b      	mov	r3, r7
 800166e:	f7ff fcbc 	bl	8000fea <I2C_WaitOnFlagUntilTimeout>
 8001672:	2800      	cmp	r0, #0
 8001674:	d0c9      	beq.n	800160a <HAL_I2C_Mem_Read+0x17e>
 8001676:	e755      	b.n	8001524 <HAL_I2C_Mem_Read+0x98>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001678:	4632      	mov	r2, r6
 800167a:	4639      	mov	r1, r7
 800167c:	4620      	mov	r0, r4
 800167e:	f7ff fc85 	bl	8000f8c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001682:	2800      	cmp	r0, #0
 8001684:	f47f af4e 	bne.w	8001524 <HAL_I2C_Mem_Read+0x98>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001688:	6822      	ldr	r2, [r4, #0]
 800168a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800168c:	6912      	ldr	r2, [r2, #16]
 800168e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001690:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001692:	1c53      	adds	r3, r2, #1
 8001694:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8001696:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001698:	3b01      	subs	r3, #1
 800169a:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800169c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800169e:	3b01      	subs	r3, #1
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80016a4:	6823      	ldr	r3, [r4, #0]
 80016a6:	6959      	ldr	r1, [r3, #20]
 80016a8:	0749      	lsls	r1, r1, #29
 80016aa:	f57f af68 	bpl.w	800157e <HAL_I2C_Mem_Read+0xf2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	7053      	strb	r3, [r2, #1]
 80016b2:	e776      	b.n	80015a2 <HAL_I2C_Mem_Read+0x116>
 80016b4:	00100002 	.word	0x00100002
 80016b8:	ffff0000 	.word	0xffff0000
 80016bc:	00010004 	.word	0x00010004

080016c0 <HAL_I2C_IsDeviceReady>:
{
 80016c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016c4:	4604      	mov	r4, r0
 80016c6:	b085      	sub	sp, #20
 80016c8:	4698      	mov	r8, r3
 80016ca:	4689      	mov	r9, r1
 80016cc:	4692      	mov	sl, r2
  uint32_t tickstart = HAL_GetTick();
 80016ce:	f7ff fa69 	bl	8000ba4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80016d2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 80016d6:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80016d8:	2b20      	cmp	r3, #32
 80016da:	d003      	beq.n	80016e4 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 80016dc:	2002      	movs	r0, #2
}
 80016de:	b005      	add	sp, #20
 80016e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016e4:	9000      	str	r0, [sp, #0]
 80016e6:	2319      	movs	r3, #25
 80016e8:	2201      	movs	r2, #1
 80016ea:	4949      	ldr	r1, [pc, #292]	; (8001810 <HAL_I2C_IsDeviceReady+0x150>)
 80016ec:	4620      	mov	r0, r4
 80016ee:	f7ff fc7c 	bl	8000fea <I2C_WaitOnFlagUntilTimeout>
 80016f2:	2800      	cmp	r0, #0
 80016f4:	d1f2      	bne.n	80016dc <HAL_I2C_IsDeviceReady+0x1c>
    __HAL_LOCK(hi2c);
 80016f6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d0ee      	beq.n	80016dc <HAL_I2C_IsDeviceReady+0x1c>
 80016fe:	2301      	movs	r3, #1
 8001700:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001704:	6823      	ldr	r3, [r4, #0]
  uint32_t I2C_Trials = 1U;
 8001706:	2701      	movs	r7, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001708:	681a      	ldr	r2, [r3, #0]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800170a:	f8df b104 	ldr.w	fp, [pc, #260]	; 8001810 <HAL_I2C_IsDeviceReady+0x150>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800170e:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001710:	bf58      	it	pl
 8001712:	681a      	ldrpl	r2, [r3, #0]
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001714:	f009 09fe 	and.w	r9, r9, #254	; 0xfe
      __HAL_I2C_ENABLE(hi2c);
 8001718:	bf5c      	itt	pl
 800171a:	f042 0201 	orrpl.w	r2, r2, #1
 800171e:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001726:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001728:	2324      	movs	r3, #36	; 0x24
 800172a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800172e:	2300      	movs	r3, #0
 8001730:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001732:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8001736:	62e3      	str	r3, [r4, #44]	; 0x2c
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001738:	6822      	ldr	r2, [r4, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800173a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800173e:	6813      	ldr	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001740:	4620      	mov	r0, r4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001746:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001748:	9500      	str	r5, [sp, #0]
 800174a:	4643      	mov	r3, r8
 800174c:	2200      	movs	r2, #0
 800174e:	f7ff fc4c 	bl	8000fea <I2C_WaitOnFlagUntilTimeout>
 8001752:	b108      	cbz	r0, 8001758 <HAL_I2C_IsDeviceReady+0x98>
    return HAL_ERROR;
 8001754:	2001      	movs	r0, #1
 8001756:	e7c2      	b.n	80016de <HAL_I2C_IsDeviceReady+0x1e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001758:	6823      	ldr	r3, [r4, #0]
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800175a:	26a0      	movs	r6, #160	; 0xa0
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800175c:	f8c3 9010 	str.w	r9, [r3, #16]
      tickstart = HAL_GetTick();
 8001760:	f7ff fa20 	bl	8000ba4 <HAL_GetTick>
 8001764:	4605      	mov	r5, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001766:	6823      	ldr	r3, [r4, #0]
 8001768:	695a      	ldr	r2, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800176a:	695b      	ldr	r3, [r3, #20]
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800176c:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001770:	f3c3 2380 	ubfx	r3, r3, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001774:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8001778:	29a0      	cmp	r1, #160	; 0xa0
 800177a:	d001      	beq.n	8001780 <HAL_I2C_IsDeviceReady+0xc0>
 800177c:	b902      	cbnz	r2, 8001780 <HAL_I2C_IsDeviceReady+0xc0>
 800177e:	b303      	cbz	r3, 80017c2 <HAL_I2C_IsDeviceReady+0x102>
      hi2c->State = HAL_I2C_STATE_READY;
 8001780:	2620      	movs	r6, #32
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001782:	6823      	ldr	r3, [r4, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8001784:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001788:	695a      	ldr	r2, [r3, #20]
 800178a:	f012 0f02 	tst.w	r2, #2
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001794:	601a      	str	r2, [r3, #0]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001796:	d026      	beq.n	80017e6 <HAL_I2C_IsDeviceReady+0x126>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001798:	2200      	movs	r2, #0
 800179a:	9203      	str	r2, [sp, #12]
 800179c:	695a      	ldr	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800179e:	491c      	ldr	r1, [pc, #112]	; (8001810 <HAL_I2C_IsDeviceReady+0x150>)
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017a0:	9203      	str	r2, [sp, #12]
 80017a2:	699b      	ldr	r3, [r3, #24]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017a4:	2201      	movs	r2, #1
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017a6:	9303      	str	r3, [sp, #12]
 80017a8:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017aa:	9500      	str	r5, [sp, #0]
 80017ac:	2319      	movs	r3, #25
 80017ae:	4620      	mov	r0, r4
 80017b0:	f7ff fc1b 	bl	8000fea <I2C_WaitOnFlagUntilTimeout>
 80017b4:	2800      	cmp	r0, #0
 80017b6:	d1cd      	bne.n	8001754 <HAL_I2C_IsDeviceReady+0x94>
        hi2c->State = HAL_I2C_STATE_READY;
 80017b8:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80017bc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        return HAL_OK;
 80017c0:	e78d      	b.n	80016de <HAL_I2C_IsDeviceReady+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80017c2:	f7ff f9ef 	bl	8000ba4 <HAL_GetTick>
 80017c6:	1b40      	subs	r0, r0, r5
 80017c8:	4580      	cmp	r8, r0
 80017ca:	d302      	bcc.n	80017d2 <HAL_I2C_IsDeviceReady+0x112>
 80017cc:	f1b8 0f00 	cmp.w	r8, #0
 80017d0:	d101      	bne.n	80017d6 <HAL_I2C_IsDeviceReady+0x116>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80017d2:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80017d6:	6823      	ldr	r3, [r4, #0]
 80017d8:	695a      	ldr	r2, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80017da:	695b      	ldr	r3, [r3, #20]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80017dc:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80017e0:	f3c3 2380 	ubfx	r3, r3, #10, #1
 80017e4:	e7c6      	b.n	8001774 <HAL_I2C_IsDeviceReady+0xb4>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017ea:	4659      	mov	r1, fp
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017ec:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017ee:	4620      	mov	r0, r4
 80017f0:	9500      	str	r5, [sp, #0]
 80017f2:	2319      	movs	r3, #25
 80017f4:	2201      	movs	r2, #1
 80017f6:	f7ff fbf8 	bl	8000fea <I2C_WaitOnFlagUntilTimeout>
 80017fa:	2800      	cmp	r0, #0
 80017fc:	d1aa      	bne.n	8001754 <HAL_I2C_IsDeviceReady+0x94>
      I2C_Trials++;
 80017fe:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 8001800:	4557      	cmp	r7, sl
 8001802:	d399      	bcc.n	8001738 <HAL_I2C_IsDeviceReady+0x78>
    hi2c->State = HAL_I2C_STATE_READY;
 8001804:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8001808:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 800180c:	e7a2      	b.n	8001754 <HAL_I2C_IsDeviceReady+0x94>
 800180e:	bf00      	nop
 8001810:	00100002 	.word	0x00100002

08001814 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8001814:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 8001816:	4770      	bx	lr

08001818 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001818:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800181c:	4605      	mov	r5, r0
 800181e:	b908      	cbnz	r0, 8001824 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8001820:	2001      	movs	r0, #1
 8001822:	e03c      	b.n	800189e <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001824:	6803      	ldr	r3, [r0, #0]
 8001826:	07db      	lsls	r3, r3, #31
 8001828:	d410      	bmi.n	800184c <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800182a:	682b      	ldr	r3, [r5, #0]
 800182c:	079f      	lsls	r7, r3, #30
 800182e:	d45d      	bmi.n	80018ec <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001830:	682b      	ldr	r3, [r5, #0]
 8001832:	0719      	lsls	r1, r3, #28
 8001834:	f100 8094 	bmi.w	8001960 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001838:	682b      	ldr	r3, [r5, #0]
 800183a:	075a      	lsls	r2, r3, #29
 800183c:	f100 80be 	bmi.w	80019bc <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001840:	69e8      	ldr	r0, [r5, #28]
 8001842:	2800      	cmp	r0, #0
 8001844:	f040 812c 	bne.w	8001aa0 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8001848:	2000      	movs	r0, #0
 800184a:	e028      	b.n	800189e <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800184c:	4c8f      	ldr	r4, [pc, #572]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 800184e:	6863      	ldr	r3, [r4, #4]
 8001850:	f003 030c 	and.w	r3, r3, #12
 8001854:	2b04      	cmp	r3, #4
 8001856:	d007      	beq.n	8001868 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001858:	6863      	ldr	r3, [r4, #4]
 800185a:	f003 030c 	and.w	r3, r3, #12
 800185e:	2b08      	cmp	r3, #8
 8001860:	d109      	bne.n	8001876 <HAL_RCC_OscConfig+0x5e>
 8001862:	6863      	ldr	r3, [r4, #4]
 8001864:	03de      	lsls	r6, r3, #15
 8001866:	d506      	bpl.n	8001876 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001868:	6823      	ldr	r3, [r4, #0]
 800186a:	039c      	lsls	r4, r3, #14
 800186c:	d5dd      	bpl.n	800182a <HAL_RCC_OscConfig+0x12>
 800186e:	686b      	ldr	r3, [r5, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1da      	bne.n	800182a <HAL_RCC_OscConfig+0x12>
 8001874:	e7d4      	b.n	8001820 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001876:	686b      	ldr	r3, [r5, #4]
 8001878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800187c:	d112      	bne.n	80018a4 <HAL_RCC_OscConfig+0x8c>
 800187e:	6823      	ldr	r3, [r4, #0]
 8001880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001884:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001886:	f7ff f98d 	bl	8000ba4 <HAL_GetTick>
 800188a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800188c:	6823      	ldr	r3, [r4, #0]
 800188e:	0398      	lsls	r0, r3, #14
 8001890:	d4cb      	bmi.n	800182a <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001892:	f7ff f987 	bl	8000ba4 <HAL_GetTick>
 8001896:	1b80      	subs	r0, r0, r6
 8001898:	2864      	cmp	r0, #100	; 0x64
 800189a:	d9f7      	bls.n	800188c <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 800189c:	2003      	movs	r0, #3
}
 800189e:	b002      	add	sp, #8
 80018a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018a4:	b99b      	cbnz	r3, 80018ce <HAL_RCC_OscConfig+0xb6>
 80018a6:	6823      	ldr	r3, [r4, #0]
 80018a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ac:	6023      	str	r3, [r4, #0]
 80018ae:	6823      	ldr	r3, [r4, #0]
 80018b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018b4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80018b6:	f7ff f975 	bl	8000ba4 <HAL_GetTick>
 80018ba:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018bc:	6823      	ldr	r3, [r4, #0]
 80018be:	0399      	lsls	r1, r3, #14
 80018c0:	d5b3      	bpl.n	800182a <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018c2:	f7ff f96f 	bl	8000ba4 <HAL_GetTick>
 80018c6:	1b80      	subs	r0, r0, r6
 80018c8:	2864      	cmp	r0, #100	; 0x64
 80018ca:	d9f7      	bls.n	80018bc <HAL_RCC_OscConfig+0xa4>
 80018cc:	e7e6      	b.n	800189c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018d2:	6823      	ldr	r3, [r4, #0]
 80018d4:	d103      	bne.n	80018de <HAL_RCC_OscConfig+0xc6>
 80018d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018da:	6023      	str	r3, [r4, #0]
 80018dc:	e7cf      	b.n	800187e <HAL_RCC_OscConfig+0x66>
 80018de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018e2:	6023      	str	r3, [r4, #0]
 80018e4:	6823      	ldr	r3, [r4, #0]
 80018e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ea:	e7cb      	b.n	8001884 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018ec:	4c67      	ldr	r4, [pc, #412]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 80018ee:	6863      	ldr	r3, [r4, #4]
 80018f0:	f013 0f0c 	tst.w	r3, #12
 80018f4:	d007      	beq.n	8001906 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018f6:	6863      	ldr	r3, [r4, #4]
 80018f8:	f003 030c 	and.w	r3, r3, #12
 80018fc:	2b08      	cmp	r3, #8
 80018fe:	d110      	bne.n	8001922 <HAL_RCC_OscConfig+0x10a>
 8001900:	6863      	ldr	r3, [r4, #4]
 8001902:	03da      	lsls	r2, r3, #15
 8001904:	d40d      	bmi.n	8001922 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001906:	6823      	ldr	r3, [r4, #0]
 8001908:	079b      	lsls	r3, r3, #30
 800190a:	d502      	bpl.n	8001912 <HAL_RCC_OscConfig+0xfa>
 800190c:	692b      	ldr	r3, [r5, #16]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d186      	bne.n	8001820 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001912:	6823      	ldr	r3, [r4, #0]
 8001914:	696a      	ldr	r2, [r5, #20]
 8001916:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800191a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800191e:	6023      	str	r3, [r4, #0]
 8001920:	e786      	b.n	8001830 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001922:	692a      	ldr	r2, [r5, #16]
 8001924:	4b5a      	ldr	r3, [pc, #360]	; (8001a90 <HAL_RCC_OscConfig+0x278>)
 8001926:	b16a      	cbz	r2, 8001944 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8001928:	2201      	movs	r2, #1
 800192a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800192c:	f7ff f93a 	bl	8000ba4 <HAL_GetTick>
 8001930:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001932:	6823      	ldr	r3, [r4, #0]
 8001934:	079f      	lsls	r7, r3, #30
 8001936:	d4ec      	bmi.n	8001912 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001938:	f7ff f934 	bl	8000ba4 <HAL_GetTick>
 800193c:	1b80      	subs	r0, r0, r6
 800193e:	2802      	cmp	r0, #2
 8001940:	d9f7      	bls.n	8001932 <HAL_RCC_OscConfig+0x11a>
 8001942:	e7ab      	b.n	800189c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001944:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001946:	f7ff f92d 	bl	8000ba4 <HAL_GetTick>
 800194a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800194c:	6823      	ldr	r3, [r4, #0]
 800194e:	0798      	lsls	r0, r3, #30
 8001950:	f57f af6e 	bpl.w	8001830 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001954:	f7ff f926 	bl	8000ba4 <HAL_GetTick>
 8001958:	1b80      	subs	r0, r0, r6
 800195a:	2802      	cmp	r0, #2
 800195c:	d9f6      	bls.n	800194c <HAL_RCC_OscConfig+0x134>
 800195e:	e79d      	b.n	800189c <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001960:	69aa      	ldr	r2, [r5, #24]
 8001962:	4c4a      	ldr	r4, [pc, #296]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 8001964:	4b4b      	ldr	r3, [pc, #300]	; (8001a94 <HAL_RCC_OscConfig+0x27c>)
 8001966:	b1da      	cbz	r2, 80019a0 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8001968:	2201      	movs	r2, #1
 800196a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800196c:	f7ff f91a 	bl	8000ba4 <HAL_GetTick>
 8001970:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001972:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001974:	079b      	lsls	r3, r3, #30
 8001976:	d50d      	bpl.n	8001994 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001978:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800197c:	4b46      	ldr	r3, [pc, #280]	; (8001a98 <HAL_RCC_OscConfig+0x280>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	fbb3 f3f2 	udiv	r3, r3, r2
 8001984:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001986:	bf00      	nop
  }
  while (Delay --);
 8001988:	9b01      	ldr	r3, [sp, #4]
 800198a:	1e5a      	subs	r2, r3, #1
 800198c:	9201      	str	r2, [sp, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1f9      	bne.n	8001986 <HAL_RCC_OscConfig+0x16e>
 8001992:	e751      	b.n	8001838 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001994:	f7ff f906 	bl	8000ba4 <HAL_GetTick>
 8001998:	1b80      	subs	r0, r0, r6
 800199a:	2802      	cmp	r0, #2
 800199c:	d9e9      	bls.n	8001972 <HAL_RCC_OscConfig+0x15a>
 800199e:	e77d      	b.n	800189c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80019a0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80019a2:	f7ff f8ff 	bl	8000ba4 <HAL_GetTick>
 80019a6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019aa:	079f      	lsls	r7, r3, #30
 80019ac:	f57f af44 	bpl.w	8001838 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019b0:	f7ff f8f8 	bl	8000ba4 <HAL_GetTick>
 80019b4:	1b80      	subs	r0, r0, r6
 80019b6:	2802      	cmp	r0, #2
 80019b8:	d9f6      	bls.n	80019a8 <HAL_RCC_OscConfig+0x190>
 80019ba:	e76f      	b.n	800189c <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019bc:	4c33      	ldr	r4, [pc, #204]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 80019be:	69e3      	ldr	r3, [r4, #28]
 80019c0:	00d8      	lsls	r0, r3, #3
 80019c2:	d424      	bmi.n	8001a0e <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 80019c4:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80019c6:	69e3      	ldr	r3, [r4, #28]
 80019c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019cc:	61e3      	str	r3, [r4, #28]
 80019ce:	69e3      	ldr	r3, [r4, #28]
 80019d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d4:	9300      	str	r3, [sp, #0]
 80019d6:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d8:	4e30      	ldr	r6, [pc, #192]	; (8001a9c <HAL_RCC_OscConfig+0x284>)
 80019da:	6833      	ldr	r3, [r6, #0]
 80019dc:	05d9      	lsls	r1, r3, #23
 80019de:	d518      	bpl.n	8001a12 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e0:	68eb      	ldr	r3, [r5, #12]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d126      	bne.n	8001a34 <HAL_RCC_OscConfig+0x21c>
 80019e6:	6a23      	ldr	r3, [r4, #32]
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80019ee:	f7ff f8d9 	bl	8000ba4 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019f2:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80019f6:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f8:	6a23      	ldr	r3, [r4, #32]
 80019fa:	079b      	lsls	r3, r3, #30
 80019fc:	d53f      	bpl.n	8001a7e <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 80019fe:	2f00      	cmp	r7, #0
 8001a00:	f43f af1e 	beq.w	8001840 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a04:	69e3      	ldr	r3, [r4, #28]
 8001a06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a0a:	61e3      	str	r3, [r4, #28]
 8001a0c:	e718      	b.n	8001840 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8001a0e:	2700      	movs	r7, #0
 8001a10:	e7e2      	b.n	80019d8 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a12:	6833      	ldr	r3, [r6, #0]
 8001a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a18:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001a1a:	f7ff f8c3 	bl	8000ba4 <HAL_GetTick>
 8001a1e:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a20:	6833      	ldr	r3, [r6, #0]
 8001a22:	05da      	lsls	r2, r3, #23
 8001a24:	d4dc      	bmi.n	80019e0 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a26:	f7ff f8bd 	bl	8000ba4 <HAL_GetTick>
 8001a2a:	eba0 0008 	sub.w	r0, r0, r8
 8001a2e:	2864      	cmp	r0, #100	; 0x64
 8001a30:	d9f6      	bls.n	8001a20 <HAL_RCC_OscConfig+0x208>
 8001a32:	e733      	b.n	800189c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a34:	b9ab      	cbnz	r3, 8001a62 <HAL_RCC_OscConfig+0x24a>
 8001a36:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a38:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a3c:	f023 0301 	bic.w	r3, r3, #1
 8001a40:	6223      	str	r3, [r4, #32]
 8001a42:	6a23      	ldr	r3, [r4, #32]
 8001a44:	f023 0304 	bic.w	r3, r3, #4
 8001a48:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001a4a:	f7ff f8ab 	bl	8000ba4 <HAL_GetTick>
 8001a4e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a50:	6a23      	ldr	r3, [r4, #32]
 8001a52:	0798      	lsls	r0, r3, #30
 8001a54:	d5d3      	bpl.n	80019fe <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a56:	f7ff f8a5 	bl	8000ba4 <HAL_GetTick>
 8001a5a:	1b80      	subs	r0, r0, r6
 8001a5c:	4540      	cmp	r0, r8
 8001a5e:	d9f7      	bls.n	8001a50 <HAL_RCC_OscConfig+0x238>
 8001a60:	e71c      	b.n	800189c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a62:	2b05      	cmp	r3, #5
 8001a64:	6a23      	ldr	r3, [r4, #32]
 8001a66:	d103      	bne.n	8001a70 <HAL_RCC_OscConfig+0x258>
 8001a68:	f043 0304 	orr.w	r3, r3, #4
 8001a6c:	6223      	str	r3, [r4, #32]
 8001a6e:	e7ba      	b.n	80019e6 <HAL_RCC_OscConfig+0x1ce>
 8001a70:	f023 0301 	bic.w	r3, r3, #1
 8001a74:	6223      	str	r3, [r4, #32]
 8001a76:	6a23      	ldr	r3, [r4, #32]
 8001a78:	f023 0304 	bic.w	r3, r3, #4
 8001a7c:	e7b6      	b.n	80019ec <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a7e:	f7ff f891 	bl	8000ba4 <HAL_GetTick>
 8001a82:	eba0 0008 	sub.w	r0, r0, r8
 8001a86:	42b0      	cmp	r0, r6
 8001a88:	d9b6      	bls.n	80019f8 <HAL_RCC_OscConfig+0x1e0>
 8001a8a:	e707      	b.n	800189c <HAL_RCC_OscConfig+0x84>
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	42420000 	.word	0x42420000
 8001a94:	42420480 	.word	0x42420480
 8001a98:	20000008 	.word	0x20000008
 8001a9c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aa0:	4b2a      	ldr	r3, [pc, #168]	; (8001b4c <HAL_RCC_OscConfig+0x334>)
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	461c      	mov	r4, r3
 8001aa6:	f002 020c 	and.w	r2, r2, #12
 8001aaa:	2a08      	cmp	r2, #8
 8001aac:	d03d      	beq.n	8001b2a <HAL_RCC_OscConfig+0x312>
 8001aae:	2300      	movs	r3, #0
 8001ab0:	4e27      	ldr	r6, [pc, #156]	; (8001b50 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ab2:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001ab4:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ab6:	d12b      	bne.n	8001b10 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8001ab8:	f7ff f874 	bl	8000ba4 <HAL_GetTick>
 8001abc:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001abe:	6823      	ldr	r3, [r4, #0]
 8001ac0:	0199      	lsls	r1, r3, #6
 8001ac2:	d41f      	bmi.n	8001b04 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ac4:	6a2b      	ldr	r3, [r5, #32]
 8001ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aca:	d105      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001acc:	6862      	ldr	r2, [r4, #4]
 8001ace:	68a9      	ldr	r1, [r5, #8]
 8001ad0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ad8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001ada:	6862      	ldr	r2, [r4, #4]
 8001adc:	430b      	orrs	r3, r1
 8001ade:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001aea:	f7ff f85b 	bl	8000ba4 <HAL_GetTick>
 8001aee:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001af0:	6823      	ldr	r3, [r4, #0]
 8001af2:	019a      	lsls	r2, r3, #6
 8001af4:	f53f aea8 	bmi.w	8001848 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af8:	f7ff f854 	bl	8000ba4 <HAL_GetTick>
 8001afc:	1b40      	subs	r0, r0, r5
 8001afe:	2802      	cmp	r0, #2
 8001b00:	d9f6      	bls.n	8001af0 <HAL_RCC_OscConfig+0x2d8>
 8001b02:	e6cb      	b.n	800189c <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b04:	f7ff f84e 	bl	8000ba4 <HAL_GetTick>
 8001b08:	1bc0      	subs	r0, r0, r7
 8001b0a:	2802      	cmp	r0, #2
 8001b0c:	d9d7      	bls.n	8001abe <HAL_RCC_OscConfig+0x2a6>
 8001b0e:	e6c5      	b.n	800189c <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001b10:	f7ff f848 	bl	8000ba4 <HAL_GetTick>
 8001b14:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b16:	6823      	ldr	r3, [r4, #0]
 8001b18:	019b      	lsls	r3, r3, #6
 8001b1a:	f57f ae95 	bpl.w	8001848 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b1e:	f7ff f841 	bl	8000ba4 <HAL_GetTick>
 8001b22:	1b40      	subs	r0, r0, r5
 8001b24:	2802      	cmp	r0, #2
 8001b26:	d9f6      	bls.n	8001b16 <HAL_RCC_OscConfig+0x2fe>
 8001b28:	e6b8      	b.n	800189c <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b2a:	2801      	cmp	r0, #1
 8001b2c:	f43f aeb7 	beq.w	800189e <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8001b30:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b32:	6a2b      	ldr	r3, [r5, #32]
 8001b34:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	f47f ae71 	bne.w	8001820 <HAL_RCC_OscConfig+0x8>
 8001b3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b40:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8001b44:	1ac0      	subs	r0, r0, r3
 8001b46:	bf18      	it	ne
 8001b48:	2001      	movne	r0, #1
 8001b4a:	e6a8      	b.n	800189e <HAL_RCC_OscConfig+0x86>
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	42420060 	.word	0x42420060

08001b54 <HAL_RCC_GetSysClockFreq>:
{
 8001b54:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b56:	4b19      	ldr	r3, [pc, #100]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001b58:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b5a:	ac02      	add	r4, sp, #8
 8001b5c:	f103 0510 	add.w	r5, r3, #16
 8001b60:	4622      	mov	r2, r4
 8001b62:	6818      	ldr	r0, [r3, #0]
 8001b64:	6859      	ldr	r1, [r3, #4]
 8001b66:	3308      	adds	r3, #8
 8001b68:	c203      	stmia	r2!, {r0, r1}
 8001b6a:	42ab      	cmp	r3, r5
 8001b6c:	4614      	mov	r4, r2
 8001b6e:	d1f7      	bne.n	8001b60 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b70:	2301      	movs	r3, #1
 8001b72:	f88d 3004 	strb.w	r3, [sp, #4]
 8001b76:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001b78:	4911      	ldr	r1, [pc, #68]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b7a:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8001b7e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001b80:	f003 020c 	and.w	r2, r3, #12
 8001b84:	2a08      	cmp	r2, #8
 8001b86:	d117      	bne.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b88:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001b8c:	a806      	add	r0, sp, #24
 8001b8e:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b90:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b92:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b96:	d50c      	bpl.n	8001bb2 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b98:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b9a:	480a      	ldr	r0, [pc, #40]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b9c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ba0:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ba2:	aa06      	add	r2, sp, #24
 8001ba4:	4413      	add	r3, r2
 8001ba6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001baa:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001bae:	b007      	add	sp, #28
 8001bb0:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bb2:	4805      	ldr	r0, [pc, #20]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0x74>)
 8001bb4:	4350      	muls	r0, r2
 8001bb6:	e7fa      	b.n	8001bae <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001bb8:	4802      	ldr	r0, [pc, #8]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8001bba:	e7f8      	b.n	8001bae <HAL_RCC_GetSysClockFreq+0x5a>
 8001bbc:	08004b40 	.word	0x08004b40
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	007a1200 	.word	0x007a1200
 8001bc8:	003d0900 	.word	0x003d0900

08001bcc <HAL_RCC_ClockConfig>:
{
 8001bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bd0:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001bd2:	4604      	mov	r4, r0
 8001bd4:	b910      	cbnz	r0, 8001bdc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001bd6:	2001      	movs	r0, #1
 8001bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bdc:	4a45      	ldr	r2, [pc, #276]	; (8001cf4 <HAL_RCC_ClockConfig+0x128>)
 8001bde:	6813      	ldr	r3, [r2, #0]
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	428b      	cmp	r3, r1
 8001be6:	d329      	bcc.n	8001c3c <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001be8:	6821      	ldr	r1, [r4, #0]
 8001bea:	078e      	lsls	r6, r1, #30
 8001bec:	d431      	bmi.n	8001c52 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bee:	07ca      	lsls	r2, r1, #31
 8001bf0:	d444      	bmi.n	8001c7c <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bf2:	4a40      	ldr	r2, [pc, #256]	; (8001cf4 <HAL_RCC_ClockConfig+0x128>)
 8001bf4:	6813      	ldr	r3, [r2, #0]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	429d      	cmp	r5, r3
 8001bfc:	d367      	bcc.n	8001cce <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bfe:	6822      	ldr	r2, [r4, #0]
 8001c00:	4d3d      	ldr	r5, [pc, #244]	; (8001cf8 <HAL_RCC_ClockConfig+0x12c>)
 8001c02:	f012 0f04 	tst.w	r2, #4
 8001c06:	d16e      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c08:	0713      	lsls	r3, r2, #28
 8001c0a:	d506      	bpl.n	8001c1a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c0c:	686b      	ldr	r3, [r5, #4]
 8001c0e:	6922      	ldr	r2, [r4, #16]
 8001c10:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001c14:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001c18:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c1a:	f7ff ff9b 	bl	8001b54 <HAL_RCC_GetSysClockFreq>
 8001c1e:	686b      	ldr	r3, [r5, #4]
 8001c20:	4a36      	ldr	r2, [pc, #216]	; (8001cfc <HAL_RCC_ClockConfig+0x130>)
 8001c22:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001c26:	5cd3      	ldrb	r3, [r2, r3]
 8001c28:	40d8      	lsrs	r0, r3
 8001c2a:	4b35      	ldr	r3, [pc, #212]	; (8001d00 <HAL_RCC_ClockConfig+0x134>)
 8001c2c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001c2e:	4b35      	ldr	r3, [pc, #212]	; (8001d04 <HAL_RCC_ClockConfig+0x138>)
 8001c30:	6818      	ldr	r0, [r3, #0]
 8001c32:	f7fe ff75 	bl	8000b20 <HAL_InitTick>
  return HAL_OK;
 8001c36:	2000      	movs	r0, #0
 8001c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c3c:	6813      	ldr	r3, [r2, #0]
 8001c3e:	f023 0307 	bic.w	r3, r3, #7
 8001c42:	430b      	orrs	r3, r1
 8001c44:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c46:	6813      	ldr	r3, [r2, #0]
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	4299      	cmp	r1, r3
 8001c4e:	d1c2      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0xa>
 8001c50:	e7ca      	b.n	8001be8 <HAL_RCC_ClockConfig+0x1c>
 8001c52:	4b29      	ldr	r3, [pc, #164]	; (8001cf8 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c54:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c58:	bf1e      	ittt	ne
 8001c5a:	685a      	ldrne	r2, [r3, #4]
 8001c5c:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001c60:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c62:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c64:	bf42      	ittt	mi
 8001c66:	685a      	ldrmi	r2, [r3, #4]
 8001c68:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001c6c:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c6e:	685a      	ldr	r2, [r3, #4]
 8001c70:	68a0      	ldr	r0, [r4, #8]
 8001c72:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001c76:	4302      	orrs	r2, r0
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	e7b8      	b.n	8001bee <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c7c:	6862      	ldr	r2, [r4, #4]
 8001c7e:	4e1e      	ldr	r6, [pc, #120]	; (8001cf8 <HAL_RCC_ClockConfig+0x12c>)
 8001c80:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c82:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c84:	d11b      	bne.n	8001cbe <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c86:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c8a:	d0a4      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c8c:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c8e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c92:	f023 0303 	bic.w	r3, r3, #3
 8001c96:	4313      	orrs	r3, r2
 8001c98:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001c9a:	f7fe ff83 	bl	8000ba4 <HAL_GetTick>
 8001c9e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ca0:	6873      	ldr	r3, [r6, #4]
 8001ca2:	6862      	ldr	r2, [r4, #4]
 8001ca4:	f003 030c 	and.w	r3, r3, #12
 8001ca8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001cac:	d0a1      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cae:	f7fe ff79 	bl	8000ba4 <HAL_GetTick>
 8001cb2:	1bc0      	subs	r0, r0, r7
 8001cb4:	4540      	cmp	r0, r8
 8001cb6:	d9f3      	bls.n	8001ca0 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8001cb8:	2003      	movs	r0, #3
}
 8001cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cbe:	2a02      	cmp	r2, #2
 8001cc0:	d102      	bne.n	8001cc8 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cc2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001cc6:	e7e0      	b.n	8001c8a <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc8:	f013 0f02 	tst.w	r3, #2
 8001ccc:	e7dd      	b.n	8001c8a <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cce:	6813      	ldr	r3, [r2, #0]
 8001cd0:	f023 0307 	bic.w	r3, r3, #7
 8001cd4:	432b      	orrs	r3, r5
 8001cd6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd8:	6813      	ldr	r3, [r2, #0]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	429d      	cmp	r5, r3
 8001ce0:	f47f af79 	bne.w	8001bd6 <HAL_RCC_ClockConfig+0xa>
 8001ce4:	e78b      	b.n	8001bfe <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ce6:	686b      	ldr	r3, [r5, #4]
 8001ce8:	68e1      	ldr	r1, [r4, #12]
 8001cea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001cee:	430b      	orrs	r3, r1
 8001cf0:	606b      	str	r3, [r5, #4]
 8001cf2:	e789      	b.n	8001c08 <HAL_RCC_ClockConfig+0x3c>
 8001cf4:	40022000 	.word	0x40022000
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	08004d44 	.word	0x08004d44
 8001d00:	20000008 	.word	0x20000008
 8001d04:	20000004 	.word	0x20000004

08001d08 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d08:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <HAL_RCC_GetPCLK1Freq+0x14>)
 8001d0a:	4a05      	ldr	r2, [pc, #20]	; (8001d20 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001d12:	5cd3      	ldrb	r3, [r2, r3]
 8001d14:	4a03      	ldr	r2, [pc, #12]	; (8001d24 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001d16:	6810      	ldr	r0, [r2, #0]
}
 8001d18:	40d8      	lsrs	r0, r3
 8001d1a:	4770      	bx	lr
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	08004d54 	.word	0x08004d54
 8001d24:	20000008 	.word	0x20000008

08001d28 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d28:	4b04      	ldr	r3, [pc, #16]	; (8001d3c <HAL_RCC_GetPCLK2Freq+0x14>)
 8001d2a:	4a05      	ldr	r2, [pc, #20]	; (8001d40 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001d32:	5cd3      	ldrb	r3, [r2, r3]
 8001d34:	4a03      	ldr	r2, [pc, #12]	; (8001d44 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001d36:	6810      	ldr	r0, [r2, #0]
}
 8001d38:	40d8      	lsrs	r0, r3
 8001d3a:	4770      	bx	lr
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	08004d54 	.word	0x08004d54
 8001d44:	20000008 	.word	0x20000008

08001d48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d48:	b538      	push	{r3, r4, r5, lr}
 8001d4a:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d4c:	6803      	ldr	r3, [r0, #0]
 8001d4e:	68c1      	ldr	r1, [r0, #12]
 8001d50:	691a      	ldr	r2, [r3, #16]
 8001d52:	2419      	movs	r4, #25
 8001d54:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001d5c:	6882      	ldr	r2, [r0, #8]
 8001d5e:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8001d60:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001d62:	4302      	orrs	r2, r0
 8001d64:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001d66:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8001d6a:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001d6e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8001d70:	430a      	orrs	r2, r1
 8001d72:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d74:	695a      	ldr	r2, [r3, #20]
 8001d76:	69a9      	ldr	r1, [r5, #24]
 8001d78:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001d80:	4a0d      	ldr	r2, [pc, #52]	; (8001db8 <UART_SetConfig+0x70>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d114      	bne.n	8001db0 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001d86:	f7ff ffcf 	bl	8001d28 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d8a:	4360      	muls	r0, r4
 8001d8c:	686c      	ldr	r4, [r5, #4]
 8001d8e:	2264      	movs	r2, #100	; 0x64
 8001d90:	00a4      	lsls	r4, r4, #2
 8001d92:	fbb0 f0f4 	udiv	r0, r0, r4
 8001d96:	fbb0 f4f2 	udiv	r4, r0, r2
 8001d9a:	fb02 0314 	mls	r3, r2, r4, r0
 8001d9e:	011b      	lsls	r3, r3, #4
 8001da0:	3332      	adds	r3, #50	; 0x32
 8001da2:	fbb3 f3f2 	udiv	r3, r3, r2
 8001da6:	6829      	ldr	r1, [r5, #0]
 8001da8:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8001dac:	608b      	str	r3, [r1, #8]
 8001dae:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8001db0:	f7ff ffaa 	bl	8001d08 <HAL_RCC_GetPCLK1Freq>
 8001db4:	e7e9      	b.n	8001d8a <UART_SetConfig+0x42>
 8001db6:	bf00      	nop
 8001db8:	40013800 	.word	0x40013800

08001dbc <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dbe:	4604      	mov	r4, r0
 8001dc0:	460e      	mov	r6, r1
 8001dc2:	4617      	mov	r7, r2
 8001dc4:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dc6:	6821      	ldr	r1, [r4, #0]
 8001dc8:	680b      	ldr	r3, [r1, #0]
 8001dca:	ea36 0303 	bics.w	r3, r6, r3
 8001dce:	d101      	bne.n	8001dd4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001dd0:	2000      	movs	r0, #0
}
 8001dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001dd4:	1c6b      	adds	r3, r5, #1
 8001dd6:	d0f7      	beq.n	8001dc8 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001dd8:	b995      	cbnz	r5, 8001e00 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001dda:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8001ddc:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001dde:	68da      	ldr	r2, [r3, #12]
 8001de0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001de4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001de6:	695a      	ldr	r2, [r3, #20]
 8001de8:	f022 0201 	bic.w	r2, r2, #1
 8001dec:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001dee:	2320      	movs	r3, #32
 8001df0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001df4:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e00:	f7fe fed0 	bl	8000ba4 <HAL_GetTick>
 8001e04:	1bc0      	subs	r0, r0, r7
 8001e06:	4285      	cmp	r5, r0
 8001e08:	d2dd      	bcs.n	8001dc6 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001e0a:	e7e6      	b.n	8001dda <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001e0c <HAL_UART_Init>:
{
 8001e0c:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001e0e:	4604      	mov	r4, r0
 8001e10:	b340      	cbz	r0, 8001e64 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001e12:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001e16:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e1a:	b91b      	cbnz	r3, 8001e24 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001e1c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001e20:	f000 fd1c 	bl	800285c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001e24:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001e26:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001e28:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001e2c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001e2e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001e30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e34:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001e36:	f7ff ff87 	bl	8001d48 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e3a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e3c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e3e:	691a      	ldr	r2, [r3, #16]
 8001e40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e46:	695a      	ldr	r2, [r3, #20]
 8001e48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e4c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001e4e:	68da      	ldr	r2, [r3, #12]
 8001e50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e54:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001e56:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e58:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001e5a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001e5e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001e62:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001e64:	2001      	movs	r0, #1
}
 8001e66:	bd10      	pop	{r4, pc}

08001e68 <HAL_UART_Transmit>:
{
 8001e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e6c:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001e6e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8001e72:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8001e74:	2b20      	cmp	r3, #32
{
 8001e76:	460d      	mov	r5, r1
 8001e78:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001e7a:	d14e      	bne.n	8001f1a <HAL_UART_Transmit+0xb2>
    if ((pData == NULL) || (Size == 0U))
 8001e7c:	2900      	cmp	r1, #0
 8001e7e:	d049      	beq.n	8001f14 <HAL_UART_Transmit+0xac>
 8001e80:	2a00      	cmp	r2, #0
 8001e82:	d047      	beq.n	8001f14 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8001e84:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d046      	beq.n	8001f1a <HAL_UART_Transmit+0xb2>
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e92:	2300      	movs	r3, #0
 8001e94:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e96:	2321      	movs	r3, #33	; 0x21
 8001e98:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001e9c:	f7fe fe82 	bl	8000ba4 <HAL_GetTick>
 8001ea0:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8001ea2:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ea6:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001eaa:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	b96b      	cbnz	r3, 8001ecc <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001eb0:	463b      	mov	r3, r7
 8001eb2:	4632      	mov	r2, r6
 8001eb4:	2140      	movs	r1, #64	; 0x40
 8001eb6:	4620      	mov	r0, r4
 8001eb8:	f7ff ff80 	bl	8001dbc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001ebc:	b9a8      	cbnz	r0, 8001eea <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8001ebe:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001ec0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8001ec4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001ecc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ece:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001ed6:	68a3      	ldr	r3, [r4, #8]
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ed8:	2180      	movs	r1, #128	; 0x80
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001eda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ede:	4620      	mov	r0, r4
 8001ee0:	463b      	mov	r3, r7
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001ee2:	d10e      	bne.n	8001f02 <HAL_UART_Transmit+0x9a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ee4:	f7ff ff6a 	bl	8001dbc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001ee8:	b110      	cbz	r0, 8001ef0 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8001eea:	2003      	movs	r0, #3
 8001eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001ef0:	882b      	ldrh	r3, [r5, #0]
 8001ef2:	6822      	ldr	r2, [r4, #0]
 8001ef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ef8:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001efa:	6923      	ldr	r3, [r4, #16]
 8001efc:	b943      	cbnz	r3, 8001f10 <HAL_UART_Transmit+0xa8>
          pData += 2U;
 8001efe:	3502      	adds	r5, #2
 8001f00:	e7d3      	b.n	8001eaa <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f02:	f7ff ff5b 	bl	8001dbc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001f06:	2800      	cmp	r0, #0
 8001f08:	d1ef      	bne.n	8001eea <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001f0a:	6823      	ldr	r3, [r4, #0]
 8001f0c:	782a      	ldrb	r2, [r5, #0]
 8001f0e:	605a      	str	r2, [r3, #4]
 8001f10:	3501      	adds	r5, #1
 8001f12:	e7ca      	b.n	8001eaa <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001f14:	2001      	movs	r0, #1
 8001f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001f1a:	2002      	movs	r0, #2
}
 8001f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001f20 <Read_time_data>:


void Read_time_data()
{
	char readBuf[7] = {0,};
	uint32_t status = HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT, (uint8_t*)readBuf, 7, 1000);
 8001f20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
{
 8001f24:	b530      	push	{r4, r5, lr}
 8001f26:	b08f      	sub	sp, #60	; 0x3c
	char readBuf[7] = {0,};
 8001f28:	2400      	movs	r4, #0
	uint32_t status = HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT, (uint8_t*)readBuf, 7, 1000);
 8001f2a:	9202      	str	r2, [sp, #8]
 8001f2c:	2207      	movs	r2, #7
	char readBuf[7] = {0,};
 8001f2e:	ab04      	add	r3, sp, #16
	uint32_t status = HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT, (uint8_t*)readBuf, 7, 1000);
 8001f30:	9201      	str	r2, [sp, #4]
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	4622      	mov	r2, r4
 8001f36:	2301      	movs	r3, #1
 8001f38:	21d0      	movs	r1, #208	; 0xd0
 8001f3a:	4819      	ldr	r0, [pc, #100]	; (8001fa0 <Read_time_data+0x80>)
	char readBuf[7] = {0,};
 8001f3c:	9404      	str	r4, [sp, #16]
 8001f3e:	f8cd 4013 	str.w	r4, [sp, #19]
	uint32_t status = HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT, (uint8_t*)readBuf, 7, 1000);
 8001f42:	f7ff faa3 	bl	800148c <HAL_I2C_Mem_Read>

	if(status != HAL_OK)
 8001f46:	4605      	mov	r5, r0
 8001f48:	b160      	cbz	r0, 8001f64 <Read_time_data+0x44>
	{
		char str[32] = {0,};
 8001f4a:	2220      	movs	r2, #32
 8001f4c:	4621      	mov	r1, r4
 8001f4e:	a806      	add	r0, sp, #24
 8001f50:	f000 fd5e 	bl	8002a10 <memset>
		snprintf(str, 32, "HAL_I2C_Mem_Read");
 8001f54:	4913      	ldr	r1, [pc, #76]	; (8001fa4 <Read_time_data+0x84>)
 8001f56:	a806      	add	r0, sp, #24
 8001f58:	f001 f9f8 	bl	800334c <strcpy>
		I2C_Error(str, status);
 8001f5c:	4629      	mov	r1, r5
 8001f5e:	a806      	add	r0, sp, #24
 8001f60:	f000 fa5a 	bl	8002418 <I2C_Error>
	}

	sec = readBuf[0];
 8001f64:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8001f68:	4b0f      	ldr	r3, [pc, #60]	; (8001fa8 <Read_time_data+0x88>)
 8001f6a:	701a      	strb	r2, [r3, #0]
	min = readBuf[1];
 8001f6c:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8001f70:	4b0e      	ldr	r3, [pc, #56]	; (8001fac <Read_time_data+0x8c>)
 8001f72:	701a      	strb	r2, [r3, #0]
	hour = readBuf[2];
 8001f74:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8001f78:	4b0d      	ldr	r3, [pc, #52]	; (8001fb0 <Read_time_data+0x90>)
 8001f7a:	701a      	strb	r2, [r3, #0]
	day = readBuf[3];
 8001f7c:	f89d 2013 	ldrb.w	r2, [sp, #19]
 8001f80:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <Read_time_data+0x94>)
 8001f82:	701a      	strb	r2, [r3, #0]
	date = readBuf[4];
 8001f84:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8001f88:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <Read_time_data+0x98>)
 8001f8a:	701a      	strb	r2, [r3, #0]
	month = readBuf[5];
 8001f8c:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8001f90:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <Read_time_data+0x9c>)
 8001f92:	701a      	strb	r2, [r3, #0]
	year = readBuf[6];
 8001f94:	f89d 2016 	ldrb.w	r2, [sp, #22]
 8001f98:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <Read_time_data+0xa0>)
 8001f9a:	701a      	strb	r2, [r3, #0]
}
 8001f9c:	b00f      	add	sp, #60	; 0x3c
 8001f9e:	bd30      	pop	{r4, r5, pc}
 8001fa0:	20000210 	.word	0x20000210
 8001fa4:	08004b50 	.word	0x08004b50
 8001fa8:	200001fd 	.word	0x200001fd
 8001fac:	200001fb 	.word	0x200001fb
 8001fb0:	200001fa 	.word	0x200001fa
 8001fb4:	200001f9 	.word	0x200001f9
 8001fb8:	200001f8 	.word	0x200001f8
 8001fbc:	200001fc 	.word	0x200001fc
 8001fc0:	200001fe 	.word	0x200001fe

08001fc4 <bcd2dec>:

///////////////////////////////

uint8_t bcd2dec(uint8_t bcd)
{
    return ((bcd / 16) * 10) + (bcd % 16);
 8001fc4:	0903      	lsrs	r3, r0, #4
 8001fc6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001fca:	f000 000f 	and.w	r0, r0, #15
 8001fce:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8001fd2:	b2c0      	uxtb	r0, r0
 8001fd4:	4770      	bx	lr
	...

08001fd8 <readSeconds>:

/////////////////////////////

uint8_t readSeconds()
{
	return bcd2dec(sec);
 8001fd8:	4b01      	ldr	r3, [pc, #4]	; (8001fe0 <readSeconds+0x8>)
 8001fda:	7818      	ldrb	r0, [r3, #0]
 8001fdc:	f7ff bff2 	b.w	8001fc4 <bcd2dec>
 8001fe0:	200001fd 	.word	0x200001fd

08001fe4 <readMinutes>:
}

uint8_t readMinutes()
{
	return bcd2dec(min);
 8001fe4:	4b01      	ldr	r3, [pc, #4]	; (8001fec <readMinutes+0x8>)
 8001fe6:	7818      	ldrb	r0, [r3, #0]
 8001fe8:	f7ff bfec 	b.w	8001fc4 <bcd2dec>
 8001fec:	200001fb 	.word	0x200001fb

08001ff0 <readHours>:
}

uint8_t readHours()
{
	return bcd2dec(hour);
 8001ff0:	4b01      	ldr	r3, [pc, #4]	; (8001ff8 <readHours+0x8>)
 8001ff2:	7818      	ldrb	r0, [r3, #0]
 8001ff4:	f7ff bfe6 	b.w	8001fc4 <bcd2dec>
 8001ff8:	200001fa 	.word	0x200001fa

08001ffc <readDate>:
}

uint8_t readDate()
{
	return bcd2dec(date);
 8001ffc:	4b01      	ldr	r3, [pc, #4]	; (8002004 <readDate+0x8>)
 8001ffe:	7818      	ldrb	r0, [r3, #0]
 8002000:	f7ff bfe0 	b.w	8001fc4 <bcd2dec>
 8002004:	200001f8 	.word	0x200001f8

08002008 <readMonth>:
}

uint8_t readMonth()
{
	return bcd2dec(month);
 8002008:	4b01      	ldr	r3, [pc, #4]	; (8002010 <readMonth+0x8>)
 800200a:	7818      	ldrb	r0, [r3, #0]
 800200c:	f7ff bfda 	b.w	8001fc4 <bcd2dec>
 8002010:	200001fc 	.word	0x200001fc

08002014 <readYear>:
}

uint8_t readYear()
{
	return bcd2dec(year);
 8002014:	4b01      	ldr	r3, [pc, #4]	; (800201c <readYear+0x8>)
 8002016:	7818      	ldrb	r0, [r3, #0]
 8002018:	f7ff bfd4 	b.w	8001fc4 <bcd2dec>
 800201c:	200001fe 	.word	0x200001fe

08002020 <readDay>:
}

uint8_t readDay()
{
	return bcd2dec(day);
 8002020:	4b01      	ldr	r3, [pc, #4]	; (8002028 <readDay+0x8>)
 8002022:	7818      	ldrb	r0, [r3, #0]
 8002024:	f7ff bfce 	b.w	8001fc4 <bcd2dec>
 8002028:	200001f9 	.word	0x200001f9

0800202c <Read_temp_ds3213>:
}

/////////////////////////////////////

float Read_temp_ds3213()
{
 800202c:	b530      	push	{r4, r5, lr}
	char readBuf[2] = {0,};
	uint32_t status = HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDR, 0x11, I2C_MEMADD_SIZE_8BIT, (uint8_t*)readBuf, 2, 1000);
 800202e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	char readBuf[2] = {0,};
 8002032:	2500      	movs	r5, #0
{
 8002034:	b08f      	sub	sp, #60	; 0x3c
	char readBuf[2] = {0,};
 8002036:	ab0e      	add	r3, sp, #56	; 0x38
 8002038:	f823 5d24 	strh.w	r5, [r3, #-36]!
	uint32_t status = HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDR, 0x11, I2C_MEMADD_SIZE_8BIT, (uint8_t*)readBuf, 2, 1000);
 800203c:	9202      	str	r2, [sp, #8]
 800203e:	2202      	movs	r2, #2
 8002040:	9300      	str	r3, [sp, #0]
 8002042:	9201      	str	r2, [sp, #4]
 8002044:	2301      	movs	r3, #1
 8002046:	2211      	movs	r2, #17
 8002048:	21d0      	movs	r1, #208	; 0xd0
 800204a:	4810      	ldr	r0, [pc, #64]	; (800208c <Read_temp_ds3213+0x60>)
 800204c:	f7ff fa1e 	bl	800148c <HAL_I2C_Mem_Read>

	if(status != HAL_OK)
 8002050:	4604      	mov	r4, r0
 8002052:	b160      	cbz	r0, 800206e <Read_temp_ds3213+0x42>
	{
		char str[32] = {0,};
 8002054:	2220      	movs	r2, #32
 8002056:	4629      	mov	r1, r5
 8002058:	a806      	add	r0, sp, #24
 800205a:	f000 fcd9 	bl	8002a10 <memset>
		snprintf(str, 32, "HAL_I2C_Mem_Read");
 800205e:	490c      	ldr	r1, [pc, #48]	; (8002090 <Read_temp_ds3213+0x64>)
 8002060:	a806      	add	r0, sp, #24
 8002062:	f001 f973 	bl	800334c <strcpy>
		I2C_Error(str, status);
 8002066:	4621      	mov	r1, r4
 8002068:	a806      	add	r0, sp, #24
 800206a:	f000 f9d5 	bl	8002418 <I2C_Error>
	}

	return ((((uint8_t)readBuf[0] << 8) | (uint8_t)readBuf[1]) >> 6) / 4.0;
 800206e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 8002072:	ba40      	rev16	r0, r0
 8002074:	f3c0 1089 	ubfx	r0, r0, #6, #10
 8002078:	f7fe f9c4 	bl	8000404 <__aeabi_i2d>
 800207c:	2200      	movs	r2, #0
 800207e:	4b05      	ldr	r3, [pc, #20]	; (8002094 <Read_temp_ds3213+0x68>)
 8002080:	f7fe fa26 	bl	80004d0 <__aeabi_dmul>
 8002084:	f7fe fcfc 	bl	8000a80 <__aeabi_d2f>
}
 8002088:	b00f      	add	sp, #60	; 0x3c
 800208a:	bd30      	pop	{r4, r5, pc}
 800208c:	20000210 	.word	0x20000210
 8002090:	08004b50 	.word	0x08004b50
 8002094:	3fd00000 	.word	0x3fd00000

08002098 <setOutput>:

//////////////////////////////////////////

void setOutput(uint8_t enable)
{
 8002098:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t reg = 0;
	uint32_t status = HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDR, REG_CON, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&reg, 1, 1000);
 800209a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	uint8_t reg = 0;
 800209e:	2600      	movs	r6, #0
{
 80020a0:	b08f      	sub	sp, #60	; 0x3c
	uint8_t reg = 0;
 80020a2:	ac0e      	add	r4, sp, #56	; 0x38
 80020a4:	f804 6d21 	strb.w	r6, [r4, #-33]!
	uint32_t status = HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDR, REG_CON, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&reg, 1, 1000);
 80020a8:	9302      	str	r3, [sp, #8]
 80020aa:	2301      	movs	r3, #1
{
 80020ac:	4607      	mov	r7, r0
	uint32_t status = HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDR, REG_CON, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&reg, 1, 1000);
 80020ae:	9301      	str	r3, [sp, #4]
 80020b0:	9400      	str	r4, [sp, #0]
 80020b2:	220e      	movs	r2, #14
 80020b4:	21d0      	movs	r1, #208	; 0xd0
 80020b6:	481b      	ldr	r0, [pc, #108]	; (8002124 <setOutput+0x8c>)
 80020b8:	f7ff f9e8 	bl	800148c <HAL_I2C_Mem_Read>

	if(status != HAL_OK)
 80020bc:	4605      	mov	r5, r0
 80020be:	b160      	cbz	r0, 80020da <setOutput+0x42>
	{
		char str[32] = {0,};
 80020c0:	2220      	movs	r2, #32
 80020c2:	4631      	mov	r1, r6
 80020c4:	a806      	add	r0, sp, #24
 80020c6:	f000 fca3 	bl	8002a10 <memset>
		snprintf(str, 32, "HAL_I2C_Mem_Read_sOt");
 80020ca:	4917      	ldr	r1, [pc, #92]	; (8002128 <setOutput+0x90>)
 80020cc:	a806      	add	r0, sp, #24
 80020ce:	f001 f93d 	bl	800334c <strcpy>
		I2C_Error(str, status);
 80020d2:	4629      	mov	r1, r5
 80020d4:	a806      	add	r0, sp, #24
 80020d6:	f000 f99f 	bl	8002418 <I2C_Error>
	}

	reg &= ~(1 << 2);
	reg |= (enable << 2);

	status = HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDR, REG_CON, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&reg, 1, 1000);
 80020da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020de:	9302      	str	r3, [sp, #8]
 80020e0:	2301      	movs	r3, #1
	reg &= ~(1 << 2);
 80020e2:	f89d 0017 	ldrb.w	r0, [sp, #23]
	status = HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDR, REG_CON, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&reg, 1, 1000);
 80020e6:	9400      	str	r4, [sp, #0]
	reg &= ~(1 << 2);
 80020e8:	f020 0004 	bic.w	r0, r0, #4
	reg |= (enable << 2);
 80020ec:	ea40 0087 	orr.w	r0, r0, r7, lsl #2
 80020f0:	f88d 0017 	strb.w	r0, [sp, #23]
	status = HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDR, REG_CON, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&reg, 1, 1000);
 80020f4:	9301      	str	r3, [sp, #4]
 80020f6:	220e      	movs	r2, #14
 80020f8:	21d0      	movs	r1, #208	; 0xd0
 80020fa:	480a      	ldr	r0, [pc, #40]	; (8002124 <setOutput+0x8c>)
 80020fc:	f7ff f936 	bl	800136c <HAL_I2C_Mem_Write>

	if(status != HAL_OK)
 8002100:	4604      	mov	r4, r0
 8002102:	b160      	cbz	r0, 800211e <setOutput+0x86>
	{
		char str[32] = {0,};
 8002104:	2220      	movs	r2, #32
 8002106:	2100      	movs	r1, #0
 8002108:	a806      	add	r0, sp, #24
 800210a:	f000 fc81 	bl	8002a10 <memset>
		snprintf(str, 32, "HAL_I2C_Mem_Wr_sOt");
 800210e:	4907      	ldr	r1, [pc, #28]	; (800212c <setOutput+0x94>)
 8002110:	a806      	add	r0, sp, #24
 8002112:	f001 f91b 	bl	800334c <strcpy>
		I2C_Error(str, status);
 8002116:	4621      	mov	r1, r4
 8002118:	a806      	add	r0, sp, #24
 800211a:	f000 f97d 	bl	8002418 <I2C_Error>
	}
}
 800211e:	b00f      	add	sp, #60	; 0x3c
 8002120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002122:	bf00      	nop
 8002124:	20000210 	.word	0x20000210
 8002128:	08004bd5 	.word	0x08004bd5
 800212c:	08004bea 	.word	0x08004bea

08002130 <setSQWRate>:

void setSQWRate(uint8_t rate)
{
 8002130:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t reg = 0;
	uint32_t status = HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDR, REG_CON, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&reg, 1, 1000);
 8002132:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	uint8_t reg = 0;
 8002136:	2600      	movs	r6, #0
{
 8002138:	b08f      	sub	sp, #60	; 0x3c
	uint8_t reg = 0;
 800213a:	ac0e      	add	r4, sp, #56	; 0x38
 800213c:	f804 6d21 	strb.w	r6, [r4, #-33]!
	uint32_t status = HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDR, REG_CON, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&reg, 1, 1000);
 8002140:	9302      	str	r3, [sp, #8]
 8002142:	2301      	movs	r3, #1
{
 8002144:	4607      	mov	r7, r0
	uint32_t status = HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDR, REG_CON, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&reg, 1, 1000);
 8002146:	9301      	str	r3, [sp, #4]
 8002148:	9400      	str	r4, [sp, #0]
 800214a:	220e      	movs	r2, #14
 800214c:	21d0      	movs	r1, #208	; 0xd0
 800214e:	481b      	ldr	r0, [pc, #108]	; (80021bc <setSQWRate+0x8c>)
 8002150:	f7ff f99c 	bl	800148c <HAL_I2C_Mem_Read>

	if(status != HAL_OK)
 8002154:	4605      	mov	r5, r0
 8002156:	b160      	cbz	r0, 8002172 <setSQWRate+0x42>
	{
		char str[32] = {0,};
 8002158:	2220      	movs	r2, #32
 800215a:	4631      	mov	r1, r6
 800215c:	a806      	add	r0, sp, #24
 800215e:	f000 fc57 	bl	8002a10 <memset>
		snprintf(str, 32, "HAL_I2C_Mem_Read_SQW");
 8002162:	4917      	ldr	r1, [pc, #92]	; (80021c0 <setSQWRate+0x90>)
 8002164:	a806      	add	r0, sp, #24
 8002166:	f001 f8f1 	bl	800334c <strcpy>
		I2C_Error(str, status);
 800216a:	4629      	mov	r1, r5
 800216c:	a806      	add	r0, sp, #24
 800216e:	f000 f953 	bl	8002418 <I2C_Error>
	}

	reg &= ~(3 << 3);
	reg |= (rate << 3);

	status = HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDR, REG_CON, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&reg, 1, 1000);
 8002172:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002176:	9302      	str	r3, [sp, #8]
 8002178:	2301      	movs	r3, #1
	reg &= ~(3 << 3);
 800217a:	f89d 0017 	ldrb.w	r0, [sp, #23]
	status = HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDR, REG_CON, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&reg, 1, 1000);
 800217e:	9400      	str	r4, [sp, #0]
	reg &= ~(3 << 3);
 8002180:	f020 0018 	bic.w	r0, r0, #24
	reg |= (rate << 3);
 8002184:	ea40 00c7 	orr.w	r0, r0, r7, lsl #3
 8002188:	f88d 0017 	strb.w	r0, [sp, #23]
	status = HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDR, REG_CON, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&reg, 1, 1000);
 800218c:	9301      	str	r3, [sp, #4]
 800218e:	220e      	movs	r2, #14
 8002190:	21d0      	movs	r1, #208	; 0xd0
 8002192:	480a      	ldr	r0, [pc, #40]	; (80021bc <setSQWRate+0x8c>)
 8002194:	f7ff f8ea 	bl	800136c <HAL_I2C_Mem_Write>

	if(status != HAL_OK)
 8002198:	4604      	mov	r4, r0
 800219a:	b160      	cbz	r0, 80021b6 <setSQWRate+0x86>
	{
		char str[32] = {0,};
 800219c:	2220      	movs	r2, #32
 800219e:	2100      	movs	r1, #0
 80021a0:	a806      	add	r0, sp, #24
 80021a2:	f000 fc35 	bl	8002a10 <memset>
		snprintf(str, 32, "HAL_I2C_Mem_Wr_SQW");
 80021a6:	4907      	ldr	r1, [pc, #28]	; (80021c4 <setSQWRate+0x94>)
 80021a8:	a806      	add	r0, sp, #24
 80021aa:	f001 f8cf 	bl	800334c <strcpy>
		I2C_Error(str, status);
 80021ae:	4621      	mov	r1, r4
 80021b0:	a806      	add	r0, sp, #24
 80021b2:	f000 f931 	bl	8002418 <I2C_Error>
	}
}
 80021b6:	b00f      	add	sp, #60	; 0x3c
 80021b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021ba:	bf00      	nop
 80021bc:	20000210 	.word	0x20000210
 80021c0:	08004bfd 	.word	0x08004bfd
 80021c4:	08004c12 	.word	0x08004c12

080021c8 <enable32KHz>:


void enable32KHz(uint8_t enable)
{
 80021c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t reg = 0;
	uint32_t status = HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDR, REG_STATUS, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&reg, 1, 1000);
 80021ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	uint8_t reg = 0;
 80021ce:	2600      	movs	r6, #0
{
 80021d0:	b08f      	sub	sp, #60	; 0x3c
	uint8_t reg = 0;
 80021d2:	ac0e      	add	r4, sp, #56	; 0x38
 80021d4:	f804 6d21 	strb.w	r6, [r4, #-33]!
	uint32_t status = HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDR, REG_STATUS, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&reg, 1, 1000);
 80021d8:	9302      	str	r3, [sp, #8]
 80021da:	2301      	movs	r3, #1
{
 80021dc:	4607      	mov	r7, r0
	uint32_t status = HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDR, REG_STATUS, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&reg, 1, 1000);
 80021de:	9301      	str	r3, [sp, #4]
 80021e0:	9400      	str	r4, [sp, #0]
 80021e2:	220f      	movs	r2, #15
 80021e4:	21d0      	movs	r1, #208	; 0xd0
 80021e6:	481b      	ldr	r0, [pc, #108]	; (8002254 <enable32KHz+0x8c>)
 80021e8:	f7ff f950 	bl	800148c <HAL_I2C_Mem_Read>

	if(status != HAL_OK)
 80021ec:	4605      	mov	r5, r0
 80021ee:	b160      	cbz	r0, 800220a <enable32KHz+0x42>
	{
		char str[32] = {0,};
 80021f0:	2220      	movs	r2, #32
 80021f2:	4631      	mov	r1, r6
 80021f4:	a806      	add	r0, sp, #24
 80021f6:	f000 fc0b 	bl	8002a10 <memset>
		snprintf(str, 32, "HAL_I2C_Mem_Read_32k");
 80021fa:	4917      	ldr	r1, [pc, #92]	; (8002258 <enable32KHz+0x90>)
 80021fc:	a806      	add	r0, sp, #24
 80021fe:	f001 f8a5 	bl	800334c <strcpy>
		I2C_Error(str, status);
 8002202:	4629      	mov	r1, r5
 8002204:	a806      	add	r0, sp, #24
 8002206:	f000 f907 	bl	8002418 <I2C_Error>
	}

	reg &= ~(1 << 3);
	reg |= (enable << 3);

	status = HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDR, REG_STATUS, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&reg, 1, 1000);
 800220a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800220e:	9302      	str	r3, [sp, #8]
 8002210:	2301      	movs	r3, #1
	reg &= ~(1 << 3);
 8002212:	f89d 0017 	ldrb.w	r0, [sp, #23]
	status = HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDR, REG_STATUS, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&reg, 1, 1000);
 8002216:	9400      	str	r4, [sp, #0]
	reg &= ~(1 << 3);
 8002218:	f020 0008 	bic.w	r0, r0, #8
	reg |= (enable << 3);
 800221c:	ea40 00c7 	orr.w	r0, r0, r7, lsl #3
 8002220:	f88d 0017 	strb.w	r0, [sp, #23]
	status = HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDR, REG_STATUS, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&reg, 1, 1000);
 8002224:	9301      	str	r3, [sp, #4]
 8002226:	220f      	movs	r2, #15
 8002228:	21d0      	movs	r1, #208	; 0xd0
 800222a:	480a      	ldr	r0, [pc, #40]	; (8002254 <enable32KHz+0x8c>)
 800222c:	f7ff f89e 	bl	800136c <HAL_I2C_Mem_Write>

	if(status != HAL_OK)
 8002230:	4604      	mov	r4, r0
 8002232:	b160      	cbz	r0, 800224e <enable32KHz+0x86>
	{
		char str[32] = {0,};
 8002234:	2220      	movs	r2, #32
 8002236:	2100      	movs	r1, #0
 8002238:	a806      	add	r0, sp, #24
 800223a:	f000 fbe9 	bl	8002a10 <memset>
		snprintf(str, 32, "HAL_I2C_Mem_Wr_32k");
 800223e:	4907      	ldr	r1, [pc, #28]	; (800225c <enable32KHz+0x94>)
 8002240:	a806      	add	r0, sp, #24
 8002242:	f001 f883 	bl	800334c <strcpy>
		I2C_Error(str, status);
 8002246:	4621      	mov	r1, r4
 8002248:	a806      	add	r0, sp, #24
 800224a:	f000 f8e5 	bl	8002418 <I2C_Error>
	}
}
 800224e:	b00f      	add	sp, #60	; 0x3c
 8002250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002252:	bf00      	nop
 8002254:	20000210 	.word	0x20000210
 8002258:	08004bad 	.word	0x08004bad
 800225c:	08004bc2 	.word	0x08004bc2

08002260 <armAlarm1>:

void armAlarm1(uint8_t armed)
{
    uint8_t value;

    uint32_t status = HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDR, REG_CON, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&value, 1, 1000);
 8002260:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 8002264:	b570      	push	{r4, r5, r6, lr}
 8002266:	b08e      	sub	sp, #56	; 0x38
    uint32_t status = HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDR, REG_CON, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&value, 1, 1000);
 8002268:	9302      	str	r3, [sp, #8]
 800226a:	2301      	movs	r3, #1
 800226c:	f10d 0417 	add.w	r4, sp, #23
{
 8002270:	4606      	mov	r6, r0
    uint32_t status = HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDR, REG_CON, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&value, 1, 1000);
 8002272:	9301      	str	r3, [sp, #4]
 8002274:	9400      	str	r4, [sp, #0]
 8002276:	220e      	movs	r2, #14
 8002278:	21d0      	movs	r1, #208	; 0xd0
 800227a:	481c      	ldr	r0, [pc, #112]	; (80022ec <armAlarm1+0x8c>)
 800227c:	f7ff f906 	bl	800148c <HAL_I2C_Mem_Read>

	if(status != HAL_OK)
 8002280:	4605      	mov	r5, r0
 8002282:	b160      	cbz	r0, 800229e <armAlarm1+0x3e>
	{
		char str[32] = {0,};
 8002284:	2220      	movs	r2, #32
 8002286:	2100      	movs	r1, #0
 8002288:	a806      	add	r0, sp, #24
 800228a:	f000 fbc1 	bl	8002a10 <memset>
		snprintf(str, 32, "HAL_I2C_Mem_Read_AL");
 800228e:	4918      	ldr	r1, [pc, #96]	; (80022f0 <armAlarm1+0x90>)
 8002290:	a806      	add	r0, sp, #24
 8002292:	f001 f85b 	bl	800334c <strcpy>
		I2C_Error(str, status);
 8002296:	4629      	mov	r1, r5
 8002298:	a806      	add	r0, sp, #24
 800229a:	f000 f8bd 	bl	8002418 <I2C_Error>
 800229e:	f89d 3017 	ldrb.w	r3, [sp, #23]
	}

    if(armed)
 80022a2:	b1fe      	cbz	r6, 80022e4 <armAlarm1+0x84>
    {
        value |= 0b00000001;
 80022a4:	f043 0301 	orr.w	r3, r3, #1
    }
    else
    {
        value &= 0b11111110;
 80022a8:	f88d 3017 	strb.w	r3, [sp, #23]
    }

    status = HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDR, REG_CON, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&value, 1, 1000);
 80022ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022b0:	9302      	str	r3, [sp, #8]
 80022b2:	2301      	movs	r3, #1
 80022b4:	9400      	str	r4, [sp, #0]
 80022b6:	9301      	str	r3, [sp, #4]
 80022b8:	220e      	movs	r2, #14
 80022ba:	21d0      	movs	r1, #208	; 0xd0
 80022bc:	480b      	ldr	r0, [pc, #44]	; (80022ec <armAlarm1+0x8c>)
 80022be:	f7ff f855 	bl	800136c <HAL_I2C_Mem_Write>

	if(status != HAL_OK)
 80022c2:	4604      	mov	r4, r0
 80022c4:	b160      	cbz	r0, 80022e0 <armAlarm1+0x80>
	{
		char str[32] = {0,};
 80022c6:	2220      	movs	r2, #32
 80022c8:	2100      	movs	r1, #0
 80022ca:	a806      	add	r0, sp, #24
 80022cc:	f000 fba0 	bl	8002a10 <memset>
		snprintf(str, 32, "HAL_I2C_Mem_Wr_AL");
 80022d0:	4908      	ldr	r1, [pc, #32]	; (80022f4 <armAlarm1+0x94>)
 80022d2:	a806      	add	r0, sp, #24
 80022d4:	f001 f83a 	bl	800334c <strcpy>
		I2C_Error(str, status);
 80022d8:	4621      	mov	r1, r4
 80022da:	a806      	add	r0, sp, #24
 80022dc:	f000 f89c 	bl	8002418 <I2C_Error>
	}
}
 80022e0:	b00e      	add	sp, #56	; 0x38
 80022e2:	bd70      	pop	{r4, r5, r6, pc}
        value &= 0b11111110;
 80022e4:	f023 0301 	bic.w	r3, r3, #1
 80022e8:	e7de      	b.n	80022a8 <armAlarm1+0x48>
 80022ea:	bf00      	nop
 80022ec:	20000210 	.word	0x20000210
 80022f0:	08004b61 	.word	0x08004b61
 80022f4:	08004b75 	.word	0x08004b75

080022f8 <clearAlarm1>:

void clearAlarm1(void)
{
    uint8_t value;

    uint32_t status = HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDR, REG_STATUS, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&value, 1, 1000);
 80022f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 80022fc:	b530      	push	{r4, r5, lr}
 80022fe:	b08f      	sub	sp, #60	; 0x3c
    uint32_t status = HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDR, REG_STATUS, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&value, 1, 1000);
 8002300:	9302      	str	r3, [sp, #8]
 8002302:	2301      	movs	r3, #1
 8002304:	f10d 0417 	add.w	r4, sp, #23
 8002308:	9301      	str	r3, [sp, #4]
 800230a:	9400      	str	r4, [sp, #0]
 800230c:	220f      	movs	r2, #15
 800230e:	21d0      	movs	r1, #208	; 0xd0
 8002310:	4819      	ldr	r0, [pc, #100]	; (8002378 <clearAlarm1+0x80>)
 8002312:	f7ff f8bb 	bl	800148c <HAL_I2C_Mem_Read>

	if(status != HAL_OK)
 8002316:	4605      	mov	r5, r0
 8002318:	b160      	cbz	r0, 8002334 <clearAlarm1+0x3c>
	{
		char str[32] = {0,};
 800231a:	2220      	movs	r2, #32
 800231c:	2100      	movs	r1, #0
 800231e:	a806      	add	r0, sp, #24
 8002320:	f000 fb76 	bl	8002a10 <memset>
		snprintf(str, 32, "HAL_I2C_Mem_Read_CA");
 8002324:	4915      	ldr	r1, [pc, #84]	; (800237c <clearAlarm1+0x84>)
 8002326:	a806      	add	r0, sp, #24
 8002328:	f001 f810 	bl	800334c <strcpy>
		I2C_Error(str, status);
 800232c:	4629      	mov	r1, r5
 800232e:	a806      	add	r0, sp, #24
 8002330:	f000 f872 	bl	8002418 <I2C_Error>
	}

    value &= 0b11111110;
 8002334:	f89d 3017 	ldrb.w	r3, [sp, #23]

    status = HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDR, REG_STATUS, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&value, 1, 1000);
 8002338:	9400      	str	r4, [sp, #0]
    value &= 0b11111110;
 800233a:	f023 0301 	bic.w	r3, r3, #1
 800233e:	f88d 3017 	strb.w	r3, [sp, #23]
    status = HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDR, REG_STATUS, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&value, 1, 1000);
 8002342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002346:	9302      	str	r3, [sp, #8]
 8002348:	2301      	movs	r3, #1
 800234a:	220f      	movs	r2, #15
 800234c:	9301      	str	r3, [sp, #4]
 800234e:	21d0      	movs	r1, #208	; 0xd0
 8002350:	4809      	ldr	r0, [pc, #36]	; (8002378 <clearAlarm1+0x80>)
 8002352:	f7ff f80b 	bl	800136c <HAL_I2C_Mem_Write>

	if(status != HAL_OK)
 8002356:	4604      	mov	r4, r0
 8002358:	b160      	cbz	r0, 8002374 <clearAlarm1+0x7c>
	{
		char str[32] = {0,};
 800235a:	2220      	movs	r2, #32
 800235c:	2100      	movs	r1, #0
 800235e:	a806      	add	r0, sp, #24
 8002360:	f000 fb56 	bl	8002a10 <memset>
		snprintf(str, 32, "HAL_I2C_Mem_Wr_CA");
 8002364:	4906      	ldr	r1, [pc, #24]	; (8002380 <clearAlarm1+0x88>)
 8002366:	a806      	add	r0, sp, #24
 8002368:	f000 fff0 	bl	800334c <strcpy>
		I2C_Error(str, status);
 800236c:	4621      	mov	r1, r4
 800236e:	a806      	add	r0, sp, #24
 8002370:	f000 f852 	bl	8002418 <I2C_Error>
	}
}
 8002374:	b00f      	add	sp, #60	; 0x3c
 8002376:	bd30      	pop	{r4, r5, pc}
 8002378:	20000210 	.word	0x20000210
 800237c:	08004b87 	.word	0x08004b87
 8002380:	08004b9b 	.word	0x08004b9b

08002384 <I2C_Scan>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void I2C_Scan(I2C_HandleTypeDef *hi2c) // сканирует шину и показывает адреса устройств
{
 8002384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002386:	b097      	sub	sp, #92	; 0x5c
 8002388:	4605      	mov	r5, r0
    char info[] = "Scanning I2C bus...\n";
 800238a:	466a      	mov	r2, sp
 800238c:	466e      	mov	r6, sp
 800238e:	4b1f      	ldr	r3, [pc, #124]	; (800240c <I2C_Scan+0x88>)
 8002390:	f103 0710 	add.w	r7, r3, #16
 8002394:	4614      	mov	r4, r2
 8002396:	6818      	ldr	r0, [r3, #0]
 8002398:	6859      	ldr	r1, [r3, #4]
 800239a:	3308      	adds	r3, #8
 800239c:	c403      	stmia	r4!, {r0, r1}
 800239e:	42bb      	cmp	r3, r7
 80023a0:	4622      	mov	r2, r4
 80023a2:	d1f7      	bne.n	8002394 <I2C_Scan+0x10>
 80023a4:	6818      	ldr	r0, [r3, #0]
 80023a6:	791b      	ldrb	r3, [r3, #4]
 80023a8:	6020      	str	r0, [r4, #0]
 80023aa:	7123      	strb	r3, [r4, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)info, strlen(info), 1000);
 80023ac:	4630      	mov	r0, r6
 80023ae:	f7fd fecf 	bl	8000150 <strlen>
 80023b2:	4631      	mov	r1, r6
 80023b4:	b282      	uxth	r2, r0
 80023b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023ba:	4815      	ldr	r0, [pc, #84]	; (8002410 <I2C_Scan+0x8c>)
 80023bc:	f7ff fd54 	bl	8001e68 <HAL_UART_Transmit>
 80023c0:	2400      	movs	r4, #0
    for(uint16_t i = 0; i < 128; i++)
    {
        if(HAL_I2C_IsDeviceReady(hi2c, i << 1, 1, 100) == HAL_OK)
        {
        	char msg[64] = {0,};
            snprintf(msg, 64, "Device: 0x%02X\n", i);
 80023c2:	4e14      	ldr	r6, [pc, #80]	; (8002414 <I2C_Scan+0x90>)
            HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);
 80023c4:	4f12      	ldr	r7, [pc, #72]	; (8002410 <I2C_Scan+0x8c>)
        if(HAL_I2C_IsDeviceReady(hi2c, i << 1, 1, 100) == HAL_OK)
 80023c6:	0061      	lsls	r1, r4, #1
 80023c8:	b289      	uxth	r1, r1
 80023ca:	2364      	movs	r3, #100	; 0x64
 80023cc:	2201      	movs	r2, #1
 80023ce:	4628      	mov	r0, r5
 80023d0:	f7ff f976 	bl	80016c0 <HAL_I2C_IsDeviceReady>
 80023d4:	4601      	mov	r1, r0
 80023d6:	b998      	cbnz	r0, 8002400 <I2C_Scan+0x7c>
        	char msg[64] = {0,};
 80023d8:	2240      	movs	r2, #64	; 0x40
 80023da:	a806      	add	r0, sp, #24
 80023dc:	f000 fb18 	bl	8002a10 <memset>
            snprintf(msg, 64, "Device: 0x%02X\n", i);
 80023e0:	4623      	mov	r3, r4
 80023e2:	4632      	mov	r2, r6
 80023e4:	2140      	movs	r1, #64	; 0x40
 80023e6:	a806      	add	r0, sp, #24
 80023e8:	f000 ff7c 	bl	80032e4 <sniprintf>
            HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);
 80023ec:	a806      	add	r0, sp, #24
 80023ee:	f7fd feaf 	bl	8000150 <strlen>
 80023f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023f6:	b282      	uxth	r2, r0
 80023f8:	a906      	add	r1, sp, #24
 80023fa:	4638      	mov	r0, r7
 80023fc:	f7ff fd34 	bl	8001e68 <HAL_UART_Transmit>
 8002400:	3401      	adds	r4, #1
    for(uint16_t i = 0; i < 128; i++)
 8002402:	2c80      	cmp	r4, #128	; 0x80
 8002404:	d1df      	bne.n	80023c6 <I2C_Scan+0x42>
        }
    }
}
 8002406:	b017      	add	sp, #92	; 0x5c
 8002408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800240a:	bf00      	nop
 800240c:	08004cf1 	.word	0x08004cf1
 8002410:	20000264 	.word	0x20000264
 8002414:	08004ce1 	.word	0x08004ce1

08002418 <I2C_Error>:

void I2C_Error(char *er, uint32_t status) // ошибки i2c
{
 8002418:	b530      	push	{r4, r5, lr}
 800241a:	460d      	mov	r5, r1
 800241c:	b091      	sub	sp, #68	; 0x44
 800241e:	4604      	mov	r4, r0
	char str[64] = {0,};
 8002420:	2240      	movs	r2, #64	; 0x40
 8002422:	2100      	movs	r1, #0
 8002424:	4668      	mov	r0, sp
 8002426:	f000 faf3 	bl	8002a10 <memset>

	switch(status)
 800242a:	2d02      	cmp	r5, #2
 800242c:	d01f      	beq.n	800246e <I2C_Error+0x56>
 800242e:	2d03      	cmp	r5, #3
 8002430:	d020      	beq.n	8002474 <I2C_Error+0x5c>
 8002432:	2d01      	cmp	r5, #1
 8002434:	d10f      	bne.n	8002456 <I2C_Error+0x3e>
	{
		case HAL_ERROR:
			snprintf(str, 64, "%s - HAL_ERROR\n", er);
 8002436:	4623      	mov	r3, r4
 8002438:	4a48      	ldr	r2, [pc, #288]	; (800255c <I2C_Error+0x144>)
			snprintf(str, 64, "%s - HAL_BUSY\n", er);
			HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
		break;

		case HAL_TIMEOUT:
			snprintf(str, 64, "%s - HAL_TIMEOUT\n", er);
 800243a:	2140      	movs	r1, #64	; 0x40
 800243c:	4668      	mov	r0, sp
 800243e:	f000 ff51 	bl	80032e4 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8002442:	4668      	mov	r0, sp
 8002444:	f7fd fe84 	bl	8000150 <strlen>
 8002448:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800244c:	b282      	uxth	r2, r0
 800244e:	4669      	mov	r1, sp
 8002450:	4843      	ldr	r0, [pc, #268]	; (8002560 <I2C_Error+0x148>)
 8002452:	f7ff fd09 	bl	8001e68 <HAL_UART_Transmit>

		default:
		break;
	}

	uint32_t err = HAL_I2C_GetError(&hi2c1);
 8002456:	4843      	ldr	r0, [pc, #268]	; (8002564 <I2C_Error+0x14c>)
 8002458:	f7ff f9dc 	bl	8001814 <HAL_I2C_GetError>

	switch(err)
 800245c:	2804      	cmp	r0, #4
 800245e:	d040      	beq.n	80024e2 <I2C_Error+0xca>
 8002460:	d80b      	bhi.n	800247a <I2C_Error+0x62>
 8002462:	2801      	cmp	r0, #1
 8002464:	d01f      	beq.n	80024a6 <I2C_Error+0x8e>
 8002466:	d30f      	bcc.n	8002488 <I2C_Error+0x70>
 8002468:	2802      	cmp	r0, #2
 800246a:	d02b      	beq.n	80024c4 <I2C_Error+0xac>
 800246c:	e7fe      	b.n	800246c <I2C_Error+0x54>
			snprintf(str, 64, "%s - HAL_BUSY\n", er);
 800246e:	4623      	mov	r3, r4
 8002470:	4a3d      	ldr	r2, [pc, #244]	; (8002568 <I2C_Error+0x150>)
 8002472:	e7e2      	b.n	800243a <I2C_Error+0x22>
			snprintf(str, 64, "%s - HAL_TIMEOUT\n", er);
 8002474:	4623      	mov	r3, r4
 8002476:	4a3d      	ldr	r2, [pc, #244]	; (800256c <I2C_Error+0x154>)
 8002478:	e7df      	b.n	800243a <I2C_Error+0x22>
	switch(err)
 800247a:	2810      	cmp	r0, #16
 800247c:	d04f      	beq.n	800251e <I2C_Error+0x106>
 800247e:	2820      	cmp	r0, #32
 8002480:	d05c      	beq.n	800253c <I2C_Error+0x124>
 8002482:	2808      	cmp	r0, #8
 8002484:	d03c      	beq.n	8002500 <I2C_Error+0xe8>
 8002486:	e7f1      	b.n	800246c <I2C_Error+0x54>
	{
		case HAL_I2C_ERROR_NONE:
			snprintf(str, 64, "HAL_I2C_ERROR_NONE\n");
 8002488:	4939      	ldr	r1, [pc, #228]	; (8002570 <I2C_Error+0x158>)
 800248a:	4668      	mov	r0, sp
 800248c:	f000 ff5e 	bl	800334c <strcpy>
			HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8002490:	4668      	mov	r0, sp
 8002492:	f7fd fe5d 	bl	8000150 <strlen>
 8002496:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800249a:	b282      	uxth	r2, r0
 800249c:	4669      	mov	r1, sp
 800249e:	4830      	ldr	r0, [pc, #192]	; (8002560 <I2C_Error+0x148>)
 80024a0:	f7ff fce2 	bl	8001e68 <HAL_UART_Transmit>
		break;
 80024a4:	e7e2      	b.n	800246c <I2C_Error+0x54>

		case HAL_I2C_ERROR_BERR:
			snprintf(str, 64, "HAL_I2C_ERROR_BERR\n");
 80024a6:	4933      	ldr	r1, [pc, #204]	; (8002574 <I2C_Error+0x15c>)
 80024a8:	4668      	mov	r0, sp
 80024aa:	f000 ff4f 	bl	800334c <strcpy>
			HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 80024ae:	4668      	mov	r0, sp
 80024b0:	f7fd fe4e 	bl	8000150 <strlen>
 80024b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024b8:	b282      	uxth	r2, r0
 80024ba:	4669      	mov	r1, sp
 80024bc:	4828      	ldr	r0, [pc, #160]	; (8002560 <I2C_Error+0x148>)
 80024be:	f7ff fcd3 	bl	8001e68 <HAL_UART_Transmit>
		break;
 80024c2:	e7d3      	b.n	800246c <I2C_Error+0x54>

		case HAL_I2C_ERROR_ARLO:
			snprintf(str, 64, "HAL_I2C_ERROR_ARLO\n");
 80024c4:	492c      	ldr	r1, [pc, #176]	; (8002578 <I2C_Error+0x160>)
 80024c6:	4668      	mov	r0, sp
 80024c8:	f000 ff40 	bl	800334c <strcpy>
			HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 80024cc:	4668      	mov	r0, sp
 80024ce:	f7fd fe3f 	bl	8000150 <strlen>
 80024d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024d6:	b282      	uxth	r2, r0
 80024d8:	4669      	mov	r1, sp
 80024da:	4821      	ldr	r0, [pc, #132]	; (8002560 <I2C_Error+0x148>)
 80024dc:	f7ff fcc4 	bl	8001e68 <HAL_UART_Transmit>
		break;
 80024e0:	e7c4      	b.n	800246c <I2C_Error+0x54>

		case HAL_I2C_ERROR_AF:
			snprintf(str, 64, "HAL_I2C_ERROR_AF\n");
 80024e2:	4926      	ldr	r1, [pc, #152]	; (800257c <I2C_Error+0x164>)
 80024e4:	4668      	mov	r0, sp
 80024e6:	f000 ff31 	bl	800334c <strcpy>
			HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 80024ea:	4668      	mov	r0, sp
 80024ec:	f7fd fe30 	bl	8000150 <strlen>
 80024f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024f4:	b282      	uxth	r2, r0
 80024f6:	4669      	mov	r1, sp
 80024f8:	4819      	ldr	r0, [pc, #100]	; (8002560 <I2C_Error+0x148>)
 80024fa:	f7ff fcb5 	bl	8001e68 <HAL_UART_Transmit>
		break;
 80024fe:	e7b5      	b.n	800246c <I2C_Error+0x54>

		case HAL_I2C_ERROR_OVR:
			snprintf(str, 64, "HAL_I2C_ERROR_OVR\n");
 8002500:	491f      	ldr	r1, [pc, #124]	; (8002580 <I2C_Error+0x168>)
 8002502:	4668      	mov	r0, sp
 8002504:	f000 ff22 	bl	800334c <strcpy>
			HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8002508:	4668      	mov	r0, sp
 800250a:	f7fd fe21 	bl	8000150 <strlen>
 800250e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002512:	b282      	uxth	r2, r0
 8002514:	4669      	mov	r1, sp
 8002516:	4812      	ldr	r0, [pc, #72]	; (8002560 <I2C_Error+0x148>)
 8002518:	f7ff fca6 	bl	8001e68 <HAL_UART_Transmit>
		break;
 800251c:	e7a6      	b.n	800246c <I2C_Error+0x54>

		case HAL_I2C_ERROR_DMA:
			snprintf(str, 64, "HAL_I2C_ERROR_DMA\n");
 800251e:	4919      	ldr	r1, [pc, #100]	; (8002584 <I2C_Error+0x16c>)
 8002520:	4668      	mov	r0, sp
 8002522:	f000 ff13 	bl	800334c <strcpy>
			HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8002526:	4668      	mov	r0, sp
 8002528:	f7fd fe12 	bl	8000150 <strlen>
 800252c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002530:	b282      	uxth	r2, r0
 8002532:	4669      	mov	r1, sp
 8002534:	480a      	ldr	r0, [pc, #40]	; (8002560 <I2C_Error+0x148>)
 8002536:	f7ff fc97 	bl	8001e68 <HAL_UART_Transmit>
		break;
 800253a:	e797      	b.n	800246c <I2C_Error+0x54>

		case HAL_I2C_ERROR_TIMEOUT:
			snprintf(str, 64, "HAL_I2C_ERROR_TIMEOUT\n");
 800253c:	4912      	ldr	r1, [pc, #72]	; (8002588 <I2C_Error+0x170>)
 800253e:	4668      	mov	r0, sp
 8002540:	f000 ff04 	bl	800334c <strcpy>
			HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8002544:	4668      	mov	r0, sp
 8002546:	f7fd fe03 	bl	8000150 <strlen>
 800254a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800254e:	b282      	uxth	r2, r0
 8002550:	4669      	mov	r1, sp
 8002552:	4803      	ldr	r0, [pc, #12]	; (8002560 <I2C_Error+0x148>)
 8002554:	f7ff fc88 	bl	8001e68 <HAL_UART_Transmit>
		break;
 8002558:	e788      	b.n	800246c <I2C_Error+0x54>
 800255a:	bf00      	nop
 800255c:	08004c25 	.word	0x08004c25
 8002560:	20000264 	.word	0x20000264
 8002564:	20000210 	.word	0x20000210
 8002568:	08004c35 	.word	0x08004c35
 800256c:	08004c44 	.word	0x08004c44
 8002570:	08004c56 	.word	0x08004c56
 8002574:	08004c6a 	.word	0x08004c6a
 8002578:	08004c7e 	.word	0x08004c7e
 800257c:	08004c92 	.word	0x08004c92
 8002580:	08004ca4 	.word	0x08004ca4
 8002584:	08004cb7 	.word	0x08004cb7
 8002588:	08004cca 	.word	0x08004cca

0800258c <HAL_GPIO_EXTI_Callback>:
	while(1){}; // после вывода ошибки программа зацикливается
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800258c:	4770      	bx	lr

0800258e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800258e:	b510      	push	{r4, lr}
 8002590:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002592:	2228      	movs	r2, #40	; 0x28
 8002594:	2100      	movs	r1, #0
 8002596:	a806      	add	r0, sp, #24
 8002598:	f000 fa3a 	bl	8002a10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800259c:	2100      	movs	r1, #0
 800259e:	2214      	movs	r2, #20
 80025a0:	a801      	add	r0, sp, #4
 80025a2:	f000 fa35 	bl	8002a10 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025aa:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025ac:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025ae:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025b0:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80025b2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025b6:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025b8:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025ba:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80025bc:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025be:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025c0:	f7ff f92a 	bl	8001818 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025c4:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80025c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025ca:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025cc:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80025ce:	4621      	mov	r1, r4
 80025d0:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025d2:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025d4:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80025d6:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025d8:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80025da:	f7ff faf7 	bl	8001bcc <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80025de:	b010      	add	sp, #64	; 0x40
 80025e0:	bd10      	pop	{r4, pc}
	...

080025e4 <main>:
{
 80025e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e8:	2410      	movs	r4, #16
{
 80025ea:	b091      	sub	sp, #68	; 0x44
  HAL_Init();
 80025ec:	f7fe fabc 	bl	8000b68 <HAL_Init>
  SystemClock_Config();
 80025f0:	f7ff ffcd 	bl	800258e <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f4:	4622      	mov	r2, r4
 80025f6:	2100      	movs	r1, #0
 80025f8:	a808      	add	r0, sp, #32
 80025fa:	f000 fa09 	bl	8002a10 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025fe:	4b61      	ldr	r3, [pc, #388]	; (8002784 <main+0x1a0>)

  /*Configure GPIO pin : INT_ALARM_Pin */
  GPIO_InitStruct.Pin = INT_ALARM_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(INT_ALARM_GPIO_Port, &GPIO_InitStruct);
 8002600:	a908      	add	r1, sp, #32
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002602:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(INT_ALARM_GPIO_Port, &GPIO_InitStruct);
 8002604:	4860      	ldr	r0, [pc, #384]	; (8002788 <main+0x1a4>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002606:	f042 0220 	orr.w	r2, r2, #32
 800260a:	619a      	str	r2, [r3, #24]
 800260c:	699a      	ldr	r2, [r3, #24]
  hi2c1.Instance = I2C1;
 800260e:	4d5f      	ldr	r5, [pc, #380]	; (800278c <main+0x1a8>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002610:	f002 0220 	and.w	r2, r2, #32
 8002614:	9205      	str	r2, [sp, #20]
 8002616:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002618:	699a      	ldr	r2, [r3, #24]
  huart1.Instance = USART1;
 800261a:	4e5d      	ldr	r6, [pc, #372]	; (8002790 <main+0x1ac>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800261c:	f042 0204 	orr.w	r2, r2, #4
 8002620:	619a      	str	r2, [r3, #24]
 8002622:	699a      	ldr	r2, [r3, #24]
 8002624:	f002 0204 	and.w	r2, r2, #4
 8002628:	9206      	str	r2, [sp, #24]
 800262a:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800262c:	699a      	ldr	r2, [r3, #24]
 800262e:	f042 0208 	orr.w	r2, r2, #8
 8002632:	619a      	str	r2, [r3, #24]
 8002634:	699b      	ldr	r3, [r3, #24]
  GPIO_InitStruct.Pin = INT_ALARM_Pin;
 8002636:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002638:	2401      	movs	r4, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	9307      	str	r3, [sp, #28]
 8002640:	9b07      	ldr	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002642:	4b54      	ldr	r3, [pc, #336]	; (8002794 <main+0x1b0>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002644:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002646:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(INT_ALARM_GPIO_Port, &GPIO_InitStruct);
 8002648:	f7fe fb2e 	bl	8000ca8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 800264c:	4621      	mov	r1, r4
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800264e:	2400      	movs	r4, #0
  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8002650:	2200      	movs	r2, #0
 8002652:	200a      	movs	r0, #10
 8002654:	f7fe fad0 	bl	8000bf8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002658:	200a      	movs	r0, #10
 800265a:	f7fe fb01 	bl	8000c60 <HAL_NVIC_EnableIRQ>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800265e:	4a4e      	ldr	r2, [pc, #312]	; (8002798 <main+0x1b4>)
 8002660:	4b4e      	ldr	r3, [pc, #312]	; (800279c <main+0x1b8>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002662:	4628      	mov	r0, r5
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002664:	e885 001c 	stmia.w	r5, {r2, r3, r4}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002668:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 800266c:	60ec      	str	r4, [r5, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800266e:	612b      	str	r3, [r5, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002670:	616c      	str	r4, [r5, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002672:	61ac      	str	r4, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002674:	61ec      	str	r4, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002676:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002678:	f7fe fdd4 	bl	8001224 <HAL_I2C_Init>
  huart1.Init.BaudRate = 115200;
 800267c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002680:	4947      	ldr	r1, [pc, #284]	; (80027a0 <main+0x1bc>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002682:	4630      	mov	r0, r6
  huart1.Init.BaudRate = 115200;
 8002684:	e886 000a 	stmia.w	r6, {r1, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002688:	230c      	movs	r3, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800268a:	60b4      	str	r4, [r6, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800268c:	6173      	str	r3, [r6, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800268e:	60f4      	str	r4, [r6, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002690:	6134      	str	r4, [r6, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002692:	61b4      	str	r4, [r6, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002694:	61f4      	str	r4, [r6, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002696:	f7ff fbb9 	bl	8001e0c <HAL_UART_Init>
  I2C_Scan(&hi2c1); // НОМЕР I2C
 800269a:	4628      	mov	r0, r5
 800269c:	f7ff fe72 	bl	8002384 <I2C_Scan>
  setOutput(OUTPUT_SQW); // разрешить вовод импульсов на пин SQW. OUTPUT_SQW - импульсы соответствующие функции setSQWRate(), OUTPUT_INT - прерывания от будильника
 80026a0:	4620      	mov	r0, r4
 80026a2:	f7ff fcf9 	bl	8002098 <setOutput>
  setSQWRate(SQW_RATE_1); // 1Hz, SQW_RATE_1K - 1024Hz, SQW_RATE_4K - 4096Hz, SQW_RATE_8K - 8192Hz
 80026a6:	4620      	mov	r0, r4
 80026a8:	f7ff fd42 	bl	8002130 <setSQWRate>
  enable32KHz(0); // отключить вывод частоты на пин 32К, 1 - включить. (частота с кварца часов 32768)
 80026ac:	4620      	mov	r0, r4
 80026ae:	f7ff fd8b 	bl	80021c8 <enable32KHz>
	  Read_time_data();
 80026b2:	f7ff fc35 	bl	8001f20 <Read_time_data>
	  uint8_t h = readHours();
 80026b6:	f7ff fc9b 	bl	8001ff0 <readHours>
 80026ba:	4681      	mov	r9, r0
	  uint8_t m = readMinutes();
 80026bc:	f7ff fc92 	bl	8001fe4 <readMinutes>
 80026c0:	4682      	mov	sl, r0
	  uint8_t s = readSeconds();
 80026c2:	f7ff fc89 	bl	8001fd8 <readSeconds>
 80026c6:	4683      	mov	fp, r0
	  uint8_t date = readDate();
 80026c8:	f7ff fc98 	bl	8001ffc <readDate>
 80026cc:	4604      	mov	r4, r0
	  uint8_t month = readMonth();
 80026ce:	f7ff fc9b 	bl	8002008 <readMonth>
 80026d2:	4605      	mov	r5, r0
	  uint8_t year = readYear();
 80026d4:	f7ff fc9e 	bl	8002014 <readYear>
 80026d8:	4607      	mov	r7, r0
	  uint8_t day = readDay();
 80026da:	f7ff fca1 	bl	8002020 <readDay>
	  char str[32] = {0,};
 80026de:	2220      	movs	r2, #32
	  uint8_t day = readDay();
 80026e0:	4680      	mov	r8, r0
	  char str[32] = {0,};
 80026e2:	2100      	movs	r1, #0
 80026e4:	eb0d 0002 	add.w	r0, sp, r2
 80026e8:	f000 f992 	bl	8002a10 <memset>
	  snprintf(str, 32, "Time %02d:%02d:%02d\n", h, m, s);
 80026ec:	2120      	movs	r1, #32
 80026ee:	464b      	mov	r3, r9
 80026f0:	4a2c      	ldr	r2, [pc, #176]	; (80027a4 <main+0x1c0>)
 80026f2:	eb0d 0001 	add.w	r0, sp, r1
 80026f6:	e88d 0c00 	stmia.w	sp, {sl, fp}
 80026fa:	f000 fdf3 	bl	80032e4 <sniprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 80026fe:	a808      	add	r0, sp, #32
 8002700:	f7fd fd26 	bl	8000150 <strlen>
 8002704:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002708:	b282      	uxth	r2, r0
 800270a:	a908      	add	r1, sp, #32
 800270c:	4630      	mov	r0, r6
 800270e:	f7ff fbab 	bl	8001e68 <HAL_UART_Transmit>
	  snprintf(str, 32, "Date %02d-%02d-20%02d day %d\n", date, month, year, day);
 8002712:	2120      	movs	r1, #32
 8002714:	4623      	mov	r3, r4
 8002716:	4a24      	ldr	r2, [pc, #144]	; (80027a8 <main+0x1c4>)
 8002718:	eb0d 0001 	add.w	r0, sp, r1
 800271c:	e88d 01a0 	stmia.w	sp, {r5, r7, r8}
 8002720:	f000 fde0 	bl	80032e4 <sniprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8002724:	a808      	add	r0, sp, #32
 8002726:	f7fd fd13 	bl	8000150 <strlen>
 800272a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800272e:	b282      	uxth	r2, r0
 8002730:	a908      	add	r1, sp, #32
 8002732:	4630      	mov	r0, r6
 8002734:	f7ff fb98 	bl	8001e68 <HAL_UART_Transmit>
	  float t_ds = Read_temp_ds3213(); // температура внутри девайса обновляется каждые 64 секунды, можно запустить принудительное измерение, но я этого не стал прописывать в коде
 8002738:	f7ff fc78 	bl	800202c <Read_temp_ds3213>
	  snprintf(str, 32, "Temp %.2f\n", t_ds);
 800273c:	f7fd fe74 	bl	8000428 <__aeabi_f2d>
 8002740:	e9cd 0100 	strd	r0, r1, [sp]
 8002744:	2120      	movs	r1, #32
 8002746:	4a19      	ldr	r2, [pc, #100]	; (80027ac <main+0x1c8>)
 8002748:	eb0d 0001 	add.w	r0, sp, r1
 800274c:	f000 fdca 	bl	80032e4 <sniprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8002750:	a808      	add	r0, sp, #32
 8002752:	f7fd fcfd 	bl	8000150 <strlen>
 8002756:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800275a:	b282      	uxth	r2, r0
 800275c:	a908      	add	r1, sp, #32
 800275e:	4630      	mov	r0, r6
 8002760:	f7ff fb82 	bl	8001e68 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8002764:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002768:	f7fe fa22 	bl	8000bb0 <HAL_Delay>
	  if(flag_clear_alarm)
 800276c:	4b10      	ldr	r3, [pc, #64]	; (80027b0 <main+0x1cc>)
 800276e:	781a      	ldrb	r2, [r3, #0]
 8002770:	2a00      	cmp	r2, #0
 8002772:	d09e      	beq.n	80026b2 <main+0xce>
		  flag_clear_alarm = 0;
 8002774:	2400      	movs	r4, #0
 8002776:	701c      	strb	r4, [r3, #0]
		  clearAlarm1();
 8002778:	f7ff fdbe 	bl	80022f8 <clearAlarm1>
		  armAlarm1(0);
 800277c:	4620      	mov	r0, r4
 800277e:	f7ff fd6f 	bl	8002260 <armAlarm1>
  {
 8002782:	e796      	b.n	80026b2 <main+0xce>
 8002784:	40021000 	.word	0x40021000
 8002788:	40010800 	.word	0x40010800
 800278c:	20000210 	.word	0x20000210
 8002790:	20000264 	.word	0x20000264
 8002794:	10210000 	.word	0x10210000
 8002798:	40005400 	.word	0x40005400
 800279c:	000186a0 	.word	0x000186a0
 80027a0:	40013800 	.word	0x40013800
 80027a4:	08004d06 	.word	0x08004d06
 80027a8:	08004d1b 	.word	0x08004d1b
 80027ac:	08004d39 	.word	0x08004d39
 80027b0:	200001ff 	.word	0x200001ff

080027b4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80027b4:	4b0e      	ldr	r3, [pc, #56]	; (80027f0 <HAL_MspInit+0x3c>)
{
 80027b6:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80027b8:	699a      	ldr	r2, [r3, #24]
 80027ba:	f042 0201 	orr.w	r2, r2, #1
 80027be:	619a      	str	r2, [r3, #24]
 80027c0:	699a      	ldr	r2, [r3, #24]
 80027c2:	f002 0201 	and.w	r2, r2, #1
 80027c6:	9200      	str	r2, [sp, #0]
 80027c8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027ca:	69da      	ldr	r2, [r3, #28]
 80027cc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80027d0:	61da      	str	r2, [r3, #28]
 80027d2:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80027d4:	4a07      	ldr	r2, [pc, #28]	; (80027f4 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80027d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027da:	9301      	str	r3, [sp, #4]
 80027dc:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80027de:	6853      	ldr	r3, [r2, #4]
 80027e0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80027e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027ea:	b002      	add	sp, #8
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	40021000 	.word	0x40021000
 80027f4:	40010000 	.word	0x40010000

080027f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027f8:	b510      	push	{r4, lr}
 80027fa:	4604      	mov	r4, r0
 80027fc:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027fe:	2210      	movs	r2, #16
 8002800:	2100      	movs	r1, #0
 8002802:	a802      	add	r0, sp, #8
 8002804:	f000 f904 	bl	8002a10 <memset>
  if(hi2c->Instance==I2C1)
 8002808:	6822      	ldr	r2, [r4, #0]
 800280a:	4b11      	ldr	r3, [pc, #68]	; (8002850 <HAL_I2C_MspInit+0x58>)
 800280c:	429a      	cmp	r2, r3
 800280e:	d11c      	bne.n	800284a <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002810:	4c10      	ldr	r4, [pc, #64]	; (8002854 <HAL_I2C_MspInit+0x5c>)
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002812:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002814:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002816:	4810      	ldr	r0, [pc, #64]	; (8002858 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002818:	f043 0308 	orr.w	r3, r3, #8
 800281c:	61a3      	str	r3, [r4, #24]
 800281e:	69a3      	ldr	r3, [r4, #24]
 8002820:	f003 0308 	and.w	r3, r3, #8
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002828:	23c0      	movs	r3, #192	; 0xc0
 800282a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800282c:	2312      	movs	r3, #18
 800282e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002830:	2303      	movs	r3, #3
 8002832:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002834:	f7fe fa38 	bl	8000ca8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002838:	69e3      	ldr	r3, [r4, #28]
 800283a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800283e:	61e3      	str	r3, [r4, #28]
 8002840:	69e3      	ldr	r3, [r4, #28]
 8002842:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002846:	9301      	str	r3, [sp, #4]
 8002848:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800284a:	b006      	add	sp, #24
 800284c:	bd10      	pop	{r4, pc}
 800284e:	bf00      	nop
 8002850:	40005400 	.word	0x40005400
 8002854:	40021000 	.word	0x40021000
 8002858:	40010c00 	.word	0x40010c00

0800285c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800285c:	b510      	push	{r4, lr}
 800285e:	4604      	mov	r4, r0
 8002860:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002862:	2210      	movs	r2, #16
 8002864:	2100      	movs	r1, #0
 8002866:	a802      	add	r0, sp, #8
 8002868:	f000 f8d2 	bl	8002a10 <memset>
  if(huart->Instance==USART1)
 800286c:	6822      	ldr	r2, [r4, #0]
 800286e:	4b17      	ldr	r3, [pc, #92]	; (80028cc <HAL_UART_MspInit+0x70>)
 8002870:	429a      	cmp	r2, r3
 8002872:	d128      	bne.n	80028c6 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002874:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002878:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800287a:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 800287c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002880:	619a      	str	r2, [r3, #24]
 8002882:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002884:	4812      	ldr	r0, [pc, #72]	; (80028d0 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002886:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800288a:	9200      	str	r2, [sp, #0]
 800288c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800288e:	699a      	ldr	r2, [r3, #24]
 8002890:	f042 0204 	orr.w	r2, r2, #4
 8002894:	619a      	str	r2, [r3, #24]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	9301      	str	r3, [sp, #4]
 800289e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80028a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028a4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a6:	2302      	movs	r3, #2
 80028a8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028aa:	2303      	movs	r3, #3
 80028ac:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ae:	f7fe f9fb 	bl	8000ca8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80028b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028b6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028b8:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ba:	a902      	add	r1, sp, #8
 80028bc:	4804      	ldr	r0, [pc, #16]	; (80028d0 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028be:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c2:	f7fe f9f1 	bl	8000ca8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80028c6:	b006      	add	sp, #24
 80028c8:	bd10      	pop	{r4, pc}
 80028ca:	bf00      	nop
 80028cc:	40013800 	.word	0x40013800
 80028d0:	40010800 	.word	0x40010800

080028d4 <NMI_Handler>:
 80028d4:	4770      	bx	lr

080028d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028d6:	e7fe      	b.n	80028d6 <HardFault_Handler>

080028d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028d8:	e7fe      	b.n	80028d8 <MemManage_Handler>

080028da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028da:	e7fe      	b.n	80028da <BusFault_Handler>

080028dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028dc:	e7fe      	b.n	80028dc <UsageFault_Handler>

080028de <SVC_Handler>:
 80028de:	4770      	bx	lr

080028e0 <DebugMon_Handler>:
 80028e0:	4770      	bx	lr

080028e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028e2:	4770      	bx	lr

080028e4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028e4:	f7fe b952 	b.w	8000b8c <HAL_IncTick>

080028e8 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80028e8:	2010      	movs	r0, #16
 80028ea:	f7fe babf 	b.w	8000e6c <HAL_GPIO_EXTI_IRQHandler>
	...

080028f0 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80028f0:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80028f2:	4b0a      	ldr	r3, [pc, #40]	; (800291c <_sbrk+0x2c>)
{
 80028f4:	4602      	mov	r2, r0
	if (heap_end == 0)
 80028f6:	6819      	ldr	r1, [r3, #0]
 80028f8:	b909      	cbnz	r1, 80028fe <_sbrk+0xe>
		heap_end = &end;
 80028fa:	4909      	ldr	r1, [pc, #36]	; (8002920 <_sbrk+0x30>)
 80028fc:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80028fe:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8002900:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8002902:	4402      	add	r2, r0
 8002904:	428a      	cmp	r2, r1
 8002906:	d906      	bls.n	8002916 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002908:	f000 f858 	bl	80029bc <__errno>
 800290c:	230c      	movs	r3, #12
 800290e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002910:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002914:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8002916:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8002918:	bd08      	pop	{r3, pc}
 800291a:	bf00      	nop
 800291c:	20000200 	.word	0x20000200
 8002920:	200002a8 	.word	0x200002a8

08002924 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002924:	4b0f      	ldr	r3, [pc, #60]	; (8002964 <SystemInit+0x40>)
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	f042 0201 	orr.w	r2, r2, #1
 800292c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800292e:	6859      	ldr	r1, [r3, #4]
 8002930:	4a0d      	ldr	r2, [pc, #52]	; (8002968 <SystemInit+0x44>)
 8002932:	400a      	ands	r2, r1
 8002934:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800293c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002940:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002948:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800294a:	685a      	ldr	r2, [r3, #4]
 800294c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002950:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002952:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002956:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002958:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800295c:	4b03      	ldr	r3, [pc, #12]	; (800296c <SystemInit+0x48>)
 800295e:	609a      	str	r2, [r3, #8]
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	40021000 	.word	0x40021000
 8002968:	f8ff0000 	.word	0xf8ff0000
 800296c:	e000ed00 	.word	0xe000ed00

08002970 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002970:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002972:	e003      	b.n	800297c <LoopCopyDataInit>

08002974 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002974:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002976:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002978:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800297a:	3104      	adds	r1, #4

0800297c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800297c:	480a      	ldr	r0, [pc, #40]	; (80029a8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800297e:	4b0b      	ldr	r3, [pc, #44]	; (80029ac <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002980:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002982:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002984:	d3f6      	bcc.n	8002974 <CopyDataInit>
  ldr r2, =_sbss
 8002986:	4a0a      	ldr	r2, [pc, #40]	; (80029b0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002988:	e002      	b.n	8002990 <LoopFillZerobss>

0800298a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800298a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800298c:	f842 3b04 	str.w	r3, [r2], #4

08002990 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002990:	4b08      	ldr	r3, [pc, #32]	; (80029b4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002992:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002994:	d3f9      	bcc.n	800298a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002996:	f7ff ffc5 	bl	8002924 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800299a:	f000 f815 	bl	80029c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800299e:	f7ff fe21 	bl	80025e4 <main>
  bx lr
 80029a2:	4770      	bx	lr
  ldr r3, =_sidata
 80029a4:	08004fc0 	.word	0x08004fc0
  ldr r0, =_sdata
 80029a8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80029ac:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 80029b0:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 80029b4:	200002a8 	.word	0x200002a8

080029b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029b8:	e7fe      	b.n	80029b8 <ADC1_2_IRQHandler>
	...

080029bc <__errno>:
 80029bc:	4b01      	ldr	r3, [pc, #4]	; (80029c4 <__errno+0x8>)
 80029be:	6818      	ldr	r0, [r3, #0]
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	2000000c 	.word	0x2000000c

080029c8 <__libc_init_array>:
 80029c8:	b570      	push	{r4, r5, r6, lr}
 80029ca:	2500      	movs	r5, #0
 80029cc:	4e0c      	ldr	r6, [pc, #48]	; (8002a00 <__libc_init_array+0x38>)
 80029ce:	4c0d      	ldr	r4, [pc, #52]	; (8002a04 <__libc_init_array+0x3c>)
 80029d0:	1ba4      	subs	r4, r4, r6
 80029d2:	10a4      	asrs	r4, r4, #2
 80029d4:	42a5      	cmp	r5, r4
 80029d6:	d109      	bne.n	80029ec <__libc_init_array+0x24>
 80029d8:	f002 f8a4 	bl	8004b24 <_init>
 80029dc:	2500      	movs	r5, #0
 80029de:	4e0a      	ldr	r6, [pc, #40]	; (8002a08 <__libc_init_array+0x40>)
 80029e0:	4c0a      	ldr	r4, [pc, #40]	; (8002a0c <__libc_init_array+0x44>)
 80029e2:	1ba4      	subs	r4, r4, r6
 80029e4:	10a4      	asrs	r4, r4, #2
 80029e6:	42a5      	cmp	r5, r4
 80029e8:	d105      	bne.n	80029f6 <__libc_init_array+0x2e>
 80029ea:	bd70      	pop	{r4, r5, r6, pc}
 80029ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80029f0:	4798      	blx	r3
 80029f2:	3501      	adds	r5, #1
 80029f4:	e7ee      	b.n	80029d4 <__libc_init_array+0xc>
 80029f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80029fa:	4798      	blx	r3
 80029fc:	3501      	adds	r5, #1
 80029fe:	e7f2      	b.n	80029e6 <__libc_init_array+0x1e>
 8002a00:	08004fb8 	.word	0x08004fb8
 8002a04:	08004fb8 	.word	0x08004fb8
 8002a08:	08004fb8 	.word	0x08004fb8
 8002a0c:	08004fbc 	.word	0x08004fbc

08002a10 <memset>:
 8002a10:	4603      	mov	r3, r0
 8002a12:	4402      	add	r2, r0
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d100      	bne.n	8002a1a <memset+0xa>
 8002a18:	4770      	bx	lr
 8002a1a:	f803 1b01 	strb.w	r1, [r3], #1
 8002a1e:	e7f9      	b.n	8002a14 <memset+0x4>

08002a20 <__cvt>:
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a26:	461e      	mov	r6, r3
 8002a28:	bfbb      	ittet	lt
 8002a2a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002a2e:	461e      	movlt	r6, r3
 8002a30:	2300      	movge	r3, #0
 8002a32:	232d      	movlt	r3, #45	; 0x2d
 8002a34:	b088      	sub	sp, #32
 8002a36:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8002a38:	9912      	ldr	r1, [sp, #72]	; 0x48
 8002a3a:	f027 0720 	bic.w	r7, r7, #32
 8002a3e:	2f46      	cmp	r7, #70	; 0x46
 8002a40:	4614      	mov	r4, r2
 8002a42:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002a44:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002a48:	700b      	strb	r3, [r1, #0]
 8002a4a:	d004      	beq.n	8002a56 <__cvt+0x36>
 8002a4c:	2f45      	cmp	r7, #69	; 0x45
 8002a4e:	d100      	bne.n	8002a52 <__cvt+0x32>
 8002a50:	3501      	adds	r5, #1
 8002a52:	2302      	movs	r3, #2
 8002a54:	e000      	b.n	8002a58 <__cvt+0x38>
 8002a56:	2303      	movs	r3, #3
 8002a58:	aa07      	add	r2, sp, #28
 8002a5a:	9204      	str	r2, [sp, #16]
 8002a5c:	aa06      	add	r2, sp, #24
 8002a5e:	9203      	str	r2, [sp, #12]
 8002a60:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
 8002a64:	4622      	mov	r2, r4
 8002a66:	4633      	mov	r3, r6
 8002a68:	f000 fd06 	bl	8003478 <_dtoa_r>
 8002a6c:	2f47      	cmp	r7, #71	; 0x47
 8002a6e:	4680      	mov	r8, r0
 8002a70:	d102      	bne.n	8002a78 <__cvt+0x58>
 8002a72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002a74:	07db      	lsls	r3, r3, #31
 8002a76:	d526      	bpl.n	8002ac6 <__cvt+0xa6>
 8002a78:	2f46      	cmp	r7, #70	; 0x46
 8002a7a:	eb08 0905 	add.w	r9, r8, r5
 8002a7e:	d111      	bne.n	8002aa4 <__cvt+0x84>
 8002a80:	f898 3000 	ldrb.w	r3, [r8]
 8002a84:	2b30      	cmp	r3, #48	; 0x30
 8002a86:	d10a      	bne.n	8002a9e <__cvt+0x7e>
 8002a88:	2200      	movs	r2, #0
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	4620      	mov	r0, r4
 8002a8e:	4631      	mov	r1, r6
 8002a90:	f7fd ff86 	bl	80009a0 <__aeabi_dcmpeq>
 8002a94:	b918      	cbnz	r0, 8002a9e <__cvt+0x7e>
 8002a96:	f1c5 0501 	rsb	r5, r5, #1
 8002a9a:	f8ca 5000 	str.w	r5, [sl]
 8002a9e:	f8da 3000 	ldr.w	r3, [sl]
 8002aa2:	4499      	add	r9, r3
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	4620      	mov	r0, r4
 8002aaa:	4631      	mov	r1, r6
 8002aac:	f7fd ff78 	bl	80009a0 <__aeabi_dcmpeq>
 8002ab0:	b938      	cbnz	r0, 8002ac2 <__cvt+0xa2>
 8002ab2:	2230      	movs	r2, #48	; 0x30
 8002ab4:	9b07      	ldr	r3, [sp, #28]
 8002ab6:	4599      	cmp	r9, r3
 8002ab8:	d905      	bls.n	8002ac6 <__cvt+0xa6>
 8002aba:	1c59      	adds	r1, r3, #1
 8002abc:	9107      	str	r1, [sp, #28]
 8002abe:	701a      	strb	r2, [r3, #0]
 8002ac0:	e7f8      	b.n	8002ab4 <__cvt+0x94>
 8002ac2:	f8cd 901c 	str.w	r9, [sp, #28]
 8002ac6:	4640      	mov	r0, r8
 8002ac8:	9b07      	ldr	r3, [sp, #28]
 8002aca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002acc:	eba3 0308 	sub.w	r3, r3, r8
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	b008      	add	sp, #32
 8002ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002ad8 <__exponent>:
 8002ad8:	4603      	mov	r3, r0
 8002ada:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002adc:	2900      	cmp	r1, #0
 8002ade:	f803 2b02 	strb.w	r2, [r3], #2
 8002ae2:	bfb6      	itet	lt
 8002ae4:	222d      	movlt	r2, #45	; 0x2d
 8002ae6:	222b      	movge	r2, #43	; 0x2b
 8002ae8:	4249      	neglt	r1, r1
 8002aea:	2909      	cmp	r1, #9
 8002aec:	7042      	strb	r2, [r0, #1]
 8002aee:	dd21      	ble.n	8002b34 <__exponent+0x5c>
 8002af0:	f10d 0207 	add.w	r2, sp, #7
 8002af4:	4617      	mov	r7, r2
 8002af6:	260a      	movs	r6, #10
 8002af8:	fb91 f5f6 	sdiv	r5, r1, r6
 8002afc:	fb06 1115 	mls	r1, r6, r5, r1
 8002b00:	2d09      	cmp	r5, #9
 8002b02:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8002b06:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002b0a:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
 8002b0e:	4629      	mov	r1, r5
 8002b10:	dc09      	bgt.n	8002b26 <__exponent+0x4e>
 8002b12:	3130      	adds	r1, #48	; 0x30
 8002b14:	3a02      	subs	r2, #2
 8002b16:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002b1a:	42ba      	cmp	r2, r7
 8002b1c:	461c      	mov	r4, r3
 8002b1e:	d304      	bcc.n	8002b2a <__exponent+0x52>
 8002b20:	1a20      	subs	r0, r4, r0
 8002b22:	b003      	add	sp, #12
 8002b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b26:	4622      	mov	r2, r4
 8002b28:	e7e6      	b.n	8002af8 <__exponent+0x20>
 8002b2a:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b32:	e7f2      	b.n	8002b1a <__exponent+0x42>
 8002b34:	2230      	movs	r2, #48	; 0x30
 8002b36:	461c      	mov	r4, r3
 8002b38:	4411      	add	r1, r2
 8002b3a:	f804 2b02 	strb.w	r2, [r4], #2
 8002b3e:	7059      	strb	r1, [r3, #1]
 8002b40:	e7ee      	b.n	8002b20 <__exponent+0x48>
	...

08002b44 <_printf_float>:
 8002b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b48:	b091      	sub	sp, #68	; 0x44
 8002b4a:	460c      	mov	r4, r1
 8002b4c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8002b4e:	4693      	mov	fp, r2
 8002b50:	461e      	mov	r6, r3
 8002b52:	4605      	mov	r5, r0
 8002b54:	f001 fa64 	bl	8004020 <_localeconv_r>
 8002b58:	6803      	ldr	r3, [r0, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	9309      	str	r3, [sp, #36]	; 0x24
 8002b5e:	f7fd faf7 	bl	8000150 <strlen>
 8002b62:	2300      	movs	r3, #0
 8002b64:	930e      	str	r3, [sp, #56]	; 0x38
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	900a      	str	r0, [sp, #40]	; 0x28
 8002b6a:	3307      	adds	r3, #7
 8002b6c:	f023 0307 	bic.w	r3, r3, #7
 8002b70:	f103 0208 	add.w	r2, r3, #8
 8002b74:	f894 8018 	ldrb.w	r8, [r4, #24]
 8002b78:	f8d4 a000 	ldr.w	sl, [r4]
 8002b7c:	603a      	str	r2, [r7, #0]
 8002b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b82:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002b86:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
 8002b8a:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8002b8c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002b90:	930b      	str	r3, [sp, #44]	; 0x2c
 8002b92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b96:	4ba6      	ldr	r3, [pc, #664]	; (8002e30 <_printf_float+0x2ec>)
 8002b98:	4638      	mov	r0, r7
 8002b9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002b9c:	f7fd ff32 	bl	8000a04 <__aeabi_dcmpun>
 8002ba0:	2800      	cmp	r0, #0
 8002ba2:	f040 81f7 	bne.w	8002f94 <_printf_float+0x450>
 8002ba6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002baa:	4ba1      	ldr	r3, [pc, #644]	; (8002e30 <_printf_float+0x2ec>)
 8002bac:	4638      	mov	r0, r7
 8002bae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002bb0:	f7fd ff0a 	bl	80009c8 <__aeabi_dcmple>
 8002bb4:	2800      	cmp	r0, #0
 8002bb6:	f040 81ed 	bne.w	8002f94 <_printf_float+0x450>
 8002bba:	2200      	movs	r2, #0
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	4638      	mov	r0, r7
 8002bc0:	4649      	mov	r1, r9
 8002bc2:	f7fd fef7 	bl	80009b4 <__aeabi_dcmplt>
 8002bc6:	b110      	cbz	r0, 8002bce <_printf_float+0x8a>
 8002bc8:	232d      	movs	r3, #45	; 0x2d
 8002bca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002bce:	4b99      	ldr	r3, [pc, #612]	; (8002e34 <_printf_float+0x2f0>)
 8002bd0:	4f99      	ldr	r7, [pc, #612]	; (8002e38 <_printf_float+0x2f4>)
 8002bd2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002bd6:	bf98      	it	ls
 8002bd8:	461f      	movls	r7, r3
 8002bda:	2303      	movs	r3, #3
 8002bdc:	f04f 0900 	mov.w	r9, #0
 8002be0:	6123      	str	r3, [r4, #16]
 8002be2:	f02a 0304 	bic.w	r3, sl, #4
 8002be6:	6023      	str	r3, [r4, #0]
 8002be8:	9600      	str	r6, [sp, #0]
 8002bea:	465b      	mov	r3, fp
 8002bec:	aa0f      	add	r2, sp, #60	; 0x3c
 8002bee:	4621      	mov	r1, r4
 8002bf0:	4628      	mov	r0, r5
 8002bf2:	f000 f9df 	bl	8002fb4 <_printf_common>
 8002bf6:	3001      	adds	r0, #1
 8002bf8:	f040 809a 	bne.w	8002d30 <_printf_float+0x1ec>
 8002bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c00:	b011      	add	sp, #68	; 0x44
 8002c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c06:	6862      	ldr	r2, [r4, #4]
 8002c08:	a80e      	add	r0, sp, #56	; 0x38
 8002c0a:	1c53      	adds	r3, r2, #1
 8002c0c:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
 8002c10:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
 8002c14:	d141      	bne.n	8002c9a <_printf_float+0x156>
 8002c16:	2206      	movs	r2, #6
 8002c18:	6062      	str	r2, [r4, #4]
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	6023      	str	r3, [r4, #0]
 8002c1e:	9301      	str	r3, [sp, #4]
 8002c20:	6863      	ldr	r3, [r4, #4]
 8002c22:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8002c26:	9005      	str	r0, [sp, #20]
 8002c28:	9202      	str	r2, [sp, #8]
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	463a      	mov	r2, r7
 8002c2e:	464b      	mov	r3, r9
 8002c30:	9106      	str	r1, [sp, #24]
 8002c32:	f8cd 8010 	str.w	r8, [sp, #16]
 8002c36:	f8cd e00c 	str.w	lr, [sp, #12]
 8002c3a:	4628      	mov	r0, r5
 8002c3c:	f7ff fef0 	bl	8002a20 <__cvt>
 8002c40:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8002c44:	2b47      	cmp	r3, #71	; 0x47
 8002c46:	4607      	mov	r7, r0
 8002c48:	d109      	bne.n	8002c5e <_printf_float+0x11a>
 8002c4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002c4c:	1cd8      	adds	r0, r3, #3
 8002c4e:	db02      	blt.n	8002c56 <_printf_float+0x112>
 8002c50:	6862      	ldr	r2, [r4, #4]
 8002c52:	4293      	cmp	r3, r2
 8002c54:	dd59      	ble.n	8002d0a <_printf_float+0x1c6>
 8002c56:	f1a8 0802 	sub.w	r8, r8, #2
 8002c5a:	fa5f f888 	uxtb.w	r8, r8
 8002c5e:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002c62:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002c64:	d836      	bhi.n	8002cd4 <_printf_float+0x190>
 8002c66:	3901      	subs	r1, #1
 8002c68:	4642      	mov	r2, r8
 8002c6a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002c6e:	910d      	str	r1, [sp, #52]	; 0x34
 8002c70:	f7ff ff32 	bl	8002ad8 <__exponent>
 8002c74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002c76:	4681      	mov	r9, r0
 8002c78:	1883      	adds	r3, r0, r2
 8002c7a:	2a01      	cmp	r2, #1
 8002c7c:	6123      	str	r3, [r4, #16]
 8002c7e:	dc02      	bgt.n	8002c86 <_printf_float+0x142>
 8002c80:	6822      	ldr	r2, [r4, #0]
 8002c82:	07d1      	lsls	r1, r2, #31
 8002c84:	d501      	bpl.n	8002c8a <_printf_float+0x146>
 8002c86:	3301      	adds	r3, #1
 8002c88:	6123      	str	r3, [r4, #16]
 8002c8a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d0aa      	beq.n	8002be8 <_printf_float+0xa4>
 8002c92:	232d      	movs	r3, #45	; 0x2d
 8002c94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c98:	e7a6      	b.n	8002be8 <_printf_float+0xa4>
 8002c9a:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8002c9e:	d002      	beq.n	8002ca6 <_printf_float+0x162>
 8002ca0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002ca4:	d1b9      	bne.n	8002c1a <_printf_float+0xd6>
 8002ca6:	b19a      	cbz	r2, 8002cd0 <_printf_float+0x18c>
 8002ca8:	2100      	movs	r1, #0
 8002caa:	9106      	str	r1, [sp, #24]
 8002cac:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8002cb0:	e88d 000c 	stmia.w	sp, {r2, r3}
 8002cb4:	6023      	str	r3, [r4, #0]
 8002cb6:	9005      	str	r0, [sp, #20]
 8002cb8:	463a      	mov	r2, r7
 8002cba:	f8cd 8010 	str.w	r8, [sp, #16]
 8002cbe:	f8cd e00c 	str.w	lr, [sp, #12]
 8002cc2:	9102      	str	r1, [sp, #8]
 8002cc4:	464b      	mov	r3, r9
 8002cc6:	4628      	mov	r0, r5
 8002cc8:	f7ff feaa 	bl	8002a20 <__cvt>
 8002ccc:	4607      	mov	r7, r0
 8002cce:	e7bc      	b.n	8002c4a <_printf_float+0x106>
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	e7a1      	b.n	8002c18 <_printf_float+0xd4>
 8002cd4:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8002cd8:	d119      	bne.n	8002d0e <_printf_float+0x1ca>
 8002cda:	2900      	cmp	r1, #0
 8002cdc:	6863      	ldr	r3, [r4, #4]
 8002cde:	dd0c      	ble.n	8002cfa <_printf_float+0x1b6>
 8002ce0:	6121      	str	r1, [r4, #16]
 8002ce2:	b913      	cbnz	r3, 8002cea <_printf_float+0x1a6>
 8002ce4:	6822      	ldr	r2, [r4, #0]
 8002ce6:	07d2      	lsls	r2, r2, #31
 8002ce8:	d502      	bpl.n	8002cf0 <_printf_float+0x1ac>
 8002cea:	3301      	adds	r3, #1
 8002cec:	440b      	add	r3, r1
 8002cee:	6123      	str	r3, [r4, #16]
 8002cf0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002cf2:	f04f 0900 	mov.w	r9, #0
 8002cf6:	65a3      	str	r3, [r4, #88]	; 0x58
 8002cf8:	e7c7      	b.n	8002c8a <_printf_float+0x146>
 8002cfa:	b913      	cbnz	r3, 8002d02 <_printf_float+0x1be>
 8002cfc:	6822      	ldr	r2, [r4, #0]
 8002cfe:	07d0      	lsls	r0, r2, #31
 8002d00:	d501      	bpl.n	8002d06 <_printf_float+0x1c2>
 8002d02:	3302      	adds	r3, #2
 8002d04:	e7f3      	b.n	8002cee <_printf_float+0x1aa>
 8002d06:	2301      	movs	r3, #1
 8002d08:	e7f1      	b.n	8002cee <_printf_float+0x1aa>
 8002d0a:	f04f 0867 	mov.w	r8, #103	; 0x67
 8002d0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002d10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002d12:	4293      	cmp	r3, r2
 8002d14:	db05      	blt.n	8002d22 <_printf_float+0x1de>
 8002d16:	6822      	ldr	r2, [r4, #0]
 8002d18:	6123      	str	r3, [r4, #16]
 8002d1a:	07d1      	lsls	r1, r2, #31
 8002d1c:	d5e8      	bpl.n	8002cf0 <_printf_float+0x1ac>
 8002d1e:	3301      	adds	r3, #1
 8002d20:	e7e5      	b.n	8002cee <_printf_float+0x1aa>
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	bfcc      	ite	gt
 8002d26:	2301      	movgt	r3, #1
 8002d28:	f1c3 0302 	rsble	r3, r3, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	e7de      	b.n	8002cee <_printf_float+0x1aa>
 8002d30:	6823      	ldr	r3, [r4, #0]
 8002d32:	055a      	lsls	r2, r3, #21
 8002d34:	d407      	bmi.n	8002d46 <_printf_float+0x202>
 8002d36:	6923      	ldr	r3, [r4, #16]
 8002d38:	463a      	mov	r2, r7
 8002d3a:	4659      	mov	r1, fp
 8002d3c:	4628      	mov	r0, r5
 8002d3e:	47b0      	blx	r6
 8002d40:	3001      	adds	r0, #1
 8002d42:	d12a      	bne.n	8002d9a <_printf_float+0x256>
 8002d44:	e75a      	b.n	8002bfc <_printf_float+0xb8>
 8002d46:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002d4a:	f240 80dc 	bls.w	8002f06 <_printf_float+0x3c2>
 8002d4e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002d52:	2200      	movs	r2, #0
 8002d54:	2300      	movs	r3, #0
 8002d56:	f7fd fe23 	bl	80009a0 <__aeabi_dcmpeq>
 8002d5a:	2800      	cmp	r0, #0
 8002d5c:	d039      	beq.n	8002dd2 <_printf_float+0x28e>
 8002d5e:	2301      	movs	r3, #1
 8002d60:	4a36      	ldr	r2, [pc, #216]	; (8002e3c <_printf_float+0x2f8>)
 8002d62:	4659      	mov	r1, fp
 8002d64:	4628      	mov	r0, r5
 8002d66:	47b0      	blx	r6
 8002d68:	3001      	adds	r0, #1
 8002d6a:	f43f af47 	beq.w	8002bfc <_printf_float+0xb8>
 8002d6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002d70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002d72:	429a      	cmp	r2, r3
 8002d74:	db02      	blt.n	8002d7c <_printf_float+0x238>
 8002d76:	6823      	ldr	r3, [r4, #0]
 8002d78:	07d8      	lsls	r0, r3, #31
 8002d7a:	d50e      	bpl.n	8002d9a <_printf_float+0x256>
 8002d7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d80:	4659      	mov	r1, fp
 8002d82:	4628      	mov	r0, r5
 8002d84:	47b0      	blx	r6
 8002d86:	3001      	adds	r0, #1
 8002d88:	f43f af38 	beq.w	8002bfc <_printf_float+0xb8>
 8002d8c:	2700      	movs	r7, #0
 8002d8e:	f104 081a 	add.w	r8, r4, #26
 8002d92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002d94:	3b01      	subs	r3, #1
 8002d96:	429f      	cmp	r7, r3
 8002d98:	db11      	blt.n	8002dbe <_printf_float+0x27a>
 8002d9a:	6823      	ldr	r3, [r4, #0]
 8002d9c:	079f      	lsls	r7, r3, #30
 8002d9e:	d508      	bpl.n	8002db2 <_printf_float+0x26e>
 8002da0:	2700      	movs	r7, #0
 8002da2:	f104 0819 	add.w	r8, r4, #25
 8002da6:	68e3      	ldr	r3, [r4, #12]
 8002da8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002daa:	1a9b      	subs	r3, r3, r2
 8002dac:	429f      	cmp	r7, r3
 8002dae:	f2c0 80e7 	blt.w	8002f80 <_printf_float+0x43c>
 8002db2:	68e0      	ldr	r0, [r4, #12]
 8002db4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002db6:	4298      	cmp	r0, r3
 8002db8:	bfb8      	it	lt
 8002dba:	4618      	movlt	r0, r3
 8002dbc:	e720      	b.n	8002c00 <_printf_float+0xbc>
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	4642      	mov	r2, r8
 8002dc2:	4659      	mov	r1, fp
 8002dc4:	4628      	mov	r0, r5
 8002dc6:	47b0      	blx	r6
 8002dc8:	3001      	adds	r0, #1
 8002dca:	f43f af17 	beq.w	8002bfc <_printf_float+0xb8>
 8002dce:	3701      	adds	r7, #1
 8002dd0:	e7df      	b.n	8002d92 <_printf_float+0x24e>
 8002dd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	dc33      	bgt.n	8002e40 <_printf_float+0x2fc>
 8002dd8:	2301      	movs	r3, #1
 8002dda:	4a18      	ldr	r2, [pc, #96]	; (8002e3c <_printf_float+0x2f8>)
 8002ddc:	4659      	mov	r1, fp
 8002dde:	4628      	mov	r0, r5
 8002de0:	47b0      	blx	r6
 8002de2:	3001      	adds	r0, #1
 8002de4:	f43f af0a 	beq.w	8002bfc <_printf_float+0xb8>
 8002de8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002dea:	b923      	cbnz	r3, 8002df6 <_printf_float+0x2b2>
 8002dec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002dee:	b913      	cbnz	r3, 8002df6 <_printf_float+0x2b2>
 8002df0:	6823      	ldr	r3, [r4, #0]
 8002df2:	07d9      	lsls	r1, r3, #31
 8002df4:	d5d1      	bpl.n	8002d9a <_printf_float+0x256>
 8002df6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002df8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002dfa:	4659      	mov	r1, fp
 8002dfc:	4628      	mov	r0, r5
 8002dfe:	47b0      	blx	r6
 8002e00:	3001      	adds	r0, #1
 8002e02:	f43f aefb 	beq.w	8002bfc <_printf_float+0xb8>
 8002e06:	f04f 0800 	mov.w	r8, #0
 8002e0a:	f104 091a 	add.w	r9, r4, #26
 8002e0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002e10:	425b      	negs	r3, r3
 8002e12:	4598      	cmp	r8, r3
 8002e14:	db01      	blt.n	8002e1a <_printf_float+0x2d6>
 8002e16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002e18:	e78e      	b.n	8002d38 <_printf_float+0x1f4>
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	464a      	mov	r2, r9
 8002e1e:	4659      	mov	r1, fp
 8002e20:	4628      	mov	r0, r5
 8002e22:	47b0      	blx	r6
 8002e24:	3001      	adds	r0, #1
 8002e26:	f43f aee9 	beq.w	8002bfc <_printf_float+0xb8>
 8002e2a:	f108 0801 	add.w	r8, r8, #1
 8002e2e:	e7ee      	b.n	8002e0e <_printf_float+0x2ca>
 8002e30:	7fefffff 	.word	0x7fefffff
 8002e34:	08004d5c 	.word	0x08004d5c
 8002e38:	08004d60 	.word	0x08004d60
 8002e3c:	08004d6c 	.word	0x08004d6c
 8002e40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002e42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e44:	429a      	cmp	r2, r3
 8002e46:	bfa8      	it	ge
 8002e48:	461a      	movge	r2, r3
 8002e4a:	2a00      	cmp	r2, #0
 8002e4c:	4690      	mov	r8, r2
 8002e4e:	dc36      	bgt.n	8002ebe <_printf_float+0x37a>
 8002e50:	f04f 0a00 	mov.w	sl, #0
 8002e54:	f104 031a 	add.w	r3, r4, #26
 8002e58:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8002e5c:	930b      	str	r3, [sp, #44]	; 0x2c
 8002e5e:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8002e62:	eba9 0308 	sub.w	r3, r9, r8
 8002e66:	459a      	cmp	sl, r3
 8002e68:	db31      	blt.n	8002ece <_printf_float+0x38a>
 8002e6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002e6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	db38      	blt.n	8002ee4 <_printf_float+0x3a0>
 8002e72:	6823      	ldr	r3, [r4, #0]
 8002e74:	07da      	lsls	r2, r3, #31
 8002e76:	d435      	bmi.n	8002ee4 <_printf_float+0x3a0>
 8002e78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002e7a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002e7c:	eba3 0209 	sub.w	r2, r3, r9
 8002e80:	eba3 0801 	sub.w	r8, r3, r1
 8002e84:	4590      	cmp	r8, r2
 8002e86:	bfa8      	it	ge
 8002e88:	4690      	movge	r8, r2
 8002e8a:	f1b8 0f00 	cmp.w	r8, #0
 8002e8e:	dc31      	bgt.n	8002ef4 <_printf_float+0x3b0>
 8002e90:	2700      	movs	r7, #0
 8002e92:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8002e96:	f104 091a 	add.w	r9, r4, #26
 8002e9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002e9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002e9e:	1a9b      	subs	r3, r3, r2
 8002ea0:	eba3 0308 	sub.w	r3, r3, r8
 8002ea4:	429f      	cmp	r7, r3
 8002ea6:	f6bf af78 	bge.w	8002d9a <_printf_float+0x256>
 8002eaa:	2301      	movs	r3, #1
 8002eac:	464a      	mov	r2, r9
 8002eae:	4659      	mov	r1, fp
 8002eb0:	4628      	mov	r0, r5
 8002eb2:	47b0      	blx	r6
 8002eb4:	3001      	adds	r0, #1
 8002eb6:	f43f aea1 	beq.w	8002bfc <_printf_float+0xb8>
 8002eba:	3701      	adds	r7, #1
 8002ebc:	e7ed      	b.n	8002e9a <_printf_float+0x356>
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	4659      	mov	r1, fp
 8002ec2:	463a      	mov	r2, r7
 8002ec4:	4628      	mov	r0, r5
 8002ec6:	47b0      	blx	r6
 8002ec8:	3001      	adds	r0, #1
 8002eca:	d1c1      	bne.n	8002e50 <_printf_float+0x30c>
 8002ecc:	e696      	b.n	8002bfc <_printf_float+0xb8>
 8002ece:	2301      	movs	r3, #1
 8002ed0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002ed2:	4659      	mov	r1, fp
 8002ed4:	4628      	mov	r0, r5
 8002ed6:	47b0      	blx	r6
 8002ed8:	3001      	adds	r0, #1
 8002eda:	f43f ae8f 	beq.w	8002bfc <_printf_float+0xb8>
 8002ede:	f10a 0a01 	add.w	sl, sl, #1
 8002ee2:	e7bc      	b.n	8002e5e <_printf_float+0x31a>
 8002ee4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002ee6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ee8:	4659      	mov	r1, fp
 8002eea:	4628      	mov	r0, r5
 8002eec:	47b0      	blx	r6
 8002eee:	3001      	adds	r0, #1
 8002ef0:	d1c2      	bne.n	8002e78 <_printf_float+0x334>
 8002ef2:	e683      	b.n	8002bfc <_printf_float+0xb8>
 8002ef4:	4643      	mov	r3, r8
 8002ef6:	eb07 0209 	add.w	r2, r7, r9
 8002efa:	4659      	mov	r1, fp
 8002efc:	4628      	mov	r0, r5
 8002efe:	47b0      	blx	r6
 8002f00:	3001      	adds	r0, #1
 8002f02:	d1c5      	bne.n	8002e90 <_printf_float+0x34c>
 8002f04:	e67a      	b.n	8002bfc <_printf_float+0xb8>
 8002f06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002f08:	2a01      	cmp	r2, #1
 8002f0a:	dc01      	bgt.n	8002f10 <_printf_float+0x3cc>
 8002f0c:	07db      	lsls	r3, r3, #31
 8002f0e:	d534      	bpl.n	8002f7a <_printf_float+0x436>
 8002f10:	2301      	movs	r3, #1
 8002f12:	463a      	mov	r2, r7
 8002f14:	4659      	mov	r1, fp
 8002f16:	4628      	mov	r0, r5
 8002f18:	47b0      	blx	r6
 8002f1a:	3001      	adds	r0, #1
 8002f1c:	f43f ae6e 	beq.w	8002bfc <_printf_float+0xb8>
 8002f20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f24:	4659      	mov	r1, fp
 8002f26:	4628      	mov	r0, r5
 8002f28:	47b0      	blx	r6
 8002f2a:	3001      	adds	r0, #1
 8002f2c:	f43f ae66 	beq.w	8002bfc <_printf_float+0xb8>
 8002f30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002f34:	2200      	movs	r2, #0
 8002f36:	2300      	movs	r3, #0
 8002f38:	f7fd fd32 	bl	80009a0 <__aeabi_dcmpeq>
 8002f3c:	b150      	cbz	r0, 8002f54 <_printf_float+0x410>
 8002f3e:	2700      	movs	r7, #0
 8002f40:	f104 081a 	add.w	r8, r4, #26
 8002f44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f46:	3b01      	subs	r3, #1
 8002f48:	429f      	cmp	r7, r3
 8002f4a:	db0c      	blt.n	8002f66 <_printf_float+0x422>
 8002f4c:	464b      	mov	r3, r9
 8002f4e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002f52:	e6f2      	b.n	8002d3a <_printf_float+0x1f6>
 8002f54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f56:	1c7a      	adds	r2, r7, #1
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	4659      	mov	r1, fp
 8002f5c:	4628      	mov	r0, r5
 8002f5e:	47b0      	blx	r6
 8002f60:	3001      	adds	r0, #1
 8002f62:	d1f3      	bne.n	8002f4c <_printf_float+0x408>
 8002f64:	e64a      	b.n	8002bfc <_printf_float+0xb8>
 8002f66:	2301      	movs	r3, #1
 8002f68:	4642      	mov	r2, r8
 8002f6a:	4659      	mov	r1, fp
 8002f6c:	4628      	mov	r0, r5
 8002f6e:	47b0      	blx	r6
 8002f70:	3001      	adds	r0, #1
 8002f72:	f43f ae43 	beq.w	8002bfc <_printf_float+0xb8>
 8002f76:	3701      	adds	r7, #1
 8002f78:	e7e4      	b.n	8002f44 <_printf_float+0x400>
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	463a      	mov	r2, r7
 8002f7e:	e7ec      	b.n	8002f5a <_printf_float+0x416>
 8002f80:	2301      	movs	r3, #1
 8002f82:	4642      	mov	r2, r8
 8002f84:	4659      	mov	r1, fp
 8002f86:	4628      	mov	r0, r5
 8002f88:	47b0      	blx	r6
 8002f8a:	3001      	adds	r0, #1
 8002f8c:	f43f ae36 	beq.w	8002bfc <_printf_float+0xb8>
 8002f90:	3701      	adds	r7, #1
 8002f92:	e708      	b.n	8002da6 <_printf_float+0x262>
 8002f94:	463a      	mov	r2, r7
 8002f96:	464b      	mov	r3, r9
 8002f98:	4638      	mov	r0, r7
 8002f9a:	4649      	mov	r1, r9
 8002f9c:	f7fd fd32 	bl	8000a04 <__aeabi_dcmpun>
 8002fa0:	2800      	cmp	r0, #0
 8002fa2:	f43f ae30 	beq.w	8002c06 <_printf_float+0xc2>
 8002fa6:	4b01      	ldr	r3, [pc, #4]	; (8002fac <_printf_float+0x468>)
 8002fa8:	4f01      	ldr	r7, [pc, #4]	; (8002fb0 <_printf_float+0x46c>)
 8002faa:	e612      	b.n	8002bd2 <_printf_float+0x8e>
 8002fac:	08004d64 	.word	0x08004d64
 8002fb0:	08004d68 	.word	0x08004d68

08002fb4 <_printf_common>:
 8002fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fb8:	4691      	mov	r9, r2
 8002fba:	461f      	mov	r7, r3
 8002fbc:	688a      	ldr	r2, [r1, #8]
 8002fbe:	690b      	ldr	r3, [r1, #16]
 8002fc0:	4606      	mov	r6, r0
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	bfb8      	it	lt
 8002fc6:	4613      	movlt	r3, r2
 8002fc8:	f8c9 3000 	str.w	r3, [r9]
 8002fcc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002fd0:	460c      	mov	r4, r1
 8002fd2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002fd6:	b112      	cbz	r2, 8002fde <_printf_common+0x2a>
 8002fd8:	3301      	adds	r3, #1
 8002fda:	f8c9 3000 	str.w	r3, [r9]
 8002fde:	6823      	ldr	r3, [r4, #0]
 8002fe0:	0699      	lsls	r1, r3, #26
 8002fe2:	bf42      	ittt	mi
 8002fe4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002fe8:	3302      	addmi	r3, #2
 8002fea:	f8c9 3000 	strmi.w	r3, [r9]
 8002fee:	6825      	ldr	r5, [r4, #0]
 8002ff0:	f015 0506 	ands.w	r5, r5, #6
 8002ff4:	d107      	bne.n	8003006 <_printf_common+0x52>
 8002ff6:	f104 0a19 	add.w	sl, r4, #25
 8002ffa:	68e3      	ldr	r3, [r4, #12]
 8002ffc:	f8d9 2000 	ldr.w	r2, [r9]
 8003000:	1a9b      	subs	r3, r3, r2
 8003002:	429d      	cmp	r5, r3
 8003004:	db2a      	blt.n	800305c <_printf_common+0xa8>
 8003006:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800300a:	6822      	ldr	r2, [r4, #0]
 800300c:	3300      	adds	r3, #0
 800300e:	bf18      	it	ne
 8003010:	2301      	movne	r3, #1
 8003012:	0692      	lsls	r2, r2, #26
 8003014:	d42f      	bmi.n	8003076 <_printf_common+0xc2>
 8003016:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800301a:	4639      	mov	r1, r7
 800301c:	4630      	mov	r0, r6
 800301e:	47c0      	blx	r8
 8003020:	3001      	adds	r0, #1
 8003022:	d022      	beq.n	800306a <_printf_common+0xb6>
 8003024:	6823      	ldr	r3, [r4, #0]
 8003026:	68e5      	ldr	r5, [r4, #12]
 8003028:	f003 0306 	and.w	r3, r3, #6
 800302c:	2b04      	cmp	r3, #4
 800302e:	bf18      	it	ne
 8003030:	2500      	movne	r5, #0
 8003032:	f8d9 2000 	ldr.w	r2, [r9]
 8003036:	f04f 0900 	mov.w	r9, #0
 800303a:	bf08      	it	eq
 800303c:	1aad      	subeq	r5, r5, r2
 800303e:	68a3      	ldr	r3, [r4, #8]
 8003040:	6922      	ldr	r2, [r4, #16]
 8003042:	bf08      	it	eq
 8003044:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003048:	4293      	cmp	r3, r2
 800304a:	bfc4      	itt	gt
 800304c:	1a9b      	subgt	r3, r3, r2
 800304e:	18ed      	addgt	r5, r5, r3
 8003050:	341a      	adds	r4, #26
 8003052:	454d      	cmp	r5, r9
 8003054:	d11b      	bne.n	800308e <_printf_common+0xda>
 8003056:	2000      	movs	r0, #0
 8003058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800305c:	2301      	movs	r3, #1
 800305e:	4652      	mov	r2, sl
 8003060:	4639      	mov	r1, r7
 8003062:	4630      	mov	r0, r6
 8003064:	47c0      	blx	r8
 8003066:	3001      	adds	r0, #1
 8003068:	d103      	bne.n	8003072 <_printf_common+0xbe>
 800306a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800306e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003072:	3501      	adds	r5, #1
 8003074:	e7c1      	b.n	8002ffa <_printf_common+0x46>
 8003076:	2030      	movs	r0, #48	; 0x30
 8003078:	18e1      	adds	r1, r4, r3
 800307a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800307e:	1c5a      	adds	r2, r3, #1
 8003080:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003084:	4422      	add	r2, r4
 8003086:	3302      	adds	r3, #2
 8003088:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800308c:	e7c3      	b.n	8003016 <_printf_common+0x62>
 800308e:	2301      	movs	r3, #1
 8003090:	4622      	mov	r2, r4
 8003092:	4639      	mov	r1, r7
 8003094:	4630      	mov	r0, r6
 8003096:	47c0      	blx	r8
 8003098:	3001      	adds	r0, #1
 800309a:	d0e6      	beq.n	800306a <_printf_common+0xb6>
 800309c:	f109 0901 	add.w	r9, r9, #1
 80030a0:	e7d7      	b.n	8003052 <_printf_common+0x9e>
	...

080030a4 <_printf_i>:
 80030a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80030a8:	4617      	mov	r7, r2
 80030aa:	7e0a      	ldrb	r2, [r1, #24]
 80030ac:	b085      	sub	sp, #20
 80030ae:	2a6e      	cmp	r2, #110	; 0x6e
 80030b0:	4698      	mov	r8, r3
 80030b2:	4606      	mov	r6, r0
 80030b4:	460c      	mov	r4, r1
 80030b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80030b8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80030bc:	f000 80bc 	beq.w	8003238 <_printf_i+0x194>
 80030c0:	d81a      	bhi.n	80030f8 <_printf_i+0x54>
 80030c2:	2a63      	cmp	r2, #99	; 0x63
 80030c4:	d02e      	beq.n	8003124 <_printf_i+0x80>
 80030c6:	d80a      	bhi.n	80030de <_printf_i+0x3a>
 80030c8:	2a00      	cmp	r2, #0
 80030ca:	f000 80c8 	beq.w	800325e <_printf_i+0x1ba>
 80030ce:	2a58      	cmp	r2, #88	; 0x58
 80030d0:	f000 808a 	beq.w	80031e8 <_printf_i+0x144>
 80030d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030d8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80030dc:	e02a      	b.n	8003134 <_printf_i+0x90>
 80030de:	2a64      	cmp	r2, #100	; 0x64
 80030e0:	d001      	beq.n	80030e6 <_printf_i+0x42>
 80030e2:	2a69      	cmp	r2, #105	; 0x69
 80030e4:	d1f6      	bne.n	80030d4 <_printf_i+0x30>
 80030e6:	6821      	ldr	r1, [r4, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	f011 0f80 	tst.w	r1, #128	; 0x80
 80030ee:	d023      	beq.n	8003138 <_printf_i+0x94>
 80030f0:	1d11      	adds	r1, r2, #4
 80030f2:	6019      	str	r1, [r3, #0]
 80030f4:	6813      	ldr	r3, [r2, #0]
 80030f6:	e027      	b.n	8003148 <_printf_i+0xa4>
 80030f8:	2a73      	cmp	r2, #115	; 0x73
 80030fa:	f000 80b4 	beq.w	8003266 <_printf_i+0x1c2>
 80030fe:	d808      	bhi.n	8003112 <_printf_i+0x6e>
 8003100:	2a6f      	cmp	r2, #111	; 0x6f
 8003102:	d02a      	beq.n	800315a <_printf_i+0xb6>
 8003104:	2a70      	cmp	r2, #112	; 0x70
 8003106:	d1e5      	bne.n	80030d4 <_printf_i+0x30>
 8003108:	680a      	ldr	r2, [r1, #0]
 800310a:	f042 0220 	orr.w	r2, r2, #32
 800310e:	600a      	str	r2, [r1, #0]
 8003110:	e003      	b.n	800311a <_printf_i+0x76>
 8003112:	2a75      	cmp	r2, #117	; 0x75
 8003114:	d021      	beq.n	800315a <_printf_i+0xb6>
 8003116:	2a78      	cmp	r2, #120	; 0x78
 8003118:	d1dc      	bne.n	80030d4 <_printf_i+0x30>
 800311a:	2278      	movs	r2, #120	; 0x78
 800311c:	496f      	ldr	r1, [pc, #444]	; (80032dc <_printf_i+0x238>)
 800311e:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003122:	e064      	b.n	80031ee <_printf_i+0x14a>
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800312a:	1d11      	adds	r1, r2, #4
 800312c:	6019      	str	r1, [r3, #0]
 800312e:	6813      	ldr	r3, [r2, #0]
 8003130:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003134:	2301      	movs	r3, #1
 8003136:	e0a3      	b.n	8003280 <_printf_i+0x1dc>
 8003138:	f011 0f40 	tst.w	r1, #64	; 0x40
 800313c:	f102 0104 	add.w	r1, r2, #4
 8003140:	6019      	str	r1, [r3, #0]
 8003142:	d0d7      	beq.n	80030f4 <_printf_i+0x50>
 8003144:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003148:	2b00      	cmp	r3, #0
 800314a:	da03      	bge.n	8003154 <_printf_i+0xb0>
 800314c:	222d      	movs	r2, #45	; 0x2d
 800314e:	425b      	negs	r3, r3
 8003150:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003154:	4962      	ldr	r1, [pc, #392]	; (80032e0 <_printf_i+0x23c>)
 8003156:	220a      	movs	r2, #10
 8003158:	e017      	b.n	800318a <_printf_i+0xe6>
 800315a:	6820      	ldr	r0, [r4, #0]
 800315c:	6819      	ldr	r1, [r3, #0]
 800315e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003162:	d003      	beq.n	800316c <_printf_i+0xc8>
 8003164:	1d08      	adds	r0, r1, #4
 8003166:	6018      	str	r0, [r3, #0]
 8003168:	680b      	ldr	r3, [r1, #0]
 800316a:	e006      	b.n	800317a <_printf_i+0xd6>
 800316c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003170:	f101 0004 	add.w	r0, r1, #4
 8003174:	6018      	str	r0, [r3, #0]
 8003176:	d0f7      	beq.n	8003168 <_printf_i+0xc4>
 8003178:	880b      	ldrh	r3, [r1, #0]
 800317a:	2a6f      	cmp	r2, #111	; 0x6f
 800317c:	bf14      	ite	ne
 800317e:	220a      	movne	r2, #10
 8003180:	2208      	moveq	r2, #8
 8003182:	4957      	ldr	r1, [pc, #348]	; (80032e0 <_printf_i+0x23c>)
 8003184:	2000      	movs	r0, #0
 8003186:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800318a:	6865      	ldr	r5, [r4, #4]
 800318c:	2d00      	cmp	r5, #0
 800318e:	60a5      	str	r5, [r4, #8]
 8003190:	f2c0 809c 	blt.w	80032cc <_printf_i+0x228>
 8003194:	6820      	ldr	r0, [r4, #0]
 8003196:	f020 0004 	bic.w	r0, r0, #4
 800319a:	6020      	str	r0, [r4, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d13f      	bne.n	8003220 <_printf_i+0x17c>
 80031a0:	2d00      	cmp	r5, #0
 80031a2:	f040 8095 	bne.w	80032d0 <_printf_i+0x22c>
 80031a6:	4675      	mov	r5, lr
 80031a8:	2a08      	cmp	r2, #8
 80031aa:	d10b      	bne.n	80031c4 <_printf_i+0x120>
 80031ac:	6823      	ldr	r3, [r4, #0]
 80031ae:	07da      	lsls	r2, r3, #31
 80031b0:	d508      	bpl.n	80031c4 <_printf_i+0x120>
 80031b2:	6923      	ldr	r3, [r4, #16]
 80031b4:	6862      	ldr	r2, [r4, #4]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	bfde      	ittt	le
 80031ba:	2330      	movle	r3, #48	; 0x30
 80031bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80031c0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80031c4:	ebae 0305 	sub.w	r3, lr, r5
 80031c8:	6123      	str	r3, [r4, #16]
 80031ca:	f8cd 8000 	str.w	r8, [sp]
 80031ce:	463b      	mov	r3, r7
 80031d0:	aa03      	add	r2, sp, #12
 80031d2:	4621      	mov	r1, r4
 80031d4:	4630      	mov	r0, r6
 80031d6:	f7ff feed 	bl	8002fb4 <_printf_common>
 80031da:	3001      	adds	r0, #1
 80031dc:	d155      	bne.n	800328a <_printf_i+0x1e6>
 80031de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031e2:	b005      	add	sp, #20
 80031e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80031e8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80031ec:	493c      	ldr	r1, [pc, #240]	; (80032e0 <_printf_i+0x23c>)
 80031ee:	6822      	ldr	r2, [r4, #0]
 80031f0:	6818      	ldr	r0, [r3, #0]
 80031f2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80031f6:	f100 0504 	add.w	r5, r0, #4
 80031fa:	601d      	str	r5, [r3, #0]
 80031fc:	d001      	beq.n	8003202 <_printf_i+0x15e>
 80031fe:	6803      	ldr	r3, [r0, #0]
 8003200:	e002      	b.n	8003208 <_printf_i+0x164>
 8003202:	0655      	lsls	r5, r2, #25
 8003204:	d5fb      	bpl.n	80031fe <_printf_i+0x15a>
 8003206:	8803      	ldrh	r3, [r0, #0]
 8003208:	07d0      	lsls	r0, r2, #31
 800320a:	bf44      	itt	mi
 800320c:	f042 0220 	orrmi.w	r2, r2, #32
 8003210:	6022      	strmi	r2, [r4, #0]
 8003212:	b91b      	cbnz	r3, 800321c <_printf_i+0x178>
 8003214:	6822      	ldr	r2, [r4, #0]
 8003216:	f022 0220 	bic.w	r2, r2, #32
 800321a:	6022      	str	r2, [r4, #0]
 800321c:	2210      	movs	r2, #16
 800321e:	e7b1      	b.n	8003184 <_printf_i+0xe0>
 8003220:	4675      	mov	r5, lr
 8003222:	fbb3 f0f2 	udiv	r0, r3, r2
 8003226:	fb02 3310 	mls	r3, r2, r0, r3
 800322a:	5ccb      	ldrb	r3, [r1, r3]
 800322c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003230:	4603      	mov	r3, r0
 8003232:	2800      	cmp	r0, #0
 8003234:	d1f5      	bne.n	8003222 <_printf_i+0x17e>
 8003236:	e7b7      	b.n	80031a8 <_printf_i+0x104>
 8003238:	6808      	ldr	r0, [r1, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003240:	6949      	ldr	r1, [r1, #20]
 8003242:	d004      	beq.n	800324e <_printf_i+0x1aa>
 8003244:	1d10      	adds	r0, r2, #4
 8003246:	6018      	str	r0, [r3, #0]
 8003248:	6813      	ldr	r3, [r2, #0]
 800324a:	6019      	str	r1, [r3, #0]
 800324c:	e007      	b.n	800325e <_printf_i+0x1ba>
 800324e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003252:	f102 0004 	add.w	r0, r2, #4
 8003256:	6018      	str	r0, [r3, #0]
 8003258:	6813      	ldr	r3, [r2, #0]
 800325a:	d0f6      	beq.n	800324a <_printf_i+0x1a6>
 800325c:	8019      	strh	r1, [r3, #0]
 800325e:	2300      	movs	r3, #0
 8003260:	4675      	mov	r5, lr
 8003262:	6123      	str	r3, [r4, #16]
 8003264:	e7b1      	b.n	80031ca <_printf_i+0x126>
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	1d11      	adds	r1, r2, #4
 800326a:	6019      	str	r1, [r3, #0]
 800326c:	6815      	ldr	r5, [r2, #0]
 800326e:	2100      	movs	r1, #0
 8003270:	6862      	ldr	r2, [r4, #4]
 8003272:	4628      	mov	r0, r5
 8003274:	f000 feea 	bl	800404c <memchr>
 8003278:	b108      	cbz	r0, 800327e <_printf_i+0x1da>
 800327a:	1b40      	subs	r0, r0, r5
 800327c:	6060      	str	r0, [r4, #4]
 800327e:	6863      	ldr	r3, [r4, #4]
 8003280:	6123      	str	r3, [r4, #16]
 8003282:	2300      	movs	r3, #0
 8003284:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003288:	e79f      	b.n	80031ca <_printf_i+0x126>
 800328a:	6923      	ldr	r3, [r4, #16]
 800328c:	462a      	mov	r2, r5
 800328e:	4639      	mov	r1, r7
 8003290:	4630      	mov	r0, r6
 8003292:	47c0      	blx	r8
 8003294:	3001      	adds	r0, #1
 8003296:	d0a2      	beq.n	80031de <_printf_i+0x13a>
 8003298:	6823      	ldr	r3, [r4, #0]
 800329a:	079b      	lsls	r3, r3, #30
 800329c:	d507      	bpl.n	80032ae <_printf_i+0x20a>
 800329e:	2500      	movs	r5, #0
 80032a0:	f104 0919 	add.w	r9, r4, #25
 80032a4:	68e3      	ldr	r3, [r4, #12]
 80032a6:	9a03      	ldr	r2, [sp, #12]
 80032a8:	1a9b      	subs	r3, r3, r2
 80032aa:	429d      	cmp	r5, r3
 80032ac:	db05      	blt.n	80032ba <_printf_i+0x216>
 80032ae:	68e0      	ldr	r0, [r4, #12]
 80032b0:	9b03      	ldr	r3, [sp, #12]
 80032b2:	4298      	cmp	r0, r3
 80032b4:	bfb8      	it	lt
 80032b6:	4618      	movlt	r0, r3
 80032b8:	e793      	b.n	80031e2 <_printf_i+0x13e>
 80032ba:	2301      	movs	r3, #1
 80032bc:	464a      	mov	r2, r9
 80032be:	4639      	mov	r1, r7
 80032c0:	4630      	mov	r0, r6
 80032c2:	47c0      	blx	r8
 80032c4:	3001      	adds	r0, #1
 80032c6:	d08a      	beq.n	80031de <_printf_i+0x13a>
 80032c8:	3501      	adds	r5, #1
 80032ca:	e7eb      	b.n	80032a4 <_printf_i+0x200>
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1a7      	bne.n	8003220 <_printf_i+0x17c>
 80032d0:	780b      	ldrb	r3, [r1, #0]
 80032d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80032d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80032da:	e765      	b.n	80031a8 <_printf_i+0x104>
 80032dc:	08004d7f 	.word	0x08004d7f
 80032e0:	08004d6e 	.word	0x08004d6e

080032e4 <sniprintf>:
 80032e4:	b40c      	push	{r2, r3}
 80032e6:	b530      	push	{r4, r5, lr}
 80032e8:	4b17      	ldr	r3, [pc, #92]	; (8003348 <sniprintf+0x64>)
 80032ea:	1e0c      	subs	r4, r1, #0
 80032ec:	b09d      	sub	sp, #116	; 0x74
 80032ee:	681d      	ldr	r5, [r3, #0]
 80032f0:	da08      	bge.n	8003304 <sniprintf+0x20>
 80032f2:	238b      	movs	r3, #139	; 0x8b
 80032f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032f8:	602b      	str	r3, [r5, #0]
 80032fa:	b01d      	add	sp, #116	; 0x74
 80032fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003300:	b002      	add	sp, #8
 8003302:	4770      	bx	lr
 8003304:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003308:	f8ad 3014 	strh.w	r3, [sp, #20]
 800330c:	bf0c      	ite	eq
 800330e:	4623      	moveq	r3, r4
 8003310:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8003314:	9304      	str	r3, [sp, #16]
 8003316:	9307      	str	r3, [sp, #28]
 8003318:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800331c:	9002      	str	r0, [sp, #8]
 800331e:	9006      	str	r0, [sp, #24]
 8003320:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003324:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003326:	ab21      	add	r3, sp, #132	; 0x84
 8003328:	a902      	add	r1, sp, #8
 800332a:	4628      	mov	r0, r5
 800332c:	9301      	str	r3, [sp, #4]
 800332e:	f001 fa8b 	bl	8004848 <_svfiprintf_r>
 8003332:	1c43      	adds	r3, r0, #1
 8003334:	bfbc      	itt	lt
 8003336:	238b      	movlt	r3, #139	; 0x8b
 8003338:	602b      	strlt	r3, [r5, #0]
 800333a:	2c00      	cmp	r4, #0
 800333c:	d0dd      	beq.n	80032fa <sniprintf+0x16>
 800333e:	2200      	movs	r2, #0
 8003340:	9b02      	ldr	r3, [sp, #8]
 8003342:	701a      	strb	r2, [r3, #0]
 8003344:	e7d9      	b.n	80032fa <sniprintf+0x16>
 8003346:	bf00      	nop
 8003348:	2000000c 	.word	0x2000000c

0800334c <strcpy>:
 800334c:	4603      	mov	r3, r0
 800334e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003352:	f803 2b01 	strb.w	r2, [r3], #1
 8003356:	2a00      	cmp	r2, #0
 8003358:	d1f9      	bne.n	800334e <strcpy+0x2>
 800335a:	4770      	bx	lr

0800335c <quorem>:
 800335c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003360:	6903      	ldr	r3, [r0, #16]
 8003362:	690c      	ldr	r4, [r1, #16]
 8003364:	4680      	mov	r8, r0
 8003366:	429c      	cmp	r4, r3
 8003368:	f300 8082 	bgt.w	8003470 <quorem+0x114>
 800336c:	3c01      	subs	r4, #1
 800336e:	f101 0714 	add.w	r7, r1, #20
 8003372:	f100 0614 	add.w	r6, r0, #20
 8003376:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800337a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800337e:	3501      	adds	r5, #1
 8003380:	fbb0 f5f5 	udiv	r5, r0, r5
 8003384:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8003388:	eb06 030e 	add.w	r3, r6, lr
 800338c:	eb07 090e 	add.w	r9, r7, lr
 8003390:	9301      	str	r3, [sp, #4]
 8003392:	b38d      	cbz	r5, 80033f8 <quorem+0x9c>
 8003394:	f04f 0a00 	mov.w	sl, #0
 8003398:	4638      	mov	r0, r7
 800339a:	46b4      	mov	ip, r6
 800339c:	46d3      	mov	fp, sl
 800339e:	f850 2b04 	ldr.w	r2, [r0], #4
 80033a2:	b293      	uxth	r3, r2
 80033a4:	fb05 a303 	mla	r3, r5, r3, sl
 80033a8:	0c12      	lsrs	r2, r2, #16
 80033aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80033ae:	fb05 a202 	mla	r2, r5, r2, sl
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	ebab 0303 	sub.w	r3, fp, r3
 80033b8:	f8bc b000 	ldrh.w	fp, [ip]
 80033bc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80033c0:	445b      	add	r3, fp
 80033c2:	fa1f fb82 	uxth.w	fp, r2
 80033c6:	f8dc 2000 	ldr.w	r2, [ip]
 80033ca:	4581      	cmp	r9, r0
 80033cc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80033d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80033da:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80033de:	f84c 3b04 	str.w	r3, [ip], #4
 80033e2:	d2dc      	bcs.n	800339e <quorem+0x42>
 80033e4:	f856 300e 	ldr.w	r3, [r6, lr]
 80033e8:	b933      	cbnz	r3, 80033f8 <quorem+0x9c>
 80033ea:	9b01      	ldr	r3, [sp, #4]
 80033ec:	3b04      	subs	r3, #4
 80033ee:	429e      	cmp	r6, r3
 80033f0:	461a      	mov	r2, r3
 80033f2:	d331      	bcc.n	8003458 <quorem+0xfc>
 80033f4:	f8c8 4010 	str.w	r4, [r8, #16]
 80033f8:	4640      	mov	r0, r8
 80033fa:	f001 f848 	bl	800448e <__mcmp>
 80033fe:	2800      	cmp	r0, #0
 8003400:	db26      	blt.n	8003450 <quorem+0xf4>
 8003402:	4630      	mov	r0, r6
 8003404:	f04f 0e00 	mov.w	lr, #0
 8003408:	3501      	adds	r5, #1
 800340a:	f857 1b04 	ldr.w	r1, [r7], #4
 800340e:	f8d0 c000 	ldr.w	ip, [r0]
 8003412:	b28b      	uxth	r3, r1
 8003414:	ebae 0303 	sub.w	r3, lr, r3
 8003418:	fa1f f28c 	uxth.w	r2, ip
 800341c:	4413      	add	r3, r2
 800341e:	0c0a      	lsrs	r2, r1, #16
 8003420:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003424:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003428:	b29b      	uxth	r3, r3
 800342a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800342e:	45b9      	cmp	r9, r7
 8003430:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8003434:	f840 3b04 	str.w	r3, [r0], #4
 8003438:	d2e7      	bcs.n	800340a <quorem+0xae>
 800343a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800343e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003442:	b92a      	cbnz	r2, 8003450 <quorem+0xf4>
 8003444:	3b04      	subs	r3, #4
 8003446:	429e      	cmp	r6, r3
 8003448:	461a      	mov	r2, r3
 800344a:	d30b      	bcc.n	8003464 <quorem+0x108>
 800344c:	f8c8 4010 	str.w	r4, [r8, #16]
 8003450:	4628      	mov	r0, r5
 8003452:	b003      	add	sp, #12
 8003454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003458:	6812      	ldr	r2, [r2, #0]
 800345a:	3b04      	subs	r3, #4
 800345c:	2a00      	cmp	r2, #0
 800345e:	d1c9      	bne.n	80033f4 <quorem+0x98>
 8003460:	3c01      	subs	r4, #1
 8003462:	e7c4      	b.n	80033ee <quorem+0x92>
 8003464:	6812      	ldr	r2, [r2, #0]
 8003466:	3b04      	subs	r3, #4
 8003468:	2a00      	cmp	r2, #0
 800346a:	d1ef      	bne.n	800344c <quorem+0xf0>
 800346c:	3c01      	subs	r4, #1
 800346e:	e7ea      	b.n	8003446 <quorem+0xea>
 8003470:	2000      	movs	r0, #0
 8003472:	e7ee      	b.n	8003452 <quorem+0xf6>
 8003474:	0000      	movs	r0, r0
	...

08003478 <_dtoa_r>:
 8003478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800347c:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800347e:	b095      	sub	sp, #84	; 0x54
 8003480:	4604      	mov	r4, r0
 8003482:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8003484:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003488:	b93e      	cbnz	r6, 800349a <_dtoa_r+0x22>
 800348a:	2010      	movs	r0, #16
 800348c:	f000 fdd6 	bl	800403c <malloc>
 8003490:	6260      	str	r0, [r4, #36]	; 0x24
 8003492:	6046      	str	r6, [r0, #4]
 8003494:	6086      	str	r6, [r0, #8]
 8003496:	6006      	str	r6, [r0, #0]
 8003498:	60c6      	str	r6, [r0, #12]
 800349a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800349c:	6819      	ldr	r1, [r3, #0]
 800349e:	b151      	cbz	r1, 80034b6 <_dtoa_r+0x3e>
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	2301      	movs	r3, #1
 80034a4:	4093      	lsls	r3, r2
 80034a6:	604a      	str	r2, [r1, #4]
 80034a8:	608b      	str	r3, [r1, #8]
 80034aa:	4620      	mov	r0, r4
 80034ac:	f000 fe1b 	bl	80040e6 <_Bfree>
 80034b0:	2200      	movs	r2, #0
 80034b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	9b03      	ldr	r3, [sp, #12]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	bfb7      	itett	lt
 80034bc:	2301      	movlt	r3, #1
 80034be:	2300      	movge	r3, #0
 80034c0:	602b      	strlt	r3, [r5, #0]
 80034c2:	9b03      	ldrlt	r3, [sp, #12]
 80034c4:	bfae      	itee	ge
 80034c6:	602b      	strge	r3, [r5, #0]
 80034c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80034cc:	9303      	strlt	r3, [sp, #12]
 80034ce:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80034d2:	4bab      	ldr	r3, [pc, #684]	; (8003780 <_dtoa_r+0x308>)
 80034d4:	ea33 0309 	bics.w	r3, r3, r9
 80034d8:	d11b      	bne.n	8003512 <_dtoa_r+0x9a>
 80034da:	f242 730f 	movw	r3, #9999	; 0x270f
 80034de:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80034e0:	6013      	str	r3, [r2, #0]
 80034e2:	9b02      	ldr	r3, [sp, #8]
 80034e4:	b923      	cbnz	r3, 80034f0 <_dtoa_r+0x78>
 80034e6:	f3c9 0013 	ubfx	r0, r9, #0, #20
 80034ea:	2800      	cmp	r0, #0
 80034ec:	f000 8583 	beq.w	8003ff6 <_dtoa_r+0xb7e>
 80034f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80034f2:	b953      	cbnz	r3, 800350a <_dtoa_r+0x92>
 80034f4:	4ba3      	ldr	r3, [pc, #652]	; (8003784 <_dtoa_r+0x30c>)
 80034f6:	e021      	b.n	800353c <_dtoa_r+0xc4>
 80034f8:	4ba3      	ldr	r3, [pc, #652]	; (8003788 <_dtoa_r+0x310>)
 80034fa:	9306      	str	r3, [sp, #24]
 80034fc:	3308      	adds	r3, #8
 80034fe:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003500:	6013      	str	r3, [r2, #0]
 8003502:	9806      	ldr	r0, [sp, #24]
 8003504:	b015      	add	sp, #84	; 0x54
 8003506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800350a:	4b9e      	ldr	r3, [pc, #632]	; (8003784 <_dtoa_r+0x30c>)
 800350c:	9306      	str	r3, [sp, #24]
 800350e:	3303      	adds	r3, #3
 8003510:	e7f5      	b.n	80034fe <_dtoa_r+0x86>
 8003512:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003516:	2200      	movs	r2, #0
 8003518:	2300      	movs	r3, #0
 800351a:	4630      	mov	r0, r6
 800351c:	4639      	mov	r1, r7
 800351e:	f7fd fa3f 	bl	80009a0 <__aeabi_dcmpeq>
 8003522:	4680      	mov	r8, r0
 8003524:	b160      	cbz	r0, 8003540 <_dtoa_r+0xc8>
 8003526:	2301      	movs	r3, #1
 8003528:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800352a:	6013      	str	r3, [r2, #0]
 800352c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 855e 	beq.w	8003ff0 <_dtoa_r+0xb78>
 8003534:	4b95      	ldr	r3, [pc, #596]	; (800378c <_dtoa_r+0x314>)
 8003536:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003538:	6013      	str	r3, [r2, #0]
 800353a:	3b01      	subs	r3, #1
 800353c:	9306      	str	r3, [sp, #24]
 800353e:	e7e0      	b.n	8003502 <_dtoa_r+0x8a>
 8003540:	ab12      	add	r3, sp, #72	; 0x48
 8003542:	9301      	str	r3, [sp, #4]
 8003544:	ab13      	add	r3, sp, #76	; 0x4c
 8003546:	9300      	str	r3, [sp, #0]
 8003548:	4632      	mov	r2, r6
 800354a:	463b      	mov	r3, r7
 800354c:	4620      	mov	r0, r4
 800354e:	f001 f817 	bl	8004580 <__d2b>
 8003552:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8003556:	4682      	mov	sl, r0
 8003558:	2d00      	cmp	r5, #0
 800355a:	d07d      	beq.n	8003658 <_dtoa_r+0x1e0>
 800355c:	4630      	mov	r0, r6
 800355e:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003562:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003566:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800356a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800356e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8003572:	2200      	movs	r2, #0
 8003574:	4b86      	ldr	r3, [pc, #536]	; (8003790 <_dtoa_r+0x318>)
 8003576:	f7fc fdf7 	bl	8000168 <__aeabi_dsub>
 800357a:	a37b      	add	r3, pc, #492	; (adr r3, 8003768 <_dtoa_r+0x2f0>)
 800357c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003580:	f7fc ffa6 	bl	80004d0 <__aeabi_dmul>
 8003584:	a37a      	add	r3, pc, #488	; (adr r3, 8003770 <_dtoa_r+0x2f8>)
 8003586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358a:	f7fc fdef 	bl	800016c <__adddf3>
 800358e:	4606      	mov	r6, r0
 8003590:	4628      	mov	r0, r5
 8003592:	460f      	mov	r7, r1
 8003594:	f7fc ff36 	bl	8000404 <__aeabi_i2d>
 8003598:	a377      	add	r3, pc, #476	; (adr r3, 8003778 <_dtoa_r+0x300>)
 800359a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359e:	f7fc ff97 	bl	80004d0 <__aeabi_dmul>
 80035a2:	4602      	mov	r2, r0
 80035a4:	460b      	mov	r3, r1
 80035a6:	4630      	mov	r0, r6
 80035a8:	4639      	mov	r1, r7
 80035aa:	f7fc fddf 	bl	800016c <__adddf3>
 80035ae:	4606      	mov	r6, r0
 80035b0:	460f      	mov	r7, r1
 80035b2:	f7fd fa3d 	bl	8000a30 <__aeabi_d2iz>
 80035b6:	2200      	movs	r2, #0
 80035b8:	4683      	mov	fp, r0
 80035ba:	2300      	movs	r3, #0
 80035bc:	4630      	mov	r0, r6
 80035be:	4639      	mov	r1, r7
 80035c0:	f7fd f9f8 	bl	80009b4 <__aeabi_dcmplt>
 80035c4:	b158      	cbz	r0, 80035de <_dtoa_r+0x166>
 80035c6:	4658      	mov	r0, fp
 80035c8:	f7fc ff1c 	bl	8000404 <__aeabi_i2d>
 80035cc:	4602      	mov	r2, r0
 80035ce:	460b      	mov	r3, r1
 80035d0:	4630      	mov	r0, r6
 80035d2:	4639      	mov	r1, r7
 80035d4:	f7fd f9e4 	bl	80009a0 <__aeabi_dcmpeq>
 80035d8:	b908      	cbnz	r0, 80035de <_dtoa_r+0x166>
 80035da:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80035de:	f1bb 0f16 	cmp.w	fp, #22
 80035e2:	d858      	bhi.n	8003696 <_dtoa_r+0x21e>
 80035e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80035e8:	496a      	ldr	r1, [pc, #424]	; (8003794 <_dtoa_r+0x31c>)
 80035ea:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80035ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80035f2:	f7fd f9fd 	bl	80009f0 <__aeabi_dcmpgt>
 80035f6:	2800      	cmp	r0, #0
 80035f8:	d04f      	beq.n	800369a <_dtoa_r+0x222>
 80035fa:	2300      	movs	r3, #0
 80035fc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003600:	930d      	str	r3, [sp, #52]	; 0x34
 8003602:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003604:	1b5d      	subs	r5, r3, r5
 8003606:	1e6b      	subs	r3, r5, #1
 8003608:	9307      	str	r3, [sp, #28]
 800360a:	bf43      	ittte	mi
 800360c:	2300      	movmi	r3, #0
 800360e:	f1c5 0801 	rsbmi	r8, r5, #1
 8003612:	9307      	strmi	r3, [sp, #28]
 8003614:	f04f 0800 	movpl.w	r8, #0
 8003618:	f1bb 0f00 	cmp.w	fp, #0
 800361c:	db3f      	blt.n	800369e <_dtoa_r+0x226>
 800361e:	9b07      	ldr	r3, [sp, #28]
 8003620:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8003624:	445b      	add	r3, fp
 8003626:	9307      	str	r3, [sp, #28]
 8003628:	2300      	movs	r3, #0
 800362a:	9308      	str	r3, [sp, #32]
 800362c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800362e:	2b09      	cmp	r3, #9
 8003630:	f200 80b4 	bhi.w	800379c <_dtoa_r+0x324>
 8003634:	2b05      	cmp	r3, #5
 8003636:	bfc4      	itt	gt
 8003638:	3b04      	subgt	r3, #4
 800363a:	931e      	strgt	r3, [sp, #120]	; 0x78
 800363c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800363e:	bfc8      	it	gt
 8003640:	2600      	movgt	r6, #0
 8003642:	f1a3 0302 	sub.w	r3, r3, #2
 8003646:	bfd8      	it	le
 8003648:	2601      	movle	r6, #1
 800364a:	2b03      	cmp	r3, #3
 800364c:	f200 80b2 	bhi.w	80037b4 <_dtoa_r+0x33c>
 8003650:	e8df f003 	tbb	[pc, r3]
 8003654:	782d8684 	.word	0x782d8684
 8003658:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800365a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800365c:	441d      	add	r5, r3
 800365e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003662:	2b20      	cmp	r3, #32
 8003664:	dd11      	ble.n	800368a <_dtoa_r+0x212>
 8003666:	9a02      	ldr	r2, [sp, #8]
 8003668:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800366c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003670:	fa22 f000 	lsr.w	r0, r2, r0
 8003674:	fa09 f303 	lsl.w	r3, r9, r3
 8003678:	4318      	orrs	r0, r3
 800367a:	f7fc feb3 	bl	80003e4 <__aeabi_ui2d>
 800367e:	2301      	movs	r3, #1
 8003680:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003684:	3d01      	subs	r5, #1
 8003686:	9310      	str	r3, [sp, #64]	; 0x40
 8003688:	e773      	b.n	8003572 <_dtoa_r+0xfa>
 800368a:	f1c3 0020 	rsb	r0, r3, #32
 800368e:	9b02      	ldr	r3, [sp, #8]
 8003690:	fa03 f000 	lsl.w	r0, r3, r0
 8003694:	e7f1      	b.n	800367a <_dtoa_r+0x202>
 8003696:	2301      	movs	r3, #1
 8003698:	e7b2      	b.n	8003600 <_dtoa_r+0x188>
 800369a:	900d      	str	r0, [sp, #52]	; 0x34
 800369c:	e7b1      	b.n	8003602 <_dtoa_r+0x18a>
 800369e:	f1cb 0300 	rsb	r3, fp, #0
 80036a2:	9308      	str	r3, [sp, #32]
 80036a4:	2300      	movs	r3, #0
 80036a6:	eba8 080b 	sub.w	r8, r8, fp
 80036aa:	930c      	str	r3, [sp, #48]	; 0x30
 80036ac:	e7be      	b.n	800362c <_dtoa_r+0x1b4>
 80036ae:	2301      	movs	r3, #1
 80036b0:	9309      	str	r3, [sp, #36]	; 0x24
 80036b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f340 8080 	ble.w	80037ba <_dtoa_r+0x342>
 80036ba:	4699      	mov	r9, r3
 80036bc:	9304      	str	r3, [sp, #16]
 80036be:	2200      	movs	r2, #0
 80036c0:	2104      	movs	r1, #4
 80036c2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80036c4:	606a      	str	r2, [r5, #4]
 80036c6:	f101 0214 	add.w	r2, r1, #20
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d97a      	bls.n	80037c4 <_dtoa_r+0x34c>
 80036ce:	6869      	ldr	r1, [r5, #4]
 80036d0:	4620      	mov	r0, r4
 80036d2:	f000 fcd4 	bl	800407e <_Balloc>
 80036d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036d8:	6028      	str	r0, [r5, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f1b9 0f0e 	cmp.w	r9, #14
 80036e0:	9306      	str	r3, [sp, #24]
 80036e2:	f200 80f0 	bhi.w	80038c6 <_dtoa_r+0x44e>
 80036e6:	2e00      	cmp	r6, #0
 80036e8:	f000 80ed 	beq.w	80038c6 <_dtoa_r+0x44e>
 80036ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80036f0:	f1bb 0f00 	cmp.w	fp, #0
 80036f4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80036f8:	dd79      	ble.n	80037ee <_dtoa_r+0x376>
 80036fa:	4a26      	ldr	r2, [pc, #152]	; (8003794 <_dtoa_r+0x31c>)
 80036fc:	f00b 030f 	and.w	r3, fp, #15
 8003700:	ea4f 162b 	mov.w	r6, fp, asr #4
 8003704:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003708:	06f0      	lsls	r0, r6, #27
 800370a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003712:	d55c      	bpl.n	80037ce <_dtoa_r+0x356>
 8003714:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003718:	4b1f      	ldr	r3, [pc, #124]	; (8003798 <_dtoa_r+0x320>)
 800371a:	2503      	movs	r5, #3
 800371c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003720:	f7fd f800 	bl	8000724 <__aeabi_ddiv>
 8003724:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003728:	f006 060f 	and.w	r6, r6, #15
 800372c:	4f1a      	ldr	r7, [pc, #104]	; (8003798 <_dtoa_r+0x320>)
 800372e:	2e00      	cmp	r6, #0
 8003730:	d14f      	bne.n	80037d2 <_dtoa_r+0x35a>
 8003732:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003736:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800373a:	f7fc fff3 	bl	8000724 <__aeabi_ddiv>
 800373e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003742:	e06e      	b.n	8003822 <_dtoa_r+0x3aa>
 8003744:	2301      	movs	r3, #1
 8003746:	9309      	str	r3, [sp, #36]	; 0x24
 8003748:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800374a:	445b      	add	r3, fp
 800374c:	f103 0901 	add.w	r9, r3, #1
 8003750:	9304      	str	r3, [sp, #16]
 8003752:	464b      	mov	r3, r9
 8003754:	2b01      	cmp	r3, #1
 8003756:	bfb8      	it	lt
 8003758:	2301      	movlt	r3, #1
 800375a:	e7b0      	b.n	80036be <_dtoa_r+0x246>
 800375c:	2300      	movs	r3, #0
 800375e:	e7a7      	b.n	80036b0 <_dtoa_r+0x238>
 8003760:	2300      	movs	r3, #0
 8003762:	e7f0      	b.n	8003746 <_dtoa_r+0x2ce>
 8003764:	f3af 8000 	nop.w
 8003768:	636f4361 	.word	0x636f4361
 800376c:	3fd287a7 	.word	0x3fd287a7
 8003770:	8b60c8b3 	.word	0x8b60c8b3
 8003774:	3fc68a28 	.word	0x3fc68a28
 8003778:	509f79fb 	.word	0x509f79fb
 800377c:	3fd34413 	.word	0x3fd34413
 8003780:	7ff00000 	.word	0x7ff00000
 8003784:	08004d99 	.word	0x08004d99
 8003788:	08004d90 	.word	0x08004d90
 800378c:	08004d6d 	.word	0x08004d6d
 8003790:	3ff80000 	.word	0x3ff80000
 8003794:	08004dc8 	.word	0x08004dc8
 8003798:	08004da0 	.word	0x08004da0
 800379c:	2601      	movs	r6, #1
 800379e:	2300      	movs	r3, #0
 80037a0:	9609      	str	r6, [sp, #36]	; 0x24
 80037a2:	931e      	str	r3, [sp, #120]	; 0x78
 80037a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037a8:	2200      	movs	r2, #0
 80037aa:	9304      	str	r3, [sp, #16]
 80037ac:	4699      	mov	r9, r3
 80037ae:	2312      	movs	r3, #18
 80037b0:	921f      	str	r2, [sp, #124]	; 0x7c
 80037b2:	e784      	b.n	80036be <_dtoa_r+0x246>
 80037b4:	2301      	movs	r3, #1
 80037b6:	9309      	str	r3, [sp, #36]	; 0x24
 80037b8:	e7f4      	b.n	80037a4 <_dtoa_r+0x32c>
 80037ba:	2301      	movs	r3, #1
 80037bc:	9304      	str	r3, [sp, #16]
 80037be:	4699      	mov	r9, r3
 80037c0:	461a      	mov	r2, r3
 80037c2:	e7f5      	b.n	80037b0 <_dtoa_r+0x338>
 80037c4:	686a      	ldr	r2, [r5, #4]
 80037c6:	0049      	lsls	r1, r1, #1
 80037c8:	3201      	adds	r2, #1
 80037ca:	606a      	str	r2, [r5, #4]
 80037cc:	e77b      	b.n	80036c6 <_dtoa_r+0x24e>
 80037ce:	2502      	movs	r5, #2
 80037d0:	e7ac      	b.n	800372c <_dtoa_r+0x2b4>
 80037d2:	07f1      	lsls	r1, r6, #31
 80037d4:	d508      	bpl.n	80037e8 <_dtoa_r+0x370>
 80037d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80037da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037de:	f7fc fe77 	bl	80004d0 <__aeabi_dmul>
 80037e2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80037e6:	3501      	adds	r5, #1
 80037e8:	1076      	asrs	r6, r6, #1
 80037ea:	3708      	adds	r7, #8
 80037ec:	e79f      	b.n	800372e <_dtoa_r+0x2b6>
 80037ee:	f000 80a5 	beq.w	800393c <_dtoa_r+0x4c4>
 80037f2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80037f6:	f1cb 0600 	rsb	r6, fp, #0
 80037fa:	4ba2      	ldr	r3, [pc, #648]	; (8003a84 <_dtoa_r+0x60c>)
 80037fc:	f006 020f 	and.w	r2, r6, #15
 8003800:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003808:	f7fc fe62 	bl	80004d0 <__aeabi_dmul>
 800380c:	2502      	movs	r5, #2
 800380e:	2300      	movs	r3, #0
 8003810:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003814:	4f9c      	ldr	r7, [pc, #624]	; (8003a88 <_dtoa_r+0x610>)
 8003816:	1136      	asrs	r6, r6, #4
 8003818:	2e00      	cmp	r6, #0
 800381a:	f040 8084 	bne.w	8003926 <_dtoa_r+0x4ae>
 800381e:	2b00      	cmp	r3, #0
 8003820:	d18d      	bne.n	800373e <_dtoa_r+0x2c6>
 8003822:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003824:	2b00      	cmp	r3, #0
 8003826:	f000 808b 	beq.w	8003940 <_dtoa_r+0x4c8>
 800382a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800382e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003832:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003836:	2200      	movs	r2, #0
 8003838:	4b94      	ldr	r3, [pc, #592]	; (8003a8c <_dtoa_r+0x614>)
 800383a:	f7fd f8bb 	bl	80009b4 <__aeabi_dcmplt>
 800383e:	2800      	cmp	r0, #0
 8003840:	d07e      	beq.n	8003940 <_dtoa_r+0x4c8>
 8003842:	f1b9 0f00 	cmp.w	r9, #0
 8003846:	d07b      	beq.n	8003940 <_dtoa_r+0x4c8>
 8003848:	9b04      	ldr	r3, [sp, #16]
 800384a:	2b00      	cmp	r3, #0
 800384c:	dd37      	ble.n	80038be <_dtoa_r+0x446>
 800384e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003852:	2200      	movs	r2, #0
 8003854:	4b8e      	ldr	r3, [pc, #568]	; (8003a90 <_dtoa_r+0x618>)
 8003856:	f7fc fe3b 	bl	80004d0 <__aeabi_dmul>
 800385a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800385e:	9e04      	ldr	r6, [sp, #16]
 8003860:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8003864:	3501      	adds	r5, #1
 8003866:	4628      	mov	r0, r5
 8003868:	f7fc fdcc 	bl	8000404 <__aeabi_i2d>
 800386c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003870:	f7fc fe2e 	bl	80004d0 <__aeabi_dmul>
 8003874:	4b87      	ldr	r3, [pc, #540]	; (8003a94 <_dtoa_r+0x61c>)
 8003876:	2200      	movs	r2, #0
 8003878:	f7fc fc78 	bl	800016c <__adddf3>
 800387c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003880:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003882:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 8003886:	950b      	str	r5, [sp, #44]	; 0x2c
 8003888:	2e00      	cmp	r6, #0
 800388a:	d15c      	bne.n	8003946 <_dtoa_r+0x4ce>
 800388c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003890:	2200      	movs	r2, #0
 8003892:	4b81      	ldr	r3, [pc, #516]	; (8003a98 <_dtoa_r+0x620>)
 8003894:	f7fc fc68 	bl	8000168 <__aeabi_dsub>
 8003898:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800389a:	462b      	mov	r3, r5
 800389c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80038a0:	f7fd f8a6 	bl	80009f0 <__aeabi_dcmpgt>
 80038a4:	2800      	cmp	r0, #0
 80038a6:	f040 82f7 	bne.w	8003e98 <_dtoa_r+0xa20>
 80038aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80038ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80038b0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80038b4:	f7fd f87e 	bl	80009b4 <__aeabi_dcmplt>
 80038b8:	2800      	cmp	r0, #0
 80038ba:	f040 82eb 	bne.w	8003e94 <_dtoa_r+0xa1c>
 80038be:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80038c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80038c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f2c0 8150 	blt.w	8003b6e <_dtoa_r+0x6f6>
 80038ce:	f1bb 0f0e 	cmp.w	fp, #14
 80038d2:	f300 814c 	bgt.w	8003b6e <_dtoa_r+0x6f6>
 80038d6:	4b6b      	ldr	r3, [pc, #428]	; (8003a84 <_dtoa_r+0x60c>)
 80038d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80038dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80038e4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f280 80da 	bge.w	8003aa0 <_dtoa_r+0x628>
 80038ec:	f1b9 0f00 	cmp.w	r9, #0
 80038f0:	f300 80d6 	bgt.w	8003aa0 <_dtoa_r+0x628>
 80038f4:	f040 82cd 	bne.w	8003e92 <_dtoa_r+0xa1a>
 80038f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80038fc:	2200      	movs	r2, #0
 80038fe:	4b66      	ldr	r3, [pc, #408]	; (8003a98 <_dtoa_r+0x620>)
 8003900:	f7fc fde6 	bl	80004d0 <__aeabi_dmul>
 8003904:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003908:	f7fd f868 	bl	80009dc <__aeabi_dcmpge>
 800390c:	464e      	mov	r6, r9
 800390e:	464f      	mov	r7, r9
 8003910:	2800      	cmp	r0, #0
 8003912:	f040 82a4 	bne.w	8003e5e <_dtoa_r+0x9e6>
 8003916:	9b06      	ldr	r3, [sp, #24]
 8003918:	9a06      	ldr	r2, [sp, #24]
 800391a:	1c5d      	adds	r5, r3, #1
 800391c:	2331      	movs	r3, #49	; 0x31
 800391e:	f10b 0b01 	add.w	fp, fp, #1
 8003922:	7013      	strb	r3, [r2, #0]
 8003924:	e29f      	b.n	8003e66 <_dtoa_r+0x9ee>
 8003926:	07f2      	lsls	r2, r6, #31
 8003928:	d505      	bpl.n	8003936 <_dtoa_r+0x4be>
 800392a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800392e:	f7fc fdcf 	bl	80004d0 <__aeabi_dmul>
 8003932:	2301      	movs	r3, #1
 8003934:	3501      	adds	r5, #1
 8003936:	1076      	asrs	r6, r6, #1
 8003938:	3708      	adds	r7, #8
 800393a:	e76d      	b.n	8003818 <_dtoa_r+0x3a0>
 800393c:	2502      	movs	r5, #2
 800393e:	e770      	b.n	8003822 <_dtoa_r+0x3aa>
 8003940:	465f      	mov	r7, fp
 8003942:	464e      	mov	r6, r9
 8003944:	e78f      	b.n	8003866 <_dtoa_r+0x3ee>
 8003946:	9a06      	ldr	r2, [sp, #24]
 8003948:	4b4e      	ldr	r3, [pc, #312]	; (8003a84 <_dtoa_r+0x60c>)
 800394a:	4432      	add	r2, r6
 800394c:	9211      	str	r2, [sp, #68]	; 0x44
 800394e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003950:	1e71      	subs	r1, r6, #1
 8003952:	2a00      	cmp	r2, #0
 8003954:	d048      	beq.n	80039e8 <_dtoa_r+0x570>
 8003956:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800395a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395e:	2000      	movs	r0, #0
 8003960:	494e      	ldr	r1, [pc, #312]	; (8003a9c <_dtoa_r+0x624>)
 8003962:	f7fc fedf 	bl	8000724 <__aeabi_ddiv>
 8003966:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800396a:	f7fc fbfd 	bl	8000168 <__aeabi_dsub>
 800396e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003972:	9d06      	ldr	r5, [sp, #24]
 8003974:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003978:	f7fd f85a 	bl	8000a30 <__aeabi_d2iz>
 800397c:	4606      	mov	r6, r0
 800397e:	f7fc fd41 	bl	8000404 <__aeabi_i2d>
 8003982:	4602      	mov	r2, r0
 8003984:	460b      	mov	r3, r1
 8003986:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800398a:	f7fc fbed 	bl	8000168 <__aeabi_dsub>
 800398e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003992:	3630      	adds	r6, #48	; 0x30
 8003994:	f805 6b01 	strb.w	r6, [r5], #1
 8003998:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800399c:	f7fd f80a 	bl	80009b4 <__aeabi_dcmplt>
 80039a0:	2800      	cmp	r0, #0
 80039a2:	d164      	bne.n	8003a6e <_dtoa_r+0x5f6>
 80039a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80039a8:	2000      	movs	r0, #0
 80039aa:	4938      	ldr	r1, [pc, #224]	; (8003a8c <_dtoa_r+0x614>)
 80039ac:	f7fc fbdc 	bl	8000168 <__aeabi_dsub>
 80039b0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80039b4:	f7fc fffe 	bl	80009b4 <__aeabi_dcmplt>
 80039b8:	2800      	cmp	r0, #0
 80039ba:	f040 80b9 	bne.w	8003b30 <_dtoa_r+0x6b8>
 80039be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80039c0:	429d      	cmp	r5, r3
 80039c2:	f43f af7c 	beq.w	80038be <_dtoa_r+0x446>
 80039c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80039ca:	2200      	movs	r2, #0
 80039cc:	4b30      	ldr	r3, [pc, #192]	; (8003a90 <_dtoa_r+0x618>)
 80039ce:	f7fc fd7f 	bl	80004d0 <__aeabi_dmul>
 80039d2:	2200      	movs	r2, #0
 80039d4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80039d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80039dc:	4b2c      	ldr	r3, [pc, #176]	; (8003a90 <_dtoa_r+0x618>)
 80039de:	f7fc fd77 	bl	80004d0 <__aeabi_dmul>
 80039e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80039e6:	e7c5      	b.n	8003974 <_dtoa_r+0x4fc>
 80039e8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80039ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80039f0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80039f4:	f7fc fd6c 	bl	80004d0 <__aeabi_dmul>
 80039f8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80039fc:	9d06      	ldr	r5, [sp, #24]
 80039fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a02:	f7fd f815 	bl	8000a30 <__aeabi_d2iz>
 8003a06:	4606      	mov	r6, r0
 8003a08:	f7fc fcfc 	bl	8000404 <__aeabi_i2d>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	460b      	mov	r3, r1
 8003a10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a14:	f7fc fba8 	bl	8000168 <__aeabi_dsub>
 8003a18:	3630      	adds	r6, #48	; 0x30
 8003a1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003a1c:	f805 6b01 	strb.w	r6, [r5], #1
 8003a20:	42ab      	cmp	r3, r5
 8003a22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a26:	f04f 0200 	mov.w	r2, #0
 8003a2a:	d124      	bne.n	8003a76 <_dtoa_r+0x5fe>
 8003a2c:	4b1b      	ldr	r3, [pc, #108]	; (8003a9c <_dtoa_r+0x624>)
 8003a2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003a32:	f7fc fb9b 	bl	800016c <__adddf3>
 8003a36:	4602      	mov	r2, r0
 8003a38:	460b      	mov	r3, r1
 8003a3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a3e:	f7fc ffd7 	bl	80009f0 <__aeabi_dcmpgt>
 8003a42:	2800      	cmp	r0, #0
 8003a44:	d174      	bne.n	8003b30 <_dtoa_r+0x6b8>
 8003a46:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003a4a:	2000      	movs	r0, #0
 8003a4c:	4913      	ldr	r1, [pc, #76]	; (8003a9c <_dtoa_r+0x624>)
 8003a4e:	f7fc fb8b 	bl	8000168 <__aeabi_dsub>
 8003a52:	4602      	mov	r2, r0
 8003a54:	460b      	mov	r3, r1
 8003a56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a5a:	f7fc ffab 	bl	80009b4 <__aeabi_dcmplt>
 8003a5e:	2800      	cmp	r0, #0
 8003a60:	f43f af2d 	beq.w	80038be <_dtoa_r+0x446>
 8003a64:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003a68:	1e6a      	subs	r2, r5, #1
 8003a6a:	2b30      	cmp	r3, #48	; 0x30
 8003a6c:	d001      	beq.n	8003a72 <_dtoa_r+0x5fa>
 8003a6e:	46bb      	mov	fp, r7
 8003a70:	e04d      	b.n	8003b0e <_dtoa_r+0x696>
 8003a72:	4615      	mov	r5, r2
 8003a74:	e7f6      	b.n	8003a64 <_dtoa_r+0x5ec>
 8003a76:	4b06      	ldr	r3, [pc, #24]	; (8003a90 <_dtoa_r+0x618>)
 8003a78:	f7fc fd2a 	bl	80004d0 <__aeabi_dmul>
 8003a7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a80:	e7bd      	b.n	80039fe <_dtoa_r+0x586>
 8003a82:	bf00      	nop
 8003a84:	08004dc8 	.word	0x08004dc8
 8003a88:	08004da0 	.word	0x08004da0
 8003a8c:	3ff00000 	.word	0x3ff00000
 8003a90:	40240000 	.word	0x40240000
 8003a94:	401c0000 	.word	0x401c0000
 8003a98:	40140000 	.word	0x40140000
 8003a9c:	3fe00000 	.word	0x3fe00000
 8003aa0:	9d06      	ldr	r5, [sp, #24]
 8003aa2:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003aa6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003aaa:	4630      	mov	r0, r6
 8003aac:	4639      	mov	r1, r7
 8003aae:	f7fc fe39 	bl	8000724 <__aeabi_ddiv>
 8003ab2:	f7fc ffbd 	bl	8000a30 <__aeabi_d2iz>
 8003ab6:	4680      	mov	r8, r0
 8003ab8:	f7fc fca4 	bl	8000404 <__aeabi_i2d>
 8003abc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ac0:	f7fc fd06 	bl	80004d0 <__aeabi_dmul>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	4630      	mov	r0, r6
 8003aca:	4639      	mov	r1, r7
 8003acc:	f7fc fb4c 	bl	8000168 <__aeabi_dsub>
 8003ad0:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8003ad4:	f805 6b01 	strb.w	r6, [r5], #1
 8003ad8:	9e06      	ldr	r6, [sp, #24]
 8003ada:	4602      	mov	r2, r0
 8003adc:	1bae      	subs	r6, r5, r6
 8003ade:	45b1      	cmp	r9, r6
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	d137      	bne.n	8003b54 <_dtoa_r+0x6dc>
 8003ae4:	f7fc fb42 	bl	800016c <__adddf3>
 8003ae8:	4606      	mov	r6, r0
 8003aea:	460f      	mov	r7, r1
 8003aec:	4602      	mov	r2, r0
 8003aee:	460b      	mov	r3, r1
 8003af0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003af4:	f7fc ff5e 	bl	80009b4 <__aeabi_dcmplt>
 8003af8:	b9c8      	cbnz	r0, 8003b2e <_dtoa_r+0x6b6>
 8003afa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003afe:	4632      	mov	r2, r6
 8003b00:	463b      	mov	r3, r7
 8003b02:	f7fc ff4d 	bl	80009a0 <__aeabi_dcmpeq>
 8003b06:	b110      	cbz	r0, 8003b0e <_dtoa_r+0x696>
 8003b08:	f018 0f01 	tst.w	r8, #1
 8003b0c:	d10f      	bne.n	8003b2e <_dtoa_r+0x6b6>
 8003b0e:	4651      	mov	r1, sl
 8003b10:	4620      	mov	r0, r4
 8003b12:	f000 fae8 	bl	80040e6 <_Bfree>
 8003b16:	2300      	movs	r3, #0
 8003b18:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003b1a:	702b      	strb	r3, [r5, #0]
 8003b1c:	f10b 0301 	add.w	r3, fp, #1
 8003b20:	6013      	str	r3, [r2, #0]
 8003b22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f43f acec 	beq.w	8003502 <_dtoa_r+0x8a>
 8003b2a:	601d      	str	r5, [r3, #0]
 8003b2c:	e4e9      	b.n	8003502 <_dtoa_r+0x8a>
 8003b2e:	465f      	mov	r7, fp
 8003b30:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003b34:	1e6b      	subs	r3, r5, #1
 8003b36:	2a39      	cmp	r2, #57	; 0x39
 8003b38:	d106      	bne.n	8003b48 <_dtoa_r+0x6d0>
 8003b3a:	9a06      	ldr	r2, [sp, #24]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d107      	bne.n	8003b50 <_dtoa_r+0x6d8>
 8003b40:	2330      	movs	r3, #48	; 0x30
 8003b42:	7013      	strb	r3, [r2, #0]
 8003b44:	4613      	mov	r3, r2
 8003b46:	3701      	adds	r7, #1
 8003b48:	781a      	ldrb	r2, [r3, #0]
 8003b4a:	3201      	adds	r2, #1
 8003b4c:	701a      	strb	r2, [r3, #0]
 8003b4e:	e78e      	b.n	8003a6e <_dtoa_r+0x5f6>
 8003b50:	461d      	mov	r5, r3
 8003b52:	e7ed      	b.n	8003b30 <_dtoa_r+0x6b8>
 8003b54:	2200      	movs	r2, #0
 8003b56:	4bb5      	ldr	r3, [pc, #724]	; (8003e2c <_dtoa_r+0x9b4>)
 8003b58:	f7fc fcba 	bl	80004d0 <__aeabi_dmul>
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	2300      	movs	r3, #0
 8003b60:	4606      	mov	r6, r0
 8003b62:	460f      	mov	r7, r1
 8003b64:	f7fc ff1c 	bl	80009a0 <__aeabi_dcmpeq>
 8003b68:	2800      	cmp	r0, #0
 8003b6a:	d09c      	beq.n	8003aa6 <_dtoa_r+0x62e>
 8003b6c:	e7cf      	b.n	8003b0e <_dtoa_r+0x696>
 8003b6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b70:	2a00      	cmp	r2, #0
 8003b72:	f000 8129 	beq.w	8003dc8 <_dtoa_r+0x950>
 8003b76:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003b78:	2a01      	cmp	r2, #1
 8003b7a:	f300 810e 	bgt.w	8003d9a <_dtoa_r+0x922>
 8003b7e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003b80:	2a00      	cmp	r2, #0
 8003b82:	f000 8106 	beq.w	8003d92 <_dtoa_r+0x91a>
 8003b86:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003b8a:	4645      	mov	r5, r8
 8003b8c:	9e08      	ldr	r6, [sp, #32]
 8003b8e:	9a07      	ldr	r2, [sp, #28]
 8003b90:	2101      	movs	r1, #1
 8003b92:	441a      	add	r2, r3
 8003b94:	4620      	mov	r0, r4
 8003b96:	4498      	add	r8, r3
 8003b98:	9207      	str	r2, [sp, #28]
 8003b9a:	f000 fb44 	bl	8004226 <__i2b>
 8003b9e:	4607      	mov	r7, r0
 8003ba0:	2d00      	cmp	r5, #0
 8003ba2:	dd0b      	ble.n	8003bbc <_dtoa_r+0x744>
 8003ba4:	9b07      	ldr	r3, [sp, #28]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	dd08      	ble.n	8003bbc <_dtoa_r+0x744>
 8003baa:	42ab      	cmp	r3, r5
 8003bac:	bfa8      	it	ge
 8003bae:	462b      	movge	r3, r5
 8003bb0:	9a07      	ldr	r2, [sp, #28]
 8003bb2:	eba8 0803 	sub.w	r8, r8, r3
 8003bb6:	1aed      	subs	r5, r5, r3
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	9307      	str	r3, [sp, #28]
 8003bbc:	9b08      	ldr	r3, [sp, #32]
 8003bbe:	b1fb      	cbz	r3, 8003c00 <_dtoa_r+0x788>
 8003bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f000 8104 	beq.w	8003dd0 <_dtoa_r+0x958>
 8003bc8:	2e00      	cmp	r6, #0
 8003bca:	dd11      	ble.n	8003bf0 <_dtoa_r+0x778>
 8003bcc:	4639      	mov	r1, r7
 8003bce:	4632      	mov	r2, r6
 8003bd0:	4620      	mov	r0, r4
 8003bd2:	f000 fbbd 	bl	8004350 <__pow5mult>
 8003bd6:	4652      	mov	r2, sl
 8003bd8:	4601      	mov	r1, r0
 8003bda:	4607      	mov	r7, r0
 8003bdc:	4620      	mov	r0, r4
 8003bde:	f000 fb2b 	bl	8004238 <__multiply>
 8003be2:	4651      	mov	r1, sl
 8003be4:	900a      	str	r0, [sp, #40]	; 0x28
 8003be6:	4620      	mov	r0, r4
 8003be8:	f000 fa7d 	bl	80040e6 <_Bfree>
 8003bec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003bee:	469a      	mov	sl, r3
 8003bf0:	9b08      	ldr	r3, [sp, #32]
 8003bf2:	1b9a      	subs	r2, r3, r6
 8003bf4:	d004      	beq.n	8003c00 <_dtoa_r+0x788>
 8003bf6:	4651      	mov	r1, sl
 8003bf8:	4620      	mov	r0, r4
 8003bfa:	f000 fba9 	bl	8004350 <__pow5mult>
 8003bfe:	4682      	mov	sl, r0
 8003c00:	2101      	movs	r1, #1
 8003c02:	4620      	mov	r0, r4
 8003c04:	f000 fb0f 	bl	8004226 <__i2b>
 8003c08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003c0a:	4606      	mov	r6, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f340 80e1 	ble.w	8003dd4 <_dtoa_r+0x95c>
 8003c12:	461a      	mov	r2, r3
 8003c14:	4601      	mov	r1, r0
 8003c16:	4620      	mov	r0, r4
 8003c18:	f000 fb9a 	bl	8004350 <__pow5mult>
 8003c1c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003c1e:	4606      	mov	r6, r0
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	f340 80da 	ble.w	8003dda <_dtoa_r+0x962>
 8003c26:	2300      	movs	r3, #0
 8003c28:	9308      	str	r3, [sp, #32]
 8003c2a:	6933      	ldr	r3, [r6, #16]
 8003c2c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003c30:	6918      	ldr	r0, [r3, #16]
 8003c32:	f000 faaa 	bl	800418a <__hi0bits>
 8003c36:	f1c0 0020 	rsb	r0, r0, #32
 8003c3a:	9b07      	ldr	r3, [sp, #28]
 8003c3c:	4418      	add	r0, r3
 8003c3e:	f010 001f 	ands.w	r0, r0, #31
 8003c42:	f000 80f0 	beq.w	8003e26 <_dtoa_r+0x9ae>
 8003c46:	f1c0 0320 	rsb	r3, r0, #32
 8003c4a:	2b04      	cmp	r3, #4
 8003c4c:	f340 80e2 	ble.w	8003e14 <_dtoa_r+0x99c>
 8003c50:	9b07      	ldr	r3, [sp, #28]
 8003c52:	f1c0 001c 	rsb	r0, r0, #28
 8003c56:	4480      	add	r8, r0
 8003c58:	4405      	add	r5, r0
 8003c5a:	4403      	add	r3, r0
 8003c5c:	9307      	str	r3, [sp, #28]
 8003c5e:	f1b8 0f00 	cmp.w	r8, #0
 8003c62:	dd05      	ble.n	8003c70 <_dtoa_r+0x7f8>
 8003c64:	4651      	mov	r1, sl
 8003c66:	4642      	mov	r2, r8
 8003c68:	4620      	mov	r0, r4
 8003c6a:	f000 fbbf 	bl	80043ec <__lshift>
 8003c6e:	4682      	mov	sl, r0
 8003c70:	9b07      	ldr	r3, [sp, #28]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	dd05      	ble.n	8003c82 <_dtoa_r+0x80a>
 8003c76:	4631      	mov	r1, r6
 8003c78:	461a      	mov	r2, r3
 8003c7a:	4620      	mov	r0, r4
 8003c7c:	f000 fbb6 	bl	80043ec <__lshift>
 8003c80:	4606      	mov	r6, r0
 8003c82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 80d3 	beq.w	8003e30 <_dtoa_r+0x9b8>
 8003c8a:	4631      	mov	r1, r6
 8003c8c:	4650      	mov	r0, sl
 8003c8e:	f000 fbfe 	bl	800448e <__mcmp>
 8003c92:	2800      	cmp	r0, #0
 8003c94:	f280 80cc 	bge.w	8003e30 <_dtoa_r+0x9b8>
 8003c98:	2300      	movs	r3, #0
 8003c9a:	4651      	mov	r1, sl
 8003c9c:	220a      	movs	r2, #10
 8003c9e:	4620      	mov	r0, r4
 8003ca0:	f000 fa38 	bl	8004114 <__multadd>
 8003ca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ca6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003caa:	4682      	mov	sl, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 81a9 	beq.w	8004004 <_dtoa_r+0xb8c>
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	4639      	mov	r1, r7
 8003cb6:	220a      	movs	r2, #10
 8003cb8:	4620      	mov	r0, r4
 8003cba:	f000 fa2b 	bl	8004114 <__multadd>
 8003cbe:	9b04      	ldr	r3, [sp, #16]
 8003cc0:	4607      	mov	r7, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	dc03      	bgt.n	8003cce <_dtoa_r+0x856>
 8003cc6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	f300 80b9 	bgt.w	8003e40 <_dtoa_r+0x9c8>
 8003cce:	2d00      	cmp	r5, #0
 8003cd0:	dd05      	ble.n	8003cde <_dtoa_r+0x866>
 8003cd2:	4639      	mov	r1, r7
 8003cd4:	462a      	mov	r2, r5
 8003cd6:	4620      	mov	r0, r4
 8003cd8:	f000 fb88 	bl	80043ec <__lshift>
 8003cdc:	4607      	mov	r7, r0
 8003cde:	9b08      	ldr	r3, [sp, #32]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f000 8110 	beq.w	8003f06 <_dtoa_r+0xa8e>
 8003ce6:	6879      	ldr	r1, [r7, #4]
 8003ce8:	4620      	mov	r0, r4
 8003cea:	f000 f9c8 	bl	800407e <_Balloc>
 8003cee:	4605      	mov	r5, r0
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	f107 010c 	add.w	r1, r7, #12
 8003cf6:	3202      	adds	r2, #2
 8003cf8:	0092      	lsls	r2, r2, #2
 8003cfa:	300c      	adds	r0, #12
 8003cfc:	f000 f9b4 	bl	8004068 <memcpy>
 8003d00:	2201      	movs	r2, #1
 8003d02:	4629      	mov	r1, r5
 8003d04:	4620      	mov	r0, r4
 8003d06:	f000 fb71 	bl	80043ec <__lshift>
 8003d0a:	9707      	str	r7, [sp, #28]
 8003d0c:	4607      	mov	r7, r0
 8003d0e:	9b02      	ldr	r3, [sp, #8]
 8003d10:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	9308      	str	r3, [sp, #32]
 8003d1a:	4631      	mov	r1, r6
 8003d1c:	4650      	mov	r0, sl
 8003d1e:	f7ff fb1d 	bl	800335c <quorem>
 8003d22:	9907      	ldr	r1, [sp, #28]
 8003d24:	4605      	mov	r5, r0
 8003d26:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003d2a:	4650      	mov	r0, sl
 8003d2c:	f000 fbaf 	bl	800448e <__mcmp>
 8003d30:	463a      	mov	r2, r7
 8003d32:	9002      	str	r0, [sp, #8]
 8003d34:	4631      	mov	r1, r6
 8003d36:	4620      	mov	r0, r4
 8003d38:	f000 fbc3 	bl	80044c2 <__mdiff>
 8003d3c:	68c3      	ldr	r3, [r0, #12]
 8003d3e:	4602      	mov	r2, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f040 80e2 	bne.w	8003f0a <_dtoa_r+0xa92>
 8003d46:	4601      	mov	r1, r0
 8003d48:	9009      	str	r0, [sp, #36]	; 0x24
 8003d4a:	4650      	mov	r0, sl
 8003d4c:	f000 fb9f 	bl	800448e <__mcmp>
 8003d50:	4603      	mov	r3, r0
 8003d52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d54:	4611      	mov	r1, r2
 8003d56:	4620      	mov	r0, r4
 8003d58:	9309      	str	r3, [sp, #36]	; 0x24
 8003d5a:	f000 f9c4 	bl	80040e6 <_Bfree>
 8003d5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f040 80d4 	bne.w	8003f0e <_dtoa_r+0xa96>
 8003d66:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003d68:	2a00      	cmp	r2, #0
 8003d6a:	f040 80d0 	bne.w	8003f0e <_dtoa_r+0xa96>
 8003d6e:	9a08      	ldr	r2, [sp, #32]
 8003d70:	2a00      	cmp	r2, #0
 8003d72:	f040 80cc 	bne.w	8003f0e <_dtoa_r+0xa96>
 8003d76:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003d7a:	f000 80e8 	beq.w	8003f4e <_dtoa_r+0xad6>
 8003d7e:	9b02      	ldr	r3, [sp, #8]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	dd01      	ble.n	8003d88 <_dtoa_r+0x910>
 8003d84:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8003d88:	f108 0501 	add.w	r5, r8, #1
 8003d8c:	f888 9000 	strb.w	r9, [r8]
 8003d90:	e06b      	b.n	8003e6a <_dtoa_r+0x9f2>
 8003d92:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003d94:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003d98:	e6f7      	b.n	8003b8a <_dtoa_r+0x712>
 8003d9a:	9b08      	ldr	r3, [sp, #32]
 8003d9c:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
 8003da0:	42b3      	cmp	r3, r6
 8003da2:	bfb7      	itett	lt
 8003da4:	9b08      	ldrlt	r3, [sp, #32]
 8003da6:	1b9e      	subge	r6, r3, r6
 8003da8:	1af2      	sublt	r2, r6, r3
 8003daa:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8003dac:	bfbf      	itttt	lt
 8003dae:	9608      	strlt	r6, [sp, #32]
 8003db0:	189b      	addlt	r3, r3, r2
 8003db2:	930c      	strlt	r3, [sp, #48]	; 0x30
 8003db4:	2600      	movlt	r6, #0
 8003db6:	f1b9 0f00 	cmp.w	r9, #0
 8003dba:	bfb9      	ittee	lt
 8003dbc:	eba8 0509 	sublt.w	r5, r8, r9
 8003dc0:	2300      	movlt	r3, #0
 8003dc2:	4645      	movge	r5, r8
 8003dc4:	464b      	movge	r3, r9
 8003dc6:	e6e2      	b.n	8003b8e <_dtoa_r+0x716>
 8003dc8:	9e08      	ldr	r6, [sp, #32]
 8003dca:	4645      	mov	r5, r8
 8003dcc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003dce:	e6e7      	b.n	8003ba0 <_dtoa_r+0x728>
 8003dd0:	9a08      	ldr	r2, [sp, #32]
 8003dd2:	e710      	b.n	8003bf6 <_dtoa_r+0x77e>
 8003dd4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	dc18      	bgt.n	8003e0c <_dtoa_r+0x994>
 8003dda:	9b02      	ldr	r3, [sp, #8]
 8003ddc:	b9b3      	cbnz	r3, 8003e0c <_dtoa_r+0x994>
 8003dde:	9b03      	ldr	r3, [sp, #12]
 8003de0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003de4:	b9a3      	cbnz	r3, 8003e10 <_dtoa_r+0x998>
 8003de6:	9b03      	ldr	r3, [sp, #12]
 8003de8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003dec:	0d1b      	lsrs	r3, r3, #20
 8003dee:	051b      	lsls	r3, r3, #20
 8003df0:	b12b      	cbz	r3, 8003dfe <_dtoa_r+0x986>
 8003df2:	9b07      	ldr	r3, [sp, #28]
 8003df4:	f108 0801 	add.w	r8, r8, #1
 8003df8:	3301      	adds	r3, #1
 8003dfa:	9307      	str	r3, [sp, #28]
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	9308      	str	r3, [sp, #32]
 8003e00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f47f af11 	bne.w	8003c2a <_dtoa_r+0x7b2>
 8003e08:	2001      	movs	r0, #1
 8003e0a:	e716      	b.n	8003c3a <_dtoa_r+0x7c2>
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	e7f6      	b.n	8003dfe <_dtoa_r+0x986>
 8003e10:	9b02      	ldr	r3, [sp, #8]
 8003e12:	e7f4      	b.n	8003dfe <_dtoa_r+0x986>
 8003e14:	f43f af23 	beq.w	8003c5e <_dtoa_r+0x7e6>
 8003e18:	9a07      	ldr	r2, [sp, #28]
 8003e1a:	331c      	adds	r3, #28
 8003e1c:	441a      	add	r2, r3
 8003e1e:	4498      	add	r8, r3
 8003e20:	441d      	add	r5, r3
 8003e22:	4613      	mov	r3, r2
 8003e24:	e71a      	b.n	8003c5c <_dtoa_r+0x7e4>
 8003e26:	4603      	mov	r3, r0
 8003e28:	e7f6      	b.n	8003e18 <_dtoa_r+0x9a0>
 8003e2a:	bf00      	nop
 8003e2c:	40240000 	.word	0x40240000
 8003e30:	f1b9 0f00 	cmp.w	r9, #0
 8003e34:	dc33      	bgt.n	8003e9e <_dtoa_r+0xa26>
 8003e36:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	dd30      	ble.n	8003e9e <_dtoa_r+0xa26>
 8003e3c:	f8cd 9010 	str.w	r9, [sp, #16]
 8003e40:	9b04      	ldr	r3, [sp, #16]
 8003e42:	b963      	cbnz	r3, 8003e5e <_dtoa_r+0x9e6>
 8003e44:	4631      	mov	r1, r6
 8003e46:	2205      	movs	r2, #5
 8003e48:	4620      	mov	r0, r4
 8003e4a:	f000 f963 	bl	8004114 <__multadd>
 8003e4e:	4601      	mov	r1, r0
 8003e50:	4606      	mov	r6, r0
 8003e52:	4650      	mov	r0, sl
 8003e54:	f000 fb1b 	bl	800448e <__mcmp>
 8003e58:	2800      	cmp	r0, #0
 8003e5a:	f73f ad5c 	bgt.w	8003916 <_dtoa_r+0x49e>
 8003e5e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003e60:	9d06      	ldr	r5, [sp, #24]
 8003e62:	ea6f 0b03 	mvn.w	fp, r3
 8003e66:	2300      	movs	r3, #0
 8003e68:	9307      	str	r3, [sp, #28]
 8003e6a:	4631      	mov	r1, r6
 8003e6c:	4620      	mov	r0, r4
 8003e6e:	f000 f93a 	bl	80040e6 <_Bfree>
 8003e72:	2f00      	cmp	r7, #0
 8003e74:	f43f ae4b 	beq.w	8003b0e <_dtoa_r+0x696>
 8003e78:	9b07      	ldr	r3, [sp, #28]
 8003e7a:	b12b      	cbz	r3, 8003e88 <_dtoa_r+0xa10>
 8003e7c:	42bb      	cmp	r3, r7
 8003e7e:	d003      	beq.n	8003e88 <_dtoa_r+0xa10>
 8003e80:	4619      	mov	r1, r3
 8003e82:	4620      	mov	r0, r4
 8003e84:	f000 f92f 	bl	80040e6 <_Bfree>
 8003e88:	4639      	mov	r1, r7
 8003e8a:	4620      	mov	r0, r4
 8003e8c:	f000 f92b 	bl	80040e6 <_Bfree>
 8003e90:	e63d      	b.n	8003b0e <_dtoa_r+0x696>
 8003e92:	2600      	movs	r6, #0
 8003e94:	4637      	mov	r7, r6
 8003e96:	e7e2      	b.n	8003e5e <_dtoa_r+0x9e6>
 8003e98:	46bb      	mov	fp, r7
 8003e9a:	4637      	mov	r7, r6
 8003e9c:	e53b      	b.n	8003916 <_dtoa_r+0x49e>
 8003e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ea0:	f8cd 9010 	str.w	r9, [sp, #16]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f47f af12 	bne.w	8003cce <_dtoa_r+0x856>
 8003eaa:	9d06      	ldr	r5, [sp, #24]
 8003eac:	4631      	mov	r1, r6
 8003eae:	4650      	mov	r0, sl
 8003eb0:	f7ff fa54 	bl	800335c <quorem>
 8003eb4:	9b06      	ldr	r3, [sp, #24]
 8003eb6:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003eba:	f805 9b01 	strb.w	r9, [r5], #1
 8003ebe:	9a04      	ldr	r2, [sp, #16]
 8003ec0:	1aeb      	subs	r3, r5, r3
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	f300 8081 	bgt.w	8003fca <_dtoa_r+0xb52>
 8003ec8:	9b06      	ldr	r3, [sp, #24]
 8003eca:	2a01      	cmp	r2, #1
 8003ecc:	bfac      	ite	ge
 8003ece:	189b      	addge	r3, r3, r2
 8003ed0:	3301      	addlt	r3, #1
 8003ed2:	4698      	mov	r8, r3
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	9307      	str	r3, [sp, #28]
 8003ed8:	4651      	mov	r1, sl
 8003eda:	2201      	movs	r2, #1
 8003edc:	4620      	mov	r0, r4
 8003ede:	f000 fa85 	bl	80043ec <__lshift>
 8003ee2:	4631      	mov	r1, r6
 8003ee4:	4682      	mov	sl, r0
 8003ee6:	f000 fad2 	bl	800448e <__mcmp>
 8003eea:	2800      	cmp	r0, #0
 8003eec:	dc34      	bgt.n	8003f58 <_dtoa_r+0xae0>
 8003eee:	d102      	bne.n	8003ef6 <_dtoa_r+0xa7e>
 8003ef0:	f019 0f01 	tst.w	r9, #1
 8003ef4:	d130      	bne.n	8003f58 <_dtoa_r+0xae0>
 8003ef6:	4645      	mov	r5, r8
 8003ef8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003efc:	1e6a      	subs	r2, r5, #1
 8003efe:	2b30      	cmp	r3, #48	; 0x30
 8003f00:	d1b3      	bne.n	8003e6a <_dtoa_r+0x9f2>
 8003f02:	4615      	mov	r5, r2
 8003f04:	e7f8      	b.n	8003ef8 <_dtoa_r+0xa80>
 8003f06:	4638      	mov	r0, r7
 8003f08:	e6ff      	b.n	8003d0a <_dtoa_r+0x892>
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e722      	b.n	8003d54 <_dtoa_r+0x8dc>
 8003f0e:	9a02      	ldr	r2, [sp, #8]
 8003f10:	2a00      	cmp	r2, #0
 8003f12:	db04      	blt.n	8003f1e <_dtoa_r+0xaa6>
 8003f14:	d128      	bne.n	8003f68 <_dtoa_r+0xaf0>
 8003f16:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003f18:	bb32      	cbnz	r2, 8003f68 <_dtoa_r+0xaf0>
 8003f1a:	9a08      	ldr	r2, [sp, #32]
 8003f1c:	bb22      	cbnz	r2, 8003f68 <_dtoa_r+0xaf0>
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f77f af32 	ble.w	8003d88 <_dtoa_r+0x910>
 8003f24:	4651      	mov	r1, sl
 8003f26:	2201      	movs	r2, #1
 8003f28:	4620      	mov	r0, r4
 8003f2a:	f000 fa5f 	bl	80043ec <__lshift>
 8003f2e:	4631      	mov	r1, r6
 8003f30:	4682      	mov	sl, r0
 8003f32:	f000 faac 	bl	800448e <__mcmp>
 8003f36:	2800      	cmp	r0, #0
 8003f38:	dc05      	bgt.n	8003f46 <_dtoa_r+0xace>
 8003f3a:	f47f af25 	bne.w	8003d88 <_dtoa_r+0x910>
 8003f3e:	f019 0f01 	tst.w	r9, #1
 8003f42:	f43f af21 	beq.w	8003d88 <_dtoa_r+0x910>
 8003f46:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003f4a:	f47f af1b 	bne.w	8003d84 <_dtoa_r+0x90c>
 8003f4e:	2339      	movs	r3, #57	; 0x39
 8003f50:	f108 0801 	add.w	r8, r8, #1
 8003f54:	f808 3c01 	strb.w	r3, [r8, #-1]
 8003f58:	4645      	mov	r5, r8
 8003f5a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003f5e:	1e6a      	subs	r2, r5, #1
 8003f60:	2b39      	cmp	r3, #57	; 0x39
 8003f62:	d03a      	beq.n	8003fda <_dtoa_r+0xb62>
 8003f64:	3301      	adds	r3, #1
 8003f66:	e03f      	b.n	8003fe8 <_dtoa_r+0xb70>
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f108 0501 	add.w	r5, r8, #1
 8003f6e:	dd05      	ble.n	8003f7c <_dtoa_r+0xb04>
 8003f70:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003f74:	d0eb      	beq.n	8003f4e <_dtoa_r+0xad6>
 8003f76:	f109 0901 	add.w	r9, r9, #1
 8003f7a:	e707      	b.n	8003d8c <_dtoa_r+0x914>
 8003f7c:	9b06      	ldr	r3, [sp, #24]
 8003f7e:	9a04      	ldr	r2, [sp, #16]
 8003f80:	1aeb      	subs	r3, r5, r3
 8003f82:	4293      	cmp	r3, r2
 8003f84:	46a8      	mov	r8, r5
 8003f86:	f805 9c01 	strb.w	r9, [r5, #-1]
 8003f8a:	d0a5      	beq.n	8003ed8 <_dtoa_r+0xa60>
 8003f8c:	4651      	mov	r1, sl
 8003f8e:	2300      	movs	r3, #0
 8003f90:	220a      	movs	r2, #10
 8003f92:	4620      	mov	r0, r4
 8003f94:	f000 f8be 	bl	8004114 <__multadd>
 8003f98:	9b07      	ldr	r3, [sp, #28]
 8003f9a:	4682      	mov	sl, r0
 8003f9c:	42bb      	cmp	r3, r7
 8003f9e:	f04f 020a 	mov.w	r2, #10
 8003fa2:	f04f 0300 	mov.w	r3, #0
 8003fa6:	9907      	ldr	r1, [sp, #28]
 8003fa8:	4620      	mov	r0, r4
 8003faa:	d104      	bne.n	8003fb6 <_dtoa_r+0xb3e>
 8003fac:	f000 f8b2 	bl	8004114 <__multadd>
 8003fb0:	9007      	str	r0, [sp, #28]
 8003fb2:	4607      	mov	r7, r0
 8003fb4:	e6b1      	b.n	8003d1a <_dtoa_r+0x8a2>
 8003fb6:	f000 f8ad 	bl	8004114 <__multadd>
 8003fba:	2300      	movs	r3, #0
 8003fbc:	9007      	str	r0, [sp, #28]
 8003fbe:	220a      	movs	r2, #10
 8003fc0:	4639      	mov	r1, r7
 8003fc2:	4620      	mov	r0, r4
 8003fc4:	f000 f8a6 	bl	8004114 <__multadd>
 8003fc8:	e7f3      	b.n	8003fb2 <_dtoa_r+0xb3a>
 8003fca:	4651      	mov	r1, sl
 8003fcc:	2300      	movs	r3, #0
 8003fce:	220a      	movs	r2, #10
 8003fd0:	4620      	mov	r0, r4
 8003fd2:	f000 f89f 	bl	8004114 <__multadd>
 8003fd6:	4682      	mov	sl, r0
 8003fd8:	e768      	b.n	8003eac <_dtoa_r+0xa34>
 8003fda:	9b06      	ldr	r3, [sp, #24]
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d105      	bne.n	8003fec <_dtoa_r+0xb74>
 8003fe0:	2331      	movs	r3, #49	; 0x31
 8003fe2:	9a06      	ldr	r2, [sp, #24]
 8003fe4:	f10b 0b01 	add.w	fp, fp, #1
 8003fe8:	7013      	strb	r3, [r2, #0]
 8003fea:	e73e      	b.n	8003e6a <_dtoa_r+0x9f2>
 8003fec:	4615      	mov	r5, r2
 8003fee:	e7b4      	b.n	8003f5a <_dtoa_r+0xae2>
 8003ff0:	4b09      	ldr	r3, [pc, #36]	; (8004018 <_dtoa_r+0xba0>)
 8003ff2:	f7ff baa3 	b.w	800353c <_dtoa_r+0xc4>
 8003ff6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f47f aa7d 	bne.w	80034f8 <_dtoa_r+0x80>
 8003ffe:	4b07      	ldr	r3, [pc, #28]	; (800401c <_dtoa_r+0xba4>)
 8004000:	f7ff ba9c 	b.w	800353c <_dtoa_r+0xc4>
 8004004:	9b04      	ldr	r3, [sp, #16]
 8004006:	2b00      	cmp	r3, #0
 8004008:	f73f af4f 	bgt.w	8003eaa <_dtoa_r+0xa32>
 800400c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800400e:	2b02      	cmp	r3, #2
 8004010:	f77f af4b 	ble.w	8003eaa <_dtoa_r+0xa32>
 8004014:	e714      	b.n	8003e40 <_dtoa_r+0x9c8>
 8004016:	bf00      	nop
 8004018:	08004d6c 	.word	0x08004d6c
 800401c:	08004d90 	.word	0x08004d90

08004020 <_localeconv_r>:
 8004020:	4b04      	ldr	r3, [pc, #16]	; (8004034 <_localeconv_r+0x14>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6a18      	ldr	r0, [r3, #32]
 8004026:	4b04      	ldr	r3, [pc, #16]	; (8004038 <_localeconv_r+0x18>)
 8004028:	2800      	cmp	r0, #0
 800402a:	bf08      	it	eq
 800402c:	4618      	moveq	r0, r3
 800402e:	30f0      	adds	r0, #240	; 0xf0
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	2000000c 	.word	0x2000000c
 8004038:	20000070 	.word	0x20000070

0800403c <malloc>:
 800403c:	4b02      	ldr	r3, [pc, #8]	; (8004048 <malloc+0xc>)
 800403e:	4601      	mov	r1, r0
 8004040:	6818      	ldr	r0, [r3, #0]
 8004042:	f000 bb47 	b.w	80046d4 <_malloc_r>
 8004046:	bf00      	nop
 8004048:	2000000c 	.word	0x2000000c

0800404c <memchr>:
 800404c:	b510      	push	{r4, lr}
 800404e:	b2c9      	uxtb	r1, r1
 8004050:	4402      	add	r2, r0
 8004052:	4290      	cmp	r0, r2
 8004054:	4603      	mov	r3, r0
 8004056:	d101      	bne.n	800405c <memchr+0x10>
 8004058:	2000      	movs	r0, #0
 800405a:	bd10      	pop	{r4, pc}
 800405c:	781c      	ldrb	r4, [r3, #0]
 800405e:	3001      	adds	r0, #1
 8004060:	428c      	cmp	r4, r1
 8004062:	d1f6      	bne.n	8004052 <memchr+0x6>
 8004064:	4618      	mov	r0, r3
 8004066:	bd10      	pop	{r4, pc}

08004068 <memcpy>:
 8004068:	b510      	push	{r4, lr}
 800406a:	1e43      	subs	r3, r0, #1
 800406c:	440a      	add	r2, r1
 800406e:	4291      	cmp	r1, r2
 8004070:	d100      	bne.n	8004074 <memcpy+0xc>
 8004072:	bd10      	pop	{r4, pc}
 8004074:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004078:	f803 4f01 	strb.w	r4, [r3, #1]!
 800407c:	e7f7      	b.n	800406e <memcpy+0x6>

0800407e <_Balloc>:
 800407e:	b570      	push	{r4, r5, r6, lr}
 8004080:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004082:	4604      	mov	r4, r0
 8004084:	460e      	mov	r6, r1
 8004086:	b93d      	cbnz	r5, 8004098 <_Balloc+0x1a>
 8004088:	2010      	movs	r0, #16
 800408a:	f7ff ffd7 	bl	800403c <malloc>
 800408e:	6260      	str	r0, [r4, #36]	; 0x24
 8004090:	6045      	str	r5, [r0, #4]
 8004092:	6085      	str	r5, [r0, #8]
 8004094:	6005      	str	r5, [r0, #0]
 8004096:	60c5      	str	r5, [r0, #12]
 8004098:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800409a:	68eb      	ldr	r3, [r5, #12]
 800409c:	b183      	cbz	r3, 80040c0 <_Balloc+0x42>
 800409e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80040a6:	b9b8      	cbnz	r0, 80040d8 <_Balloc+0x5a>
 80040a8:	2101      	movs	r1, #1
 80040aa:	fa01 f506 	lsl.w	r5, r1, r6
 80040ae:	1d6a      	adds	r2, r5, #5
 80040b0:	0092      	lsls	r2, r2, #2
 80040b2:	4620      	mov	r0, r4
 80040b4:	f000 fab3 	bl	800461e <_calloc_r>
 80040b8:	b160      	cbz	r0, 80040d4 <_Balloc+0x56>
 80040ba:	6046      	str	r6, [r0, #4]
 80040bc:	6085      	str	r5, [r0, #8]
 80040be:	e00e      	b.n	80040de <_Balloc+0x60>
 80040c0:	2221      	movs	r2, #33	; 0x21
 80040c2:	2104      	movs	r1, #4
 80040c4:	4620      	mov	r0, r4
 80040c6:	f000 faaa 	bl	800461e <_calloc_r>
 80040ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040cc:	60e8      	str	r0, [r5, #12]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1e4      	bne.n	800409e <_Balloc+0x20>
 80040d4:	2000      	movs	r0, #0
 80040d6:	bd70      	pop	{r4, r5, r6, pc}
 80040d8:	6802      	ldr	r2, [r0, #0]
 80040da:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80040de:	2300      	movs	r3, #0
 80040e0:	6103      	str	r3, [r0, #16]
 80040e2:	60c3      	str	r3, [r0, #12]
 80040e4:	bd70      	pop	{r4, r5, r6, pc}

080040e6 <_Bfree>:
 80040e6:	b570      	push	{r4, r5, r6, lr}
 80040e8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80040ea:	4606      	mov	r6, r0
 80040ec:	460d      	mov	r5, r1
 80040ee:	b93c      	cbnz	r4, 8004100 <_Bfree+0x1a>
 80040f0:	2010      	movs	r0, #16
 80040f2:	f7ff ffa3 	bl	800403c <malloc>
 80040f6:	6270      	str	r0, [r6, #36]	; 0x24
 80040f8:	6044      	str	r4, [r0, #4]
 80040fa:	6084      	str	r4, [r0, #8]
 80040fc:	6004      	str	r4, [r0, #0]
 80040fe:	60c4      	str	r4, [r0, #12]
 8004100:	b13d      	cbz	r5, 8004112 <_Bfree+0x2c>
 8004102:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004104:	686a      	ldr	r2, [r5, #4]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800410c:	6029      	str	r1, [r5, #0]
 800410e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004112:	bd70      	pop	{r4, r5, r6, pc}

08004114 <__multadd>:
 8004114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004118:	461f      	mov	r7, r3
 800411a:	4606      	mov	r6, r0
 800411c:	460c      	mov	r4, r1
 800411e:	2300      	movs	r3, #0
 8004120:	690d      	ldr	r5, [r1, #16]
 8004122:	f101 0e14 	add.w	lr, r1, #20
 8004126:	f8de 0000 	ldr.w	r0, [lr]
 800412a:	3301      	adds	r3, #1
 800412c:	b281      	uxth	r1, r0
 800412e:	fb02 7101 	mla	r1, r2, r1, r7
 8004132:	0c00      	lsrs	r0, r0, #16
 8004134:	0c0f      	lsrs	r7, r1, #16
 8004136:	fb02 7000 	mla	r0, r2, r0, r7
 800413a:	b289      	uxth	r1, r1
 800413c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004140:	429d      	cmp	r5, r3
 8004142:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004146:	f84e 1b04 	str.w	r1, [lr], #4
 800414a:	dcec      	bgt.n	8004126 <__multadd+0x12>
 800414c:	b1d7      	cbz	r7, 8004184 <__multadd+0x70>
 800414e:	68a3      	ldr	r3, [r4, #8]
 8004150:	429d      	cmp	r5, r3
 8004152:	db12      	blt.n	800417a <__multadd+0x66>
 8004154:	6861      	ldr	r1, [r4, #4]
 8004156:	4630      	mov	r0, r6
 8004158:	3101      	adds	r1, #1
 800415a:	f7ff ff90 	bl	800407e <_Balloc>
 800415e:	4680      	mov	r8, r0
 8004160:	6922      	ldr	r2, [r4, #16]
 8004162:	f104 010c 	add.w	r1, r4, #12
 8004166:	3202      	adds	r2, #2
 8004168:	0092      	lsls	r2, r2, #2
 800416a:	300c      	adds	r0, #12
 800416c:	f7ff ff7c 	bl	8004068 <memcpy>
 8004170:	4621      	mov	r1, r4
 8004172:	4630      	mov	r0, r6
 8004174:	f7ff ffb7 	bl	80040e6 <_Bfree>
 8004178:	4644      	mov	r4, r8
 800417a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800417e:	3501      	adds	r5, #1
 8004180:	615f      	str	r7, [r3, #20]
 8004182:	6125      	str	r5, [r4, #16]
 8004184:	4620      	mov	r0, r4
 8004186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800418a <__hi0bits>:
 800418a:	0c02      	lsrs	r2, r0, #16
 800418c:	0412      	lsls	r2, r2, #16
 800418e:	4603      	mov	r3, r0
 8004190:	b9b2      	cbnz	r2, 80041c0 <__hi0bits+0x36>
 8004192:	0403      	lsls	r3, r0, #16
 8004194:	2010      	movs	r0, #16
 8004196:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800419a:	bf04      	itt	eq
 800419c:	021b      	lsleq	r3, r3, #8
 800419e:	3008      	addeq	r0, #8
 80041a0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80041a4:	bf04      	itt	eq
 80041a6:	011b      	lsleq	r3, r3, #4
 80041a8:	3004      	addeq	r0, #4
 80041aa:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80041ae:	bf04      	itt	eq
 80041b0:	009b      	lsleq	r3, r3, #2
 80041b2:	3002      	addeq	r0, #2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	db06      	blt.n	80041c6 <__hi0bits+0x3c>
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	d503      	bpl.n	80041c4 <__hi0bits+0x3a>
 80041bc:	3001      	adds	r0, #1
 80041be:	4770      	bx	lr
 80041c0:	2000      	movs	r0, #0
 80041c2:	e7e8      	b.n	8004196 <__hi0bits+0xc>
 80041c4:	2020      	movs	r0, #32
 80041c6:	4770      	bx	lr

080041c8 <__lo0bits>:
 80041c8:	6803      	ldr	r3, [r0, #0]
 80041ca:	4601      	mov	r1, r0
 80041cc:	f013 0207 	ands.w	r2, r3, #7
 80041d0:	d00b      	beq.n	80041ea <__lo0bits+0x22>
 80041d2:	07da      	lsls	r2, r3, #31
 80041d4:	d423      	bmi.n	800421e <__lo0bits+0x56>
 80041d6:	0798      	lsls	r0, r3, #30
 80041d8:	bf49      	itett	mi
 80041da:	085b      	lsrmi	r3, r3, #1
 80041dc:	089b      	lsrpl	r3, r3, #2
 80041de:	2001      	movmi	r0, #1
 80041e0:	600b      	strmi	r3, [r1, #0]
 80041e2:	bf5c      	itt	pl
 80041e4:	600b      	strpl	r3, [r1, #0]
 80041e6:	2002      	movpl	r0, #2
 80041e8:	4770      	bx	lr
 80041ea:	b298      	uxth	r0, r3
 80041ec:	b9a8      	cbnz	r0, 800421a <__lo0bits+0x52>
 80041ee:	2010      	movs	r0, #16
 80041f0:	0c1b      	lsrs	r3, r3, #16
 80041f2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80041f6:	bf04      	itt	eq
 80041f8:	0a1b      	lsreq	r3, r3, #8
 80041fa:	3008      	addeq	r0, #8
 80041fc:	071a      	lsls	r2, r3, #28
 80041fe:	bf04      	itt	eq
 8004200:	091b      	lsreq	r3, r3, #4
 8004202:	3004      	addeq	r0, #4
 8004204:	079a      	lsls	r2, r3, #30
 8004206:	bf04      	itt	eq
 8004208:	089b      	lsreq	r3, r3, #2
 800420a:	3002      	addeq	r0, #2
 800420c:	07da      	lsls	r2, r3, #31
 800420e:	d402      	bmi.n	8004216 <__lo0bits+0x4e>
 8004210:	085b      	lsrs	r3, r3, #1
 8004212:	d006      	beq.n	8004222 <__lo0bits+0x5a>
 8004214:	3001      	adds	r0, #1
 8004216:	600b      	str	r3, [r1, #0]
 8004218:	4770      	bx	lr
 800421a:	4610      	mov	r0, r2
 800421c:	e7e9      	b.n	80041f2 <__lo0bits+0x2a>
 800421e:	2000      	movs	r0, #0
 8004220:	4770      	bx	lr
 8004222:	2020      	movs	r0, #32
 8004224:	4770      	bx	lr

08004226 <__i2b>:
 8004226:	b510      	push	{r4, lr}
 8004228:	460c      	mov	r4, r1
 800422a:	2101      	movs	r1, #1
 800422c:	f7ff ff27 	bl	800407e <_Balloc>
 8004230:	2201      	movs	r2, #1
 8004232:	6144      	str	r4, [r0, #20]
 8004234:	6102      	str	r2, [r0, #16]
 8004236:	bd10      	pop	{r4, pc}

08004238 <__multiply>:
 8004238:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800423c:	4614      	mov	r4, r2
 800423e:	690a      	ldr	r2, [r1, #16]
 8004240:	6923      	ldr	r3, [r4, #16]
 8004242:	4689      	mov	r9, r1
 8004244:	429a      	cmp	r2, r3
 8004246:	bfbe      	ittt	lt
 8004248:	460b      	movlt	r3, r1
 800424a:	46a1      	movlt	r9, r4
 800424c:	461c      	movlt	r4, r3
 800424e:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004252:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004256:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800425a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800425e:	eb07 060a 	add.w	r6, r7, sl
 8004262:	429e      	cmp	r6, r3
 8004264:	bfc8      	it	gt
 8004266:	3101      	addgt	r1, #1
 8004268:	f7ff ff09 	bl	800407e <_Balloc>
 800426c:	f100 0514 	add.w	r5, r0, #20
 8004270:	462b      	mov	r3, r5
 8004272:	2200      	movs	r2, #0
 8004274:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004278:	4543      	cmp	r3, r8
 800427a:	d316      	bcc.n	80042aa <__multiply+0x72>
 800427c:	f104 0214 	add.w	r2, r4, #20
 8004280:	f109 0114 	add.w	r1, r9, #20
 8004284:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8004288:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800428c:	9301      	str	r3, [sp, #4]
 800428e:	9c01      	ldr	r4, [sp, #4]
 8004290:	4613      	mov	r3, r2
 8004292:	4294      	cmp	r4, r2
 8004294:	d80c      	bhi.n	80042b0 <__multiply+0x78>
 8004296:	2e00      	cmp	r6, #0
 8004298:	dd03      	ble.n	80042a2 <__multiply+0x6a>
 800429a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d054      	beq.n	800434c <__multiply+0x114>
 80042a2:	6106      	str	r6, [r0, #16]
 80042a4:	b003      	add	sp, #12
 80042a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042aa:	f843 2b04 	str.w	r2, [r3], #4
 80042ae:	e7e3      	b.n	8004278 <__multiply+0x40>
 80042b0:	f8b3 a000 	ldrh.w	sl, [r3]
 80042b4:	3204      	adds	r2, #4
 80042b6:	f1ba 0f00 	cmp.w	sl, #0
 80042ba:	d020      	beq.n	80042fe <__multiply+0xc6>
 80042bc:	46ae      	mov	lr, r5
 80042be:	4689      	mov	r9, r1
 80042c0:	f04f 0c00 	mov.w	ip, #0
 80042c4:	f859 4b04 	ldr.w	r4, [r9], #4
 80042c8:	f8be b000 	ldrh.w	fp, [lr]
 80042cc:	b2a3      	uxth	r3, r4
 80042ce:	fb0a b303 	mla	r3, sl, r3, fp
 80042d2:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 80042d6:	f8de 4000 	ldr.w	r4, [lr]
 80042da:	4463      	add	r3, ip
 80042dc:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80042e0:	fb0a c40b 	mla	r4, sl, fp, ip
 80042e4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80042ee:	454f      	cmp	r7, r9
 80042f0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80042f4:	f84e 3b04 	str.w	r3, [lr], #4
 80042f8:	d8e4      	bhi.n	80042c4 <__multiply+0x8c>
 80042fa:	f8ce c000 	str.w	ip, [lr]
 80042fe:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8004302:	f1b9 0f00 	cmp.w	r9, #0
 8004306:	d01f      	beq.n	8004348 <__multiply+0x110>
 8004308:	46ae      	mov	lr, r5
 800430a:	468c      	mov	ip, r1
 800430c:	f04f 0a00 	mov.w	sl, #0
 8004310:	682b      	ldr	r3, [r5, #0]
 8004312:	f8bc 4000 	ldrh.w	r4, [ip]
 8004316:	f8be b002 	ldrh.w	fp, [lr, #2]
 800431a:	b29b      	uxth	r3, r3
 800431c:	fb09 b404 	mla	r4, r9, r4, fp
 8004320:	44a2      	add	sl, r4
 8004322:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8004326:	f84e 3b04 	str.w	r3, [lr], #4
 800432a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800432e:	f8be 4000 	ldrh.w	r4, [lr]
 8004332:	0c1b      	lsrs	r3, r3, #16
 8004334:	fb09 4303 	mla	r3, r9, r3, r4
 8004338:	4567      	cmp	r7, ip
 800433a:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 800433e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004342:	d8e6      	bhi.n	8004312 <__multiply+0xda>
 8004344:	f8ce 3000 	str.w	r3, [lr]
 8004348:	3504      	adds	r5, #4
 800434a:	e7a0      	b.n	800428e <__multiply+0x56>
 800434c:	3e01      	subs	r6, #1
 800434e:	e7a2      	b.n	8004296 <__multiply+0x5e>

08004350 <__pow5mult>:
 8004350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004354:	4615      	mov	r5, r2
 8004356:	f012 0203 	ands.w	r2, r2, #3
 800435a:	4606      	mov	r6, r0
 800435c:	460f      	mov	r7, r1
 800435e:	d007      	beq.n	8004370 <__pow5mult+0x20>
 8004360:	4c21      	ldr	r4, [pc, #132]	; (80043e8 <__pow5mult+0x98>)
 8004362:	3a01      	subs	r2, #1
 8004364:	2300      	movs	r3, #0
 8004366:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800436a:	f7ff fed3 	bl	8004114 <__multadd>
 800436e:	4607      	mov	r7, r0
 8004370:	10ad      	asrs	r5, r5, #2
 8004372:	d035      	beq.n	80043e0 <__pow5mult+0x90>
 8004374:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004376:	b93c      	cbnz	r4, 8004388 <__pow5mult+0x38>
 8004378:	2010      	movs	r0, #16
 800437a:	f7ff fe5f 	bl	800403c <malloc>
 800437e:	6270      	str	r0, [r6, #36]	; 0x24
 8004380:	6044      	str	r4, [r0, #4]
 8004382:	6084      	str	r4, [r0, #8]
 8004384:	6004      	str	r4, [r0, #0]
 8004386:	60c4      	str	r4, [r0, #12]
 8004388:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800438c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004390:	b94c      	cbnz	r4, 80043a6 <__pow5mult+0x56>
 8004392:	f240 2171 	movw	r1, #625	; 0x271
 8004396:	4630      	mov	r0, r6
 8004398:	f7ff ff45 	bl	8004226 <__i2b>
 800439c:	2300      	movs	r3, #0
 800439e:	4604      	mov	r4, r0
 80043a0:	f8c8 0008 	str.w	r0, [r8, #8]
 80043a4:	6003      	str	r3, [r0, #0]
 80043a6:	f04f 0800 	mov.w	r8, #0
 80043aa:	07eb      	lsls	r3, r5, #31
 80043ac:	d50a      	bpl.n	80043c4 <__pow5mult+0x74>
 80043ae:	4639      	mov	r1, r7
 80043b0:	4622      	mov	r2, r4
 80043b2:	4630      	mov	r0, r6
 80043b4:	f7ff ff40 	bl	8004238 <__multiply>
 80043b8:	4681      	mov	r9, r0
 80043ba:	4639      	mov	r1, r7
 80043bc:	4630      	mov	r0, r6
 80043be:	f7ff fe92 	bl	80040e6 <_Bfree>
 80043c2:	464f      	mov	r7, r9
 80043c4:	106d      	asrs	r5, r5, #1
 80043c6:	d00b      	beq.n	80043e0 <__pow5mult+0x90>
 80043c8:	6820      	ldr	r0, [r4, #0]
 80043ca:	b938      	cbnz	r0, 80043dc <__pow5mult+0x8c>
 80043cc:	4622      	mov	r2, r4
 80043ce:	4621      	mov	r1, r4
 80043d0:	4630      	mov	r0, r6
 80043d2:	f7ff ff31 	bl	8004238 <__multiply>
 80043d6:	6020      	str	r0, [r4, #0]
 80043d8:	f8c0 8000 	str.w	r8, [r0]
 80043dc:	4604      	mov	r4, r0
 80043de:	e7e4      	b.n	80043aa <__pow5mult+0x5a>
 80043e0:	4638      	mov	r0, r7
 80043e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043e6:	bf00      	nop
 80043e8:	08004e90 	.word	0x08004e90

080043ec <__lshift>:
 80043ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043f0:	460c      	mov	r4, r1
 80043f2:	4607      	mov	r7, r0
 80043f4:	4616      	mov	r6, r2
 80043f6:	6923      	ldr	r3, [r4, #16]
 80043f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80043fc:	eb0a 0903 	add.w	r9, sl, r3
 8004400:	6849      	ldr	r1, [r1, #4]
 8004402:	68a3      	ldr	r3, [r4, #8]
 8004404:	f109 0501 	add.w	r5, r9, #1
 8004408:	42ab      	cmp	r3, r5
 800440a:	db31      	blt.n	8004470 <__lshift+0x84>
 800440c:	4638      	mov	r0, r7
 800440e:	f7ff fe36 	bl	800407e <_Balloc>
 8004412:	2200      	movs	r2, #0
 8004414:	4680      	mov	r8, r0
 8004416:	4611      	mov	r1, r2
 8004418:	f100 0314 	add.w	r3, r0, #20
 800441c:	4552      	cmp	r2, sl
 800441e:	db2a      	blt.n	8004476 <__lshift+0x8a>
 8004420:	6920      	ldr	r0, [r4, #16]
 8004422:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004426:	f104 0114 	add.w	r1, r4, #20
 800442a:	f016 021f 	ands.w	r2, r6, #31
 800442e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8004432:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8004436:	d022      	beq.n	800447e <__lshift+0x92>
 8004438:	2000      	movs	r0, #0
 800443a:	f1c2 0c20 	rsb	ip, r2, #32
 800443e:	680e      	ldr	r6, [r1, #0]
 8004440:	4096      	lsls	r6, r2
 8004442:	4330      	orrs	r0, r6
 8004444:	f843 0b04 	str.w	r0, [r3], #4
 8004448:	f851 0b04 	ldr.w	r0, [r1], #4
 800444c:	458e      	cmp	lr, r1
 800444e:	fa20 f00c 	lsr.w	r0, r0, ip
 8004452:	d8f4      	bhi.n	800443e <__lshift+0x52>
 8004454:	6018      	str	r0, [r3, #0]
 8004456:	b108      	cbz	r0, 800445c <__lshift+0x70>
 8004458:	f109 0502 	add.w	r5, r9, #2
 800445c:	3d01      	subs	r5, #1
 800445e:	4638      	mov	r0, r7
 8004460:	f8c8 5010 	str.w	r5, [r8, #16]
 8004464:	4621      	mov	r1, r4
 8004466:	f7ff fe3e 	bl	80040e6 <_Bfree>
 800446a:	4640      	mov	r0, r8
 800446c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004470:	3101      	adds	r1, #1
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	e7c8      	b.n	8004408 <__lshift+0x1c>
 8004476:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800447a:	3201      	adds	r2, #1
 800447c:	e7ce      	b.n	800441c <__lshift+0x30>
 800447e:	3b04      	subs	r3, #4
 8004480:	f851 2b04 	ldr.w	r2, [r1], #4
 8004484:	458e      	cmp	lr, r1
 8004486:	f843 2f04 	str.w	r2, [r3, #4]!
 800448a:	d8f9      	bhi.n	8004480 <__lshift+0x94>
 800448c:	e7e6      	b.n	800445c <__lshift+0x70>

0800448e <__mcmp>:
 800448e:	6903      	ldr	r3, [r0, #16]
 8004490:	690a      	ldr	r2, [r1, #16]
 8004492:	b530      	push	{r4, r5, lr}
 8004494:	1a9b      	subs	r3, r3, r2
 8004496:	d10c      	bne.n	80044b2 <__mcmp+0x24>
 8004498:	0092      	lsls	r2, r2, #2
 800449a:	3014      	adds	r0, #20
 800449c:	3114      	adds	r1, #20
 800449e:	1884      	adds	r4, r0, r2
 80044a0:	4411      	add	r1, r2
 80044a2:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80044a6:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80044aa:	4295      	cmp	r5, r2
 80044ac:	d003      	beq.n	80044b6 <__mcmp+0x28>
 80044ae:	d305      	bcc.n	80044bc <__mcmp+0x2e>
 80044b0:	2301      	movs	r3, #1
 80044b2:	4618      	mov	r0, r3
 80044b4:	bd30      	pop	{r4, r5, pc}
 80044b6:	42a0      	cmp	r0, r4
 80044b8:	d3f3      	bcc.n	80044a2 <__mcmp+0x14>
 80044ba:	e7fa      	b.n	80044b2 <__mcmp+0x24>
 80044bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044c0:	e7f7      	b.n	80044b2 <__mcmp+0x24>

080044c2 <__mdiff>:
 80044c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044c6:	460d      	mov	r5, r1
 80044c8:	4607      	mov	r7, r0
 80044ca:	4611      	mov	r1, r2
 80044cc:	4628      	mov	r0, r5
 80044ce:	4614      	mov	r4, r2
 80044d0:	f7ff ffdd 	bl	800448e <__mcmp>
 80044d4:	1e06      	subs	r6, r0, #0
 80044d6:	d108      	bne.n	80044ea <__mdiff+0x28>
 80044d8:	4631      	mov	r1, r6
 80044da:	4638      	mov	r0, r7
 80044dc:	f7ff fdcf 	bl	800407e <_Balloc>
 80044e0:	2301      	movs	r3, #1
 80044e2:	6146      	str	r6, [r0, #20]
 80044e4:	6103      	str	r3, [r0, #16]
 80044e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044ea:	bfa4      	itt	ge
 80044ec:	4623      	movge	r3, r4
 80044ee:	462c      	movge	r4, r5
 80044f0:	4638      	mov	r0, r7
 80044f2:	6861      	ldr	r1, [r4, #4]
 80044f4:	bfa6      	itte	ge
 80044f6:	461d      	movge	r5, r3
 80044f8:	2600      	movge	r6, #0
 80044fa:	2601      	movlt	r6, #1
 80044fc:	f7ff fdbf 	bl	800407e <_Balloc>
 8004500:	f04f 0c00 	mov.w	ip, #0
 8004504:	60c6      	str	r6, [r0, #12]
 8004506:	692b      	ldr	r3, [r5, #16]
 8004508:	6926      	ldr	r6, [r4, #16]
 800450a:	f104 0214 	add.w	r2, r4, #20
 800450e:	f105 0914 	add.w	r9, r5, #20
 8004512:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8004516:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800451a:	f100 0114 	add.w	r1, r0, #20
 800451e:	f852 ab04 	ldr.w	sl, [r2], #4
 8004522:	f859 5b04 	ldr.w	r5, [r9], #4
 8004526:	fa1f f38a 	uxth.w	r3, sl
 800452a:	4463      	add	r3, ip
 800452c:	b2ac      	uxth	r4, r5
 800452e:	1b1b      	subs	r3, r3, r4
 8004530:	0c2c      	lsrs	r4, r5, #16
 8004532:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8004536:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800453a:	b29b      	uxth	r3, r3
 800453c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8004540:	45c8      	cmp	r8, r9
 8004542:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8004546:	4696      	mov	lr, r2
 8004548:	f841 4b04 	str.w	r4, [r1], #4
 800454c:	d8e7      	bhi.n	800451e <__mdiff+0x5c>
 800454e:	45be      	cmp	lr, r7
 8004550:	d305      	bcc.n	800455e <__mdiff+0x9c>
 8004552:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004556:	b18b      	cbz	r3, 800457c <__mdiff+0xba>
 8004558:	6106      	str	r6, [r0, #16]
 800455a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800455e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8004562:	b2a2      	uxth	r2, r4
 8004564:	4462      	add	r2, ip
 8004566:	1413      	asrs	r3, r2, #16
 8004568:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800456c:	b292      	uxth	r2, r2
 800456e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004572:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004576:	f841 2b04 	str.w	r2, [r1], #4
 800457a:	e7e8      	b.n	800454e <__mdiff+0x8c>
 800457c:	3e01      	subs	r6, #1
 800457e:	e7e8      	b.n	8004552 <__mdiff+0x90>

08004580 <__d2b>:
 8004580:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004584:	461c      	mov	r4, r3
 8004586:	2101      	movs	r1, #1
 8004588:	4690      	mov	r8, r2
 800458a:	9e08      	ldr	r6, [sp, #32]
 800458c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800458e:	f7ff fd76 	bl	800407e <_Balloc>
 8004592:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8004596:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800459a:	4607      	mov	r7, r0
 800459c:	bb34      	cbnz	r4, 80045ec <__d2b+0x6c>
 800459e:	9201      	str	r2, [sp, #4]
 80045a0:	f1b8 0f00 	cmp.w	r8, #0
 80045a4:	d027      	beq.n	80045f6 <__d2b+0x76>
 80045a6:	a802      	add	r0, sp, #8
 80045a8:	f840 8d08 	str.w	r8, [r0, #-8]!
 80045ac:	f7ff fe0c 	bl	80041c8 <__lo0bits>
 80045b0:	9900      	ldr	r1, [sp, #0]
 80045b2:	b1f0      	cbz	r0, 80045f2 <__d2b+0x72>
 80045b4:	9a01      	ldr	r2, [sp, #4]
 80045b6:	f1c0 0320 	rsb	r3, r0, #32
 80045ba:	fa02 f303 	lsl.w	r3, r2, r3
 80045be:	430b      	orrs	r3, r1
 80045c0:	40c2      	lsrs	r2, r0
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	9201      	str	r2, [sp, #4]
 80045c6:	9b01      	ldr	r3, [sp, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	bf14      	ite	ne
 80045cc:	2102      	movne	r1, #2
 80045ce:	2101      	moveq	r1, #1
 80045d0:	61bb      	str	r3, [r7, #24]
 80045d2:	6139      	str	r1, [r7, #16]
 80045d4:	b1c4      	cbz	r4, 8004608 <__d2b+0x88>
 80045d6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80045da:	4404      	add	r4, r0
 80045dc:	6034      	str	r4, [r6, #0]
 80045de:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80045e2:	6028      	str	r0, [r5, #0]
 80045e4:	4638      	mov	r0, r7
 80045e6:	b002      	add	sp, #8
 80045e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045ec:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80045f0:	e7d5      	b.n	800459e <__d2b+0x1e>
 80045f2:	6179      	str	r1, [r7, #20]
 80045f4:	e7e7      	b.n	80045c6 <__d2b+0x46>
 80045f6:	a801      	add	r0, sp, #4
 80045f8:	f7ff fde6 	bl	80041c8 <__lo0bits>
 80045fc:	2101      	movs	r1, #1
 80045fe:	9b01      	ldr	r3, [sp, #4]
 8004600:	6139      	str	r1, [r7, #16]
 8004602:	617b      	str	r3, [r7, #20]
 8004604:	3020      	adds	r0, #32
 8004606:	e7e5      	b.n	80045d4 <__d2b+0x54>
 8004608:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800460c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004610:	6030      	str	r0, [r6, #0]
 8004612:	6918      	ldr	r0, [r3, #16]
 8004614:	f7ff fdb9 	bl	800418a <__hi0bits>
 8004618:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800461c:	e7e1      	b.n	80045e2 <__d2b+0x62>

0800461e <_calloc_r>:
 800461e:	b538      	push	{r3, r4, r5, lr}
 8004620:	fb02 f401 	mul.w	r4, r2, r1
 8004624:	4621      	mov	r1, r4
 8004626:	f000 f855 	bl	80046d4 <_malloc_r>
 800462a:	4605      	mov	r5, r0
 800462c:	b118      	cbz	r0, 8004636 <_calloc_r+0x18>
 800462e:	4622      	mov	r2, r4
 8004630:	2100      	movs	r1, #0
 8004632:	f7fe f9ed 	bl	8002a10 <memset>
 8004636:	4628      	mov	r0, r5
 8004638:	bd38      	pop	{r3, r4, r5, pc}
	...

0800463c <_free_r>:
 800463c:	b538      	push	{r3, r4, r5, lr}
 800463e:	4605      	mov	r5, r0
 8004640:	2900      	cmp	r1, #0
 8004642:	d043      	beq.n	80046cc <_free_r+0x90>
 8004644:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004648:	1f0c      	subs	r4, r1, #4
 800464a:	2b00      	cmp	r3, #0
 800464c:	bfb8      	it	lt
 800464e:	18e4      	addlt	r4, r4, r3
 8004650:	f000 fa2a 	bl	8004aa8 <__malloc_lock>
 8004654:	4a1e      	ldr	r2, [pc, #120]	; (80046d0 <_free_r+0x94>)
 8004656:	6813      	ldr	r3, [r2, #0]
 8004658:	4610      	mov	r0, r2
 800465a:	b933      	cbnz	r3, 800466a <_free_r+0x2e>
 800465c:	6063      	str	r3, [r4, #4]
 800465e:	6014      	str	r4, [r2, #0]
 8004660:	4628      	mov	r0, r5
 8004662:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004666:	f000 ba20 	b.w	8004aaa <__malloc_unlock>
 800466a:	42a3      	cmp	r3, r4
 800466c:	d90b      	bls.n	8004686 <_free_r+0x4a>
 800466e:	6821      	ldr	r1, [r4, #0]
 8004670:	1862      	adds	r2, r4, r1
 8004672:	4293      	cmp	r3, r2
 8004674:	bf01      	itttt	eq
 8004676:	681a      	ldreq	r2, [r3, #0]
 8004678:	685b      	ldreq	r3, [r3, #4]
 800467a:	1852      	addeq	r2, r2, r1
 800467c:	6022      	streq	r2, [r4, #0]
 800467e:	6063      	str	r3, [r4, #4]
 8004680:	6004      	str	r4, [r0, #0]
 8004682:	e7ed      	b.n	8004660 <_free_r+0x24>
 8004684:	4613      	mov	r3, r2
 8004686:	685a      	ldr	r2, [r3, #4]
 8004688:	b10a      	cbz	r2, 800468e <_free_r+0x52>
 800468a:	42a2      	cmp	r2, r4
 800468c:	d9fa      	bls.n	8004684 <_free_r+0x48>
 800468e:	6819      	ldr	r1, [r3, #0]
 8004690:	1858      	adds	r0, r3, r1
 8004692:	42a0      	cmp	r0, r4
 8004694:	d10b      	bne.n	80046ae <_free_r+0x72>
 8004696:	6820      	ldr	r0, [r4, #0]
 8004698:	4401      	add	r1, r0
 800469a:	1858      	adds	r0, r3, r1
 800469c:	4282      	cmp	r2, r0
 800469e:	6019      	str	r1, [r3, #0]
 80046a0:	d1de      	bne.n	8004660 <_free_r+0x24>
 80046a2:	6810      	ldr	r0, [r2, #0]
 80046a4:	6852      	ldr	r2, [r2, #4]
 80046a6:	4401      	add	r1, r0
 80046a8:	6019      	str	r1, [r3, #0]
 80046aa:	605a      	str	r2, [r3, #4]
 80046ac:	e7d8      	b.n	8004660 <_free_r+0x24>
 80046ae:	d902      	bls.n	80046b6 <_free_r+0x7a>
 80046b0:	230c      	movs	r3, #12
 80046b2:	602b      	str	r3, [r5, #0]
 80046b4:	e7d4      	b.n	8004660 <_free_r+0x24>
 80046b6:	6820      	ldr	r0, [r4, #0]
 80046b8:	1821      	adds	r1, r4, r0
 80046ba:	428a      	cmp	r2, r1
 80046bc:	bf01      	itttt	eq
 80046be:	6811      	ldreq	r1, [r2, #0]
 80046c0:	6852      	ldreq	r2, [r2, #4]
 80046c2:	1809      	addeq	r1, r1, r0
 80046c4:	6021      	streq	r1, [r4, #0]
 80046c6:	6062      	str	r2, [r4, #4]
 80046c8:	605c      	str	r4, [r3, #4]
 80046ca:	e7c9      	b.n	8004660 <_free_r+0x24>
 80046cc:	bd38      	pop	{r3, r4, r5, pc}
 80046ce:	bf00      	nop
 80046d0:	20000204 	.word	0x20000204

080046d4 <_malloc_r>:
 80046d4:	b570      	push	{r4, r5, r6, lr}
 80046d6:	1ccd      	adds	r5, r1, #3
 80046d8:	f025 0503 	bic.w	r5, r5, #3
 80046dc:	3508      	adds	r5, #8
 80046de:	2d0c      	cmp	r5, #12
 80046e0:	bf38      	it	cc
 80046e2:	250c      	movcc	r5, #12
 80046e4:	2d00      	cmp	r5, #0
 80046e6:	4606      	mov	r6, r0
 80046e8:	db01      	blt.n	80046ee <_malloc_r+0x1a>
 80046ea:	42a9      	cmp	r1, r5
 80046ec:	d903      	bls.n	80046f6 <_malloc_r+0x22>
 80046ee:	230c      	movs	r3, #12
 80046f0:	6033      	str	r3, [r6, #0]
 80046f2:	2000      	movs	r0, #0
 80046f4:	bd70      	pop	{r4, r5, r6, pc}
 80046f6:	f000 f9d7 	bl	8004aa8 <__malloc_lock>
 80046fa:	4a23      	ldr	r2, [pc, #140]	; (8004788 <_malloc_r+0xb4>)
 80046fc:	6814      	ldr	r4, [r2, #0]
 80046fe:	4621      	mov	r1, r4
 8004700:	b991      	cbnz	r1, 8004728 <_malloc_r+0x54>
 8004702:	4c22      	ldr	r4, [pc, #136]	; (800478c <_malloc_r+0xb8>)
 8004704:	6823      	ldr	r3, [r4, #0]
 8004706:	b91b      	cbnz	r3, 8004710 <_malloc_r+0x3c>
 8004708:	4630      	mov	r0, r6
 800470a:	f000 f991 	bl	8004a30 <_sbrk_r>
 800470e:	6020      	str	r0, [r4, #0]
 8004710:	4629      	mov	r1, r5
 8004712:	4630      	mov	r0, r6
 8004714:	f000 f98c 	bl	8004a30 <_sbrk_r>
 8004718:	1c43      	adds	r3, r0, #1
 800471a:	d126      	bne.n	800476a <_malloc_r+0x96>
 800471c:	230c      	movs	r3, #12
 800471e:	4630      	mov	r0, r6
 8004720:	6033      	str	r3, [r6, #0]
 8004722:	f000 f9c2 	bl	8004aaa <__malloc_unlock>
 8004726:	e7e4      	b.n	80046f2 <_malloc_r+0x1e>
 8004728:	680b      	ldr	r3, [r1, #0]
 800472a:	1b5b      	subs	r3, r3, r5
 800472c:	d41a      	bmi.n	8004764 <_malloc_r+0x90>
 800472e:	2b0b      	cmp	r3, #11
 8004730:	d90f      	bls.n	8004752 <_malloc_r+0x7e>
 8004732:	600b      	str	r3, [r1, #0]
 8004734:	18cc      	adds	r4, r1, r3
 8004736:	50cd      	str	r5, [r1, r3]
 8004738:	4630      	mov	r0, r6
 800473a:	f000 f9b6 	bl	8004aaa <__malloc_unlock>
 800473e:	f104 000b 	add.w	r0, r4, #11
 8004742:	1d23      	adds	r3, r4, #4
 8004744:	f020 0007 	bic.w	r0, r0, #7
 8004748:	1ac3      	subs	r3, r0, r3
 800474a:	d01b      	beq.n	8004784 <_malloc_r+0xb0>
 800474c:	425a      	negs	r2, r3
 800474e:	50e2      	str	r2, [r4, r3]
 8004750:	bd70      	pop	{r4, r5, r6, pc}
 8004752:	428c      	cmp	r4, r1
 8004754:	bf0b      	itete	eq
 8004756:	6863      	ldreq	r3, [r4, #4]
 8004758:	684b      	ldrne	r3, [r1, #4]
 800475a:	6013      	streq	r3, [r2, #0]
 800475c:	6063      	strne	r3, [r4, #4]
 800475e:	bf18      	it	ne
 8004760:	460c      	movne	r4, r1
 8004762:	e7e9      	b.n	8004738 <_malloc_r+0x64>
 8004764:	460c      	mov	r4, r1
 8004766:	6849      	ldr	r1, [r1, #4]
 8004768:	e7ca      	b.n	8004700 <_malloc_r+0x2c>
 800476a:	1cc4      	adds	r4, r0, #3
 800476c:	f024 0403 	bic.w	r4, r4, #3
 8004770:	42a0      	cmp	r0, r4
 8004772:	d005      	beq.n	8004780 <_malloc_r+0xac>
 8004774:	1a21      	subs	r1, r4, r0
 8004776:	4630      	mov	r0, r6
 8004778:	f000 f95a 	bl	8004a30 <_sbrk_r>
 800477c:	3001      	adds	r0, #1
 800477e:	d0cd      	beq.n	800471c <_malloc_r+0x48>
 8004780:	6025      	str	r5, [r4, #0]
 8004782:	e7d9      	b.n	8004738 <_malloc_r+0x64>
 8004784:	bd70      	pop	{r4, r5, r6, pc}
 8004786:	bf00      	nop
 8004788:	20000204 	.word	0x20000204
 800478c:	20000208 	.word	0x20000208

08004790 <__ssputs_r>:
 8004790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004794:	688e      	ldr	r6, [r1, #8]
 8004796:	4682      	mov	sl, r0
 8004798:	429e      	cmp	r6, r3
 800479a:	460c      	mov	r4, r1
 800479c:	4691      	mov	r9, r2
 800479e:	4698      	mov	r8, r3
 80047a0:	d835      	bhi.n	800480e <__ssputs_r+0x7e>
 80047a2:	898a      	ldrh	r2, [r1, #12]
 80047a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80047a8:	d031      	beq.n	800480e <__ssputs_r+0x7e>
 80047aa:	2302      	movs	r3, #2
 80047ac:	6825      	ldr	r5, [r4, #0]
 80047ae:	6909      	ldr	r1, [r1, #16]
 80047b0:	1a6f      	subs	r7, r5, r1
 80047b2:	6965      	ldr	r5, [r4, #20]
 80047b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80047b8:	fb95 f5f3 	sdiv	r5, r5, r3
 80047bc:	f108 0301 	add.w	r3, r8, #1
 80047c0:	443b      	add	r3, r7
 80047c2:	429d      	cmp	r5, r3
 80047c4:	bf38      	it	cc
 80047c6:	461d      	movcc	r5, r3
 80047c8:	0553      	lsls	r3, r2, #21
 80047ca:	d531      	bpl.n	8004830 <__ssputs_r+0xa0>
 80047cc:	4629      	mov	r1, r5
 80047ce:	f7ff ff81 	bl	80046d4 <_malloc_r>
 80047d2:	4606      	mov	r6, r0
 80047d4:	b950      	cbnz	r0, 80047ec <__ssputs_r+0x5c>
 80047d6:	230c      	movs	r3, #12
 80047d8:	f8ca 3000 	str.w	r3, [sl]
 80047dc:	89a3      	ldrh	r3, [r4, #12]
 80047de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047e6:	81a3      	strh	r3, [r4, #12]
 80047e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047ec:	463a      	mov	r2, r7
 80047ee:	6921      	ldr	r1, [r4, #16]
 80047f0:	f7ff fc3a 	bl	8004068 <memcpy>
 80047f4:	89a3      	ldrh	r3, [r4, #12]
 80047f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80047fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047fe:	81a3      	strh	r3, [r4, #12]
 8004800:	6126      	str	r6, [r4, #16]
 8004802:	443e      	add	r6, r7
 8004804:	6026      	str	r6, [r4, #0]
 8004806:	4646      	mov	r6, r8
 8004808:	6165      	str	r5, [r4, #20]
 800480a:	1bed      	subs	r5, r5, r7
 800480c:	60a5      	str	r5, [r4, #8]
 800480e:	4546      	cmp	r6, r8
 8004810:	bf28      	it	cs
 8004812:	4646      	movcs	r6, r8
 8004814:	4649      	mov	r1, r9
 8004816:	4632      	mov	r2, r6
 8004818:	6820      	ldr	r0, [r4, #0]
 800481a:	f000 f92b 	bl	8004a74 <memmove>
 800481e:	68a3      	ldr	r3, [r4, #8]
 8004820:	2000      	movs	r0, #0
 8004822:	1b9b      	subs	r3, r3, r6
 8004824:	60a3      	str	r3, [r4, #8]
 8004826:	6823      	ldr	r3, [r4, #0]
 8004828:	441e      	add	r6, r3
 800482a:	6026      	str	r6, [r4, #0]
 800482c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004830:	462a      	mov	r2, r5
 8004832:	f000 f93b 	bl	8004aac <_realloc_r>
 8004836:	4606      	mov	r6, r0
 8004838:	2800      	cmp	r0, #0
 800483a:	d1e1      	bne.n	8004800 <__ssputs_r+0x70>
 800483c:	6921      	ldr	r1, [r4, #16]
 800483e:	4650      	mov	r0, sl
 8004840:	f7ff fefc 	bl	800463c <_free_r>
 8004844:	e7c7      	b.n	80047d6 <__ssputs_r+0x46>
	...

08004848 <_svfiprintf_r>:
 8004848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800484c:	b09d      	sub	sp, #116	; 0x74
 800484e:	9303      	str	r3, [sp, #12]
 8004850:	898b      	ldrh	r3, [r1, #12]
 8004852:	4680      	mov	r8, r0
 8004854:	061c      	lsls	r4, r3, #24
 8004856:	460d      	mov	r5, r1
 8004858:	4616      	mov	r6, r2
 800485a:	d50f      	bpl.n	800487c <_svfiprintf_r+0x34>
 800485c:	690b      	ldr	r3, [r1, #16]
 800485e:	b96b      	cbnz	r3, 800487c <_svfiprintf_r+0x34>
 8004860:	2140      	movs	r1, #64	; 0x40
 8004862:	f7ff ff37 	bl	80046d4 <_malloc_r>
 8004866:	6028      	str	r0, [r5, #0]
 8004868:	6128      	str	r0, [r5, #16]
 800486a:	b928      	cbnz	r0, 8004878 <_svfiprintf_r+0x30>
 800486c:	230c      	movs	r3, #12
 800486e:	f8c8 3000 	str.w	r3, [r8]
 8004872:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004876:	e0c4      	b.n	8004a02 <_svfiprintf_r+0x1ba>
 8004878:	2340      	movs	r3, #64	; 0x40
 800487a:	616b      	str	r3, [r5, #20]
 800487c:	2300      	movs	r3, #0
 800487e:	9309      	str	r3, [sp, #36]	; 0x24
 8004880:	2320      	movs	r3, #32
 8004882:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004886:	2330      	movs	r3, #48	; 0x30
 8004888:	f04f 0b01 	mov.w	fp, #1
 800488c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004890:	4637      	mov	r7, r6
 8004892:	463c      	mov	r4, r7
 8004894:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004898:	2b00      	cmp	r3, #0
 800489a:	d13c      	bne.n	8004916 <_svfiprintf_r+0xce>
 800489c:	ebb7 0a06 	subs.w	sl, r7, r6
 80048a0:	d00b      	beq.n	80048ba <_svfiprintf_r+0x72>
 80048a2:	4653      	mov	r3, sl
 80048a4:	4632      	mov	r2, r6
 80048a6:	4629      	mov	r1, r5
 80048a8:	4640      	mov	r0, r8
 80048aa:	f7ff ff71 	bl	8004790 <__ssputs_r>
 80048ae:	3001      	adds	r0, #1
 80048b0:	f000 80a2 	beq.w	80049f8 <_svfiprintf_r+0x1b0>
 80048b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048b6:	4453      	add	r3, sl
 80048b8:	9309      	str	r3, [sp, #36]	; 0x24
 80048ba:	783b      	ldrb	r3, [r7, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f000 809b 	beq.w	80049f8 <_svfiprintf_r+0x1b0>
 80048c2:	2300      	movs	r3, #0
 80048c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048c8:	9304      	str	r3, [sp, #16]
 80048ca:	9307      	str	r3, [sp, #28]
 80048cc:	9205      	str	r2, [sp, #20]
 80048ce:	9306      	str	r3, [sp, #24]
 80048d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048d4:	931a      	str	r3, [sp, #104]	; 0x68
 80048d6:	2205      	movs	r2, #5
 80048d8:	7821      	ldrb	r1, [r4, #0]
 80048da:	4850      	ldr	r0, [pc, #320]	; (8004a1c <_svfiprintf_r+0x1d4>)
 80048dc:	f7ff fbb6 	bl	800404c <memchr>
 80048e0:	1c67      	adds	r7, r4, #1
 80048e2:	9b04      	ldr	r3, [sp, #16]
 80048e4:	b9d8      	cbnz	r0, 800491e <_svfiprintf_r+0xd6>
 80048e6:	06d9      	lsls	r1, r3, #27
 80048e8:	bf44      	itt	mi
 80048ea:	2220      	movmi	r2, #32
 80048ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80048f0:	071a      	lsls	r2, r3, #28
 80048f2:	bf44      	itt	mi
 80048f4:	222b      	movmi	r2, #43	; 0x2b
 80048f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80048fa:	7822      	ldrb	r2, [r4, #0]
 80048fc:	2a2a      	cmp	r2, #42	; 0x2a
 80048fe:	d016      	beq.n	800492e <_svfiprintf_r+0xe6>
 8004900:	2100      	movs	r1, #0
 8004902:	200a      	movs	r0, #10
 8004904:	9a07      	ldr	r2, [sp, #28]
 8004906:	4627      	mov	r7, r4
 8004908:	783b      	ldrb	r3, [r7, #0]
 800490a:	3401      	adds	r4, #1
 800490c:	3b30      	subs	r3, #48	; 0x30
 800490e:	2b09      	cmp	r3, #9
 8004910:	d950      	bls.n	80049b4 <_svfiprintf_r+0x16c>
 8004912:	b1c9      	cbz	r1, 8004948 <_svfiprintf_r+0x100>
 8004914:	e011      	b.n	800493a <_svfiprintf_r+0xf2>
 8004916:	2b25      	cmp	r3, #37	; 0x25
 8004918:	d0c0      	beq.n	800489c <_svfiprintf_r+0x54>
 800491a:	4627      	mov	r7, r4
 800491c:	e7b9      	b.n	8004892 <_svfiprintf_r+0x4a>
 800491e:	4a3f      	ldr	r2, [pc, #252]	; (8004a1c <_svfiprintf_r+0x1d4>)
 8004920:	463c      	mov	r4, r7
 8004922:	1a80      	subs	r0, r0, r2
 8004924:	fa0b f000 	lsl.w	r0, fp, r0
 8004928:	4318      	orrs	r0, r3
 800492a:	9004      	str	r0, [sp, #16]
 800492c:	e7d3      	b.n	80048d6 <_svfiprintf_r+0x8e>
 800492e:	9a03      	ldr	r2, [sp, #12]
 8004930:	1d11      	adds	r1, r2, #4
 8004932:	6812      	ldr	r2, [r2, #0]
 8004934:	9103      	str	r1, [sp, #12]
 8004936:	2a00      	cmp	r2, #0
 8004938:	db01      	blt.n	800493e <_svfiprintf_r+0xf6>
 800493a:	9207      	str	r2, [sp, #28]
 800493c:	e004      	b.n	8004948 <_svfiprintf_r+0x100>
 800493e:	4252      	negs	r2, r2
 8004940:	f043 0302 	orr.w	r3, r3, #2
 8004944:	9207      	str	r2, [sp, #28]
 8004946:	9304      	str	r3, [sp, #16]
 8004948:	783b      	ldrb	r3, [r7, #0]
 800494a:	2b2e      	cmp	r3, #46	; 0x2e
 800494c:	d10d      	bne.n	800496a <_svfiprintf_r+0x122>
 800494e:	787b      	ldrb	r3, [r7, #1]
 8004950:	1c79      	adds	r1, r7, #1
 8004952:	2b2a      	cmp	r3, #42	; 0x2a
 8004954:	d132      	bne.n	80049bc <_svfiprintf_r+0x174>
 8004956:	9b03      	ldr	r3, [sp, #12]
 8004958:	3702      	adds	r7, #2
 800495a:	1d1a      	adds	r2, r3, #4
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	9203      	str	r2, [sp, #12]
 8004960:	2b00      	cmp	r3, #0
 8004962:	bfb8      	it	lt
 8004964:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004968:	9305      	str	r3, [sp, #20]
 800496a:	4c2d      	ldr	r4, [pc, #180]	; (8004a20 <_svfiprintf_r+0x1d8>)
 800496c:	2203      	movs	r2, #3
 800496e:	7839      	ldrb	r1, [r7, #0]
 8004970:	4620      	mov	r0, r4
 8004972:	f7ff fb6b 	bl	800404c <memchr>
 8004976:	b138      	cbz	r0, 8004988 <_svfiprintf_r+0x140>
 8004978:	2340      	movs	r3, #64	; 0x40
 800497a:	1b00      	subs	r0, r0, r4
 800497c:	fa03 f000 	lsl.w	r0, r3, r0
 8004980:	9b04      	ldr	r3, [sp, #16]
 8004982:	3701      	adds	r7, #1
 8004984:	4303      	orrs	r3, r0
 8004986:	9304      	str	r3, [sp, #16]
 8004988:	7839      	ldrb	r1, [r7, #0]
 800498a:	2206      	movs	r2, #6
 800498c:	4825      	ldr	r0, [pc, #148]	; (8004a24 <_svfiprintf_r+0x1dc>)
 800498e:	1c7e      	adds	r6, r7, #1
 8004990:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004994:	f7ff fb5a 	bl	800404c <memchr>
 8004998:	2800      	cmp	r0, #0
 800499a:	d035      	beq.n	8004a08 <_svfiprintf_r+0x1c0>
 800499c:	4b22      	ldr	r3, [pc, #136]	; (8004a28 <_svfiprintf_r+0x1e0>)
 800499e:	b9fb      	cbnz	r3, 80049e0 <_svfiprintf_r+0x198>
 80049a0:	9b03      	ldr	r3, [sp, #12]
 80049a2:	3307      	adds	r3, #7
 80049a4:	f023 0307 	bic.w	r3, r3, #7
 80049a8:	3308      	adds	r3, #8
 80049aa:	9303      	str	r3, [sp, #12]
 80049ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049ae:	444b      	add	r3, r9
 80049b0:	9309      	str	r3, [sp, #36]	; 0x24
 80049b2:	e76d      	b.n	8004890 <_svfiprintf_r+0x48>
 80049b4:	fb00 3202 	mla	r2, r0, r2, r3
 80049b8:	2101      	movs	r1, #1
 80049ba:	e7a4      	b.n	8004906 <_svfiprintf_r+0xbe>
 80049bc:	2300      	movs	r3, #0
 80049be:	240a      	movs	r4, #10
 80049c0:	4618      	mov	r0, r3
 80049c2:	9305      	str	r3, [sp, #20]
 80049c4:	460f      	mov	r7, r1
 80049c6:	783a      	ldrb	r2, [r7, #0]
 80049c8:	3101      	adds	r1, #1
 80049ca:	3a30      	subs	r2, #48	; 0x30
 80049cc:	2a09      	cmp	r2, #9
 80049ce:	d903      	bls.n	80049d8 <_svfiprintf_r+0x190>
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d0ca      	beq.n	800496a <_svfiprintf_r+0x122>
 80049d4:	9005      	str	r0, [sp, #20]
 80049d6:	e7c8      	b.n	800496a <_svfiprintf_r+0x122>
 80049d8:	fb04 2000 	mla	r0, r4, r0, r2
 80049dc:	2301      	movs	r3, #1
 80049de:	e7f1      	b.n	80049c4 <_svfiprintf_r+0x17c>
 80049e0:	ab03      	add	r3, sp, #12
 80049e2:	9300      	str	r3, [sp, #0]
 80049e4:	462a      	mov	r2, r5
 80049e6:	4b11      	ldr	r3, [pc, #68]	; (8004a2c <_svfiprintf_r+0x1e4>)
 80049e8:	a904      	add	r1, sp, #16
 80049ea:	4640      	mov	r0, r8
 80049ec:	f7fe f8aa 	bl	8002b44 <_printf_float>
 80049f0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80049f4:	4681      	mov	r9, r0
 80049f6:	d1d9      	bne.n	80049ac <_svfiprintf_r+0x164>
 80049f8:	89ab      	ldrh	r3, [r5, #12]
 80049fa:	065b      	lsls	r3, r3, #25
 80049fc:	f53f af39 	bmi.w	8004872 <_svfiprintf_r+0x2a>
 8004a00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a02:	b01d      	add	sp, #116	; 0x74
 8004a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a08:	ab03      	add	r3, sp, #12
 8004a0a:	9300      	str	r3, [sp, #0]
 8004a0c:	462a      	mov	r2, r5
 8004a0e:	4b07      	ldr	r3, [pc, #28]	; (8004a2c <_svfiprintf_r+0x1e4>)
 8004a10:	a904      	add	r1, sp, #16
 8004a12:	4640      	mov	r0, r8
 8004a14:	f7fe fb46 	bl	80030a4 <_printf_i>
 8004a18:	e7ea      	b.n	80049f0 <_svfiprintf_r+0x1a8>
 8004a1a:	bf00      	nop
 8004a1c:	08004e9c 	.word	0x08004e9c
 8004a20:	08004ea2 	.word	0x08004ea2
 8004a24:	08004ea6 	.word	0x08004ea6
 8004a28:	08002b45 	.word	0x08002b45
 8004a2c:	08004791 	.word	0x08004791

08004a30 <_sbrk_r>:
 8004a30:	b538      	push	{r3, r4, r5, lr}
 8004a32:	2300      	movs	r3, #0
 8004a34:	4c05      	ldr	r4, [pc, #20]	; (8004a4c <_sbrk_r+0x1c>)
 8004a36:	4605      	mov	r5, r0
 8004a38:	4608      	mov	r0, r1
 8004a3a:	6023      	str	r3, [r4, #0]
 8004a3c:	f7fd ff58 	bl	80028f0 <_sbrk>
 8004a40:	1c43      	adds	r3, r0, #1
 8004a42:	d102      	bne.n	8004a4a <_sbrk_r+0x1a>
 8004a44:	6823      	ldr	r3, [r4, #0]
 8004a46:	b103      	cbz	r3, 8004a4a <_sbrk_r+0x1a>
 8004a48:	602b      	str	r3, [r5, #0]
 8004a4a:	bd38      	pop	{r3, r4, r5, pc}
 8004a4c:	200002a4 	.word	0x200002a4

08004a50 <__ascii_mbtowc>:
 8004a50:	b082      	sub	sp, #8
 8004a52:	b901      	cbnz	r1, 8004a56 <__ascii_mbtowc+0x6>
 8004a54:	a901      	add	r1, sp, #4
 8004a56:	b142      	cbz	r2, 8004a6a <__ascii_mbtowc+0x1a>
 8004a58:	b14b      	cbz	r3, 8004a6e <__ascii_mbtowc+0x1e>
 8004a5a:	7813      	ldrb	r3, [r2, #0]
 8004a5c:	600b      	str	r3, [r1, #0]
 8004a5e:	7812      	ldrb	r2, [r2, #0]
 8004a60:	1c10      	adds	r0, r2, #0
 8004a62:	bf18      	it	ne
 8004a64:	2001      	movne	r0, #1
 8004a66:	b002      	add	sp, #8
 8004a68:	4770      	bx	lr
 8004a6a:	4610      	mov	r0, r2
 8004a6c:	e7fb      	b.n	8004a66 <__ascii_mbtowc+0x16>
 8004a6e:	f06f 0001 	mvn.w	r0, #1
 8004a72:	e7f8      	b.n	8004a66 <__ascii_mbtowc+0x16>

08004a74 <memmove>:
 8004a74:	4288      	cmp	r0, r1
 8004a76:	b510      	push	{r4, lr}
 8004a78:	eb01 0302 	add.w	r3, r1, r2
 8004a7c:	d803      	bhi.n	8004a86 <memmove+0x12>
 8004a7e:	1e42      	subs	r2, r0, #1
 8004a80:	4299      	cmp	r1, r3
 8004a82:	d10c      	bne.n	8004a9e <memmove+0x2a>
 8004a84:	bd10      	pop	{r4, pc}
 8004a86:	4298      	cmp	r0, r3
 8004a88:	d2f9      	bcs.n	8004a7e <memmove+0xa>
 8004a8a:	1881      	adds	r1, r0, r2
 8004a8c:	1ad2      	subs	r2, r2, r3
 8004a8e:	42d3      	cmn	r3, r2
 8004a90:	d100      	bne.n	8004a94 <memmove+0x20>
 8004a92:	bd10      	pop	{r4, pc}
 8004a94:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a98:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004a9c:	e7f7      	b.n	8004a8e <memmove+0x1a>
 8004a9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004aa2:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004aa6:	e7eb      	b.n	8004a80 <memmove+0xc>

08004aa8 <__malloc_lock>:
 8004aa8:	4770      	bx	lr

08004aaa <__malloc_unlock>:
 8004aaa:	4770      	bx	lr

08004aac <_realloc_r>:
 8004aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aae:	4607      	mov	r7, r0
 8004ab0:	4614      	mov	r4, r2
 8004ab2:	460e      	mov	r6, r1
 8004ab4:	b921      	cbnz	r1, 8004ac0 <_realloc_r+0x14>
 8004ab6:	4611      	mov	r1, r2
 8004ab8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004abc:	f7ff be0a 	b.w	80046d4 <_malloc_r>
 8004ac0:	b922      	cbnz	r2, 8004acc <_realloc_r+0x20>
 8004ac2:	f7ff fdbb 	bl	800463c <_free_r>
 8004ac6:	4625      	mov	r5, r4
 8004ac8:	4628      	mov	r0, r5
 8004aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004acc:	f000 f821 	bl	8004b12 <_malloc_usable_size_r>
 8004ad0:	4284      	cmp	r4, r0
 8004ad2:	d90f      	bls.n	8004af4 <_realloc_r+0x48>
 8004ad4:	4621      	mov	r1, r4
 8004ad6:	4638      	mov	r0, r7
 8004ad8:	f7ff fdfc 	bl	80046d4 <_malloc_r>
 8004adc:	4605      	mov	r5, r0
 8004ade:	2800      	cmp	r0, #0
 8004ae0:	d0f2      	beq.n	8004ac8 <_realloc_r+0x1c>
 8004ae2:	4631      	mov	r1, r6
 8004ae4:	4622      	mov	r2, r4
 8004ae6:	f7ff fabf 	bl	8004068 <memcpy>
 8004aea:	4631      	mov	r1, r6
 8004aec:	4638      	mov	r0, r7
 8004aee:	f7ff fda5 	bl	800463c <_free_r>
 8004af2:	e7e9      	b.n	8004ac8 <_realloc_r+0x1c>
 8004af4:	4635      	mov	r5, r6
 8004af6:	e7e7      	b.n	8004ac8 <_realloc_r+0x1c>

08004af8 <__ascii_wctomb>:
 8004af8:	b149      	cbz	r1, 8004b0e <__ascii_wctomb+0x16>
 8004afa:	2aff      	cmp	r2, #255	; 0xff
 8004afc:	bf8b      	itete	hi
 8004afe:	238a      	movhi	r3, #138	; 0x8a
 8004b00:	700a      	strbls	r2, [r1, #0]
 8004b02:	6003      	strhi	r3, [r0, #0]
 8004b04:	2001      	movls	r0, #1
 8004b06:	bf88      	it	hi
 8004b08:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8004b0c:	4770      	bx	lr
 8004b0e:	4608      	mov	r0, r1
 8004b10:	4770      	bx	lr

08004b12 <_malloc_usable_size_r>:
 8004b12:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8004b16:	2800      	cmp	r0, #0
 8004b18:	f1a0 0004 	sub.w	r0, r0, #4
 8004b1c:	bfbc      	itt	lt
 8004b1e:	580b      	ldrlt	r3, [r1, r0]
 8004b20:	18c0      	addlt	r0, r0, r3
 8004b22:	4770      	bx	lr

08004b24 <_init>:
 8004b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b26:	bf00      	nop
 8004b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b2a:	bc08      	pop	{r3}
 8004b2c:	469e      	mov	lr, r3
 8004b2e:	4770      	bx	lr

08004b30 <_fini>:
 8004b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b32:	bf00      	nop
 8004b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b36:	bc08      	pop	{r3}
 8004b38:	469e      	mov	lr, r3
 8004b3a:	4770      	bx	lr
