
Display_TFT_ILI9341.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032e0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005b18  080033ec  080033ec  000133ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008f04  08008f04  00018f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08008f08  08008f08  00018f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000008c  20000000  08008f0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000108  2000008c  08008f98  0002008c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000194  08008f98  00020194  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00011f8c  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002678  00000000  00000000  00032041  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008919  00000000  00000000  000346b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b70  00000000  00000000  0003cfd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ed8  00000000  00000000  0003db48  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00005cc2  00000000  00000000  0003ea20  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004173  00000000  00000000  000446e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00048855  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000267c  00000000  00000000  000488d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000008c 	.word	0x2000008c
 8000128:	00000000 	.word	0x00000000
 800012c:	080033d4 	.word	0x080033d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000090 	.word	0x20000090
 8000148:	080033d4 	.word	0x080033d4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800015c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800015e:	4b0e      	ldr	r3, [pc, #56]	; (8000198 <HAL_InitTick+0x3c>)
{
 8000160:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000162:	7818      	ldrb	r0, [r3, #0]
 8000164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000168:	fbb3 f3f0 	udiv	r3, r3, r0
 800016c:	4a0b      	ldr	r2, [pc, #44]	; (800019c <HAL_InitTick+0x40>)
 800016e:	6810      	ldr	r0, [r2, #0]
 8000170:	fbb0 f0f3 	udiv	r0, r0, r3
 8000174:	f000 f892 	bl	800029c <HAL_SYSTICK_Config>
 8000178:	4604      	mov	r4, r0
 800017a:	b958      	cbnz	r0, 8000194 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800017c:	2d0f      	cmp	r5, #15
 800017e:	d809      	bhi.n	8000194 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000180:	4602      	mov	r2, r0
 8000182:	4629      	mov	r1, r5
 8000184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000188:	f000 f854 	bl	8000234 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <HAL_InitTick+0x44>)
 800018e:	4620      	mov	r0, r4
 8000190:	601d      	str	r5, [r3, #0]
 8000192:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000194:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000196:	bd38      	pop	{r3, r4, r5, pc}
 8000198:	20000000 	.word	0x20000000
 800019c:	20000024 	.word	0x20000024
 80001a0:	20000004 	.word	0x20000004

080001a4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a4:	4a07      	ldr	r2, [pc, #28]	; (80001c4 <HAL_Init+0x20>)
{
 80001a6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001aa:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001ac:	f043 0310 	orr.w	r3, r3, #16
 80001b0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001b2:	f000 f82d 	bl	8000210 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001b6:	2000      	movs	r0, #0
 80001b8:	f7ff ffd0 	bl	800015c <HAL_InitTick>
  HAL_MspInit();
 80001bc:	f002 facc 	bl	8002758 <HAL_MspInit>
}
 80001c0:	2000      	movs	r0, #0
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	40022000 	.word	0x40022000

080001c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001c8:	4a03      	ldr	r2, [pc, #12]	; (80001d8 <HAL_IncTick+0x10>)
 80001ca:	4b04      	ldr	r3, [pc, #16]	; (80001dc <HAL_IncTick+0x14>)
 80001cc:	6811      	ldr	r1, [r2, #0]
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	440b      	add	r3, r1
 80001d2:	6013      	str	r3, [r2, #0]
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	200000b4 	.word	0x200000b4
 80001dc:	20000000 	.word	0x20000000

080001e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001e0:	4b01      	ldr	r3, [pc, #4]	; (80001e8 <HAL_GetTick+0x8>)
 80001e2:	6818      	ldr	r0, [r3, #0]
}
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	200000b4 	.word	0x200000b4

080001ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001ec:	b538      	push	{r3, r4, r5, lr}
 80001ee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001f0:	f7ff fff6 	bl	80001e0 <HAL_GetTick>
 80001f4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001f6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001f8:	bf1e      	ittt	ne
 80001fa:	4b04      	ldrne	r3, [pc, #16]	; (800020c <HAL_Delay+0x20>)
 80001fc:	781b      	ldrbne	r3, [r3, #0]
 80001fe:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000200:	f7ff ffee 	bl	80001e0 <HAL_GetTick>
 8000204:	1b40      	subs	r0, r0, r5
 8000206:	4284      	cmp	r4, r0
 8000208:	d8fa      	bhi.n	8000200 <HAL_Delay+0x14>
  {
  }
}
 800020a:	bd38      	pop	{r3, r4, r5, pc}
 800020c:	20000000 	.word	0x20000000

08000210 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000210:	4a07      	ldr	r2, [pc, #28]	; (8000230 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000212:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000214:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000216:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800021a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800021e:	041b      	lsls	r3, r3, #16
 8000220:	0c1b      	lsrs	r3, r3, #16
 8000222:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800022a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800022c:	60d3      	str	r3, [r2, #12]
 800022e:	4770      	bx	lr
 8000230:	e000ed00 	.word	0xe000ed00

08000234 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000234:	4b17      	ldr	r3, [pc, #92]	; (8000294 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000236:	b530      	push	{r4, r5, lr}
 8000238:	68dc      	ldr	r4, [r3, #12]
 800023a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800023e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000242:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000244:	2b04      	cmp	r3, #4
 8000246:	bf28      	it	cs
 8000248:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800024c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000250:	bf98      	it	ls
 8000252:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000254:	fa05 f303 	lsl.w	r3, r5, r3
 8000258:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800025c:	bf88      	it	hi
 800025e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000260:	4019      	ands	r1, r3
 8000262:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000264:	fa05 f404 	lsl.w	r4, r5, r4
 8000268:	3c01      	subs	r4, #1
 800026a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800026c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800026e:	ea42 0201 	orr.w	r2, r2, r1
 8000272:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000276:	bfa9      	itett	ge
 8000278:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	4b06      	ldrlt	r3, [pc, #24]	; (8000298 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027e:	b2d2      	uxtbge	r2, r2
 8000280:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000284:	bfbb      	ittet	lt
 8000286:	f000 000f 	andlt.w	r0, r0, #15
 800028a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000290:	541a      	strblt	r2, [r3, r0]
 8000292:	bd30      	pop	{r4, r5, pc}
 8000294:	e000ed00 	.word	0xe000ed00
 8000298:	e000ed14 	.word	0xe000ed14

0800029c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800029c:	3801      	subs	r0, #1
 800029e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002a2:	d20a      	bcs.n	80002ba <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a4:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002a6:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a8:	4a06      	ldr	r2, [pc, #24]	; (80002c4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002aa:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ac:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002b0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002b2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002b4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002ba:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	e000e010 	.word	0xe000e010
 80002c4:	e000ed00 	.word	0xe000ed00

080002c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80002cc:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80002ce:	4626      	mov	r6, r4
 80002d0:	4b66      	ldr	r3, [pc, #408]	; (800046c <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002d2:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 800047c <HAL_GPIO_Init+0x1b4>
 80002d6:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8000480 <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80002da:	680a      	ldr	r2, [r1, #0]
 80002dc:	fa32 f506 	lsrs.w	r5, r2, r6
 80002e0:	d102      	bne.n	80002e8 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 80002e2:	b003      	add	sp, #12
 80002e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80002e8:	f04f 0801 	mov.w	r8, #1
 80002ec:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002f0:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 80002f4:	4590      	cmp	r8, r2
 80002f6:	d17f      	bne.n	80003f8 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 80002f8:	684d      	ldr	r5, [r1, #4]
 80002fa:	2d12      	cmp	r5, #18
 80002fc:	f000 80aa 	beq.w	8000454 <HAL_GPIO_Init+0x18c>
 8000300:	f200 8083 	bhi.w	800040a <HAL_GPIO_Init+0x142>
 8000304:	2d02      	cmp	r5, #2
 8000306:	f000 80a2 	beq.w	800044e <HAL_GPIO_Init+0x186>
 800030a:	d877      	bhi.n	80003fc <HAL_GPIO_Init+0x134>
 800030c:	2d00      	cmp	r5, #0
 800030e:	f000 8089 	beq.w	8000424 <HAL_GPIO_Init+0x15c>
 8000312:	2d01      	cmp	r5, #1
 8000314:	f000 8099 	beq.w	800044a <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000318:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800031c:	2aff      	cmp	r2, #255	; 0xff
 800031e:	bf93      	iteet	ls
 8000320:	4682      	movls	sl, r0
 8000322:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000326:	3d08      	subhi	r5, #8
 8000328:	f8d0 b000 	ldrls.w	fp, [r0]
 800032c:	bf92      	itee	ls
 800032e:	00b5      	lslls	r5, r6, #2
 8000330:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000334:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000336:	fa09 f805 	lsl.w	r8, r9, r5
 800033a:	ea2b 0808 	bic.w	r8, fp, r8
 800033e:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000342:	bf88      	it	hi
 8000344:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000348:	ea48 0505 	orr.w	r5, r8, r5
 800034c:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000350:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000354:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000358:	d04e      	beq.n	80003f8 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800035a:	4d45      	ldr	r5, [pc, #276]	; (8000470 <HAL_GPIO_Init+0x1a8>)
 800035c:	4f44      	ldr	r7, [pc, #272]	; (8000470 <HAL_GPIO_Init+0x1a8>)
 800035e:	69ad      	ldr	r5, [r5, #24]
 8000360:	f026 0803 	bic.w	r8, r6, #3
 8000364:	f045 0501 	orr.w	r5, r5, #1
 8000368:	61bd      	str	r5, [r7, #24]
 800036a:	69bd      	ldr	r5, [r7, #24]
 800036c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000370:	f005 0501 	and.w	r5, r5, #1
 8000374:	9501      	str	r5, [sp, #4]
 8000376:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800037a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800037e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000380:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000384:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000388:	fa09 f90b 	lsl.w	r9, r9, fp
 800038c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000390:	4d38      	ldr	r5, [pc, #224]	; (8000474 <HAL_GPIO_Init+0x1ac>)
 8000392:	42a8      	cmp	r0, r5
 8000394:	d063      	beq.n	800045e <HAL_GPIO_Init+0x196>
 8000396:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800039a:	42a8      	cmp	r0, r5
 800039c:	d061      	beq.n	8000462 <HAL_GPIO_Init+0x19a>
 800039e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003a2:	42a8      	cmp	r0, r5
 80003a4:	d05f      	beq.n	8000466 <HAL_GPIO_Init+0x19e>
 80003a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003aa:	42a8      	cmp	r0, r5
 80003ac:	bf0c      	ite	eq
 80003ae:	2503      	moveq	r5, #3
 80003b0:	2504      	movne	r5, #4
 80003b2:	fa05 f50b 	lsl.w	r5, r5, fp
 80003b6:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80003ba:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80003be:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003c0:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80003c4:	bf14      	ite	ne
 80003c6:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003c8:	4395      	biceq	r5, r2
 80003ca:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80003cc:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003ce:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003d2:	bf14      	ite	ne
 80003d4:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003d6:	4395      	biceq	r5, r2
 80003d8:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80003da:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003dc:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003e0:	bf14      	ite	ne
 80003e2:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003e4:	4395      	biceq	r5, r2
 80003e6:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80003e8:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003ea:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80003ee:	bf14      	ite	ne
 80003f0:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003f2:	ea25 0202 	biceq.w	r2, r5, r2
 80003f6:	60da      	str	r2, [r3, #12]
	position++;
 80003f8:	3601      	adds	r6, #1
 80003fa:	e76e      	b.n	80002da <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 80003fc:	2d03      	cmp	r5, #3
 80003fe:	d022      	beq.n	8000446 <HAL_GPIO_Init+0x17e>
 8000400:	2d11      	cmp	r5, #17
 8000402:	d189      	bne.n	8000318 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000404:	68cc      	ldr	r4, [r1, #12]
 8000406:	3404      	adds	r4, #4
          break;
 8000408:	e786      	b.n	8000318 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 800040a:	4f1b      	ldr	r7, [pc, #108]	; (8000478 <HAL_GPIO_Init+0x1b0>)
 800040c:	42bd      	cmp	r5, r7
 800040e:	d009      	beq.n	8000424 <HAL_GPIO_Init+0x15c>
 8000410:	d812      	bhi.n	8000438 <HAL_GPIO_Init+0x170>
 8000412:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8000484 <HAL_GPIO_Init+0x1bc>
 8000416:	454d      	cmp	r5, r9
 8000418:	d004      	beq.n	8000424 <HAL_GPIO_Init+0x15c>
 800041a:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800041e:	454d      	cmp	r5, r9
 8000420:	f47f af7a 	bne.w	8000318 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000424:	688c      	ldr	r4, [r1, #8]
 8000426:	b1c4      	cbz	r4, 800045a <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000428:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 800042a:	bf0c      	ite	eq
 800042c:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000430:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000434:	2408      	movs	r4, #8
 8000436:	e76f      	b.n	8000318 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000438:	4575      	cmp	r5, lr
 800043a:	d0f3      	beq.n	8000424 <HAL_GPIO_Init+0x15c>
 800043c:	4565      	cmp	r5, ip
 800043e:	d0f1      	beq.n	8000424 <HAL_GPIO_Init+0x15c>
 8000440:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000488 <HAL_GPIO_Init+0x1c0>
 8000444:	e7eb      	b.n	800041e <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000446:	2400      	movs	r4, #0
 8000448:	e766      	b.n	8000318 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800044a:	68cc      	ldr	r4, [r1, #12]
          break;
 800044c:	e764      	b.n	8000318 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800044e:	68cc      	ldr	r4, [r1, #12]
 8000450:	3408      	adds	r4, #8
          break;
 8000452:	e761      	b.n	8000318 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000454:	68cc      	ldr	r4, [r1, #12]
 8000456:	340c      	adds	r4, #12
          break;
 8000458:	e75e      	b.n	8000318 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800045a:	2404      	movs	r4, #4
 800045c:	e75c      	b.n	8000318 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800045e:	2500      	movs	r5, #0
 8000460:	e7a7      	b.n	80003b2 <HAL_GPIO_Init+0xea>
 8000462:	2501      	movs	r5, #1
 8000464:	e7a5      	b.n	80003b2 <HAL_GPIO_Init+0xea>
 8000466:	2502      	movs	r5, #2
 8000468:	e7a3      	b.n	80003b2 <HAL_GPIO_Init+0xea>
 800046a:	bf00      	nop
 800046c:	40010400 	.word	0x40010400
 8000470:	40021000 	.word	0x40021000
 8000474:	40010800 	.word	0x40010800
 8000478:	10210000 	.word	0x10210000
 800047c:	10310000 	.word	0x10310000
 8000480:	10320000 	.word	0x10320000
 8000484:	10110000 	.word	0x10110000
 8000488:	10220000 	.word	0x10220000

0800048c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800048c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8000490:	f04f 0a04 	mov.w	sl, #4
  uint32_t position = 0x00u;
 8000494:	2300      	movs	r3, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000496:	f04f 0901 	mov.w	r9, #1
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800049a:	f04f 0c0f 	mov.w	ip, #15
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800049e:	4a30      	ldr	r2, [pc, #192]	; (8000560 <HAL_GPIO_DeInit+0xd4>)
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80004a0:	eb00 0b0a 	add.w	fp, r0, sl
  while ((GPIO_Pin >> position) != 0u)
 80004a4:	fa31 f403 	lsrs.w	r4, r1, r3
 80004a8:	d101      	bne.n	80004ae <HAL_GPIO_DeInit+0x22>
      CLEAR_BIT(GPIOx->ODR, iocurrent);
    }

    position++;
  }
}
 80004aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 80004ae:	fa09 f603 	lsl.w	r6, r9, r3
    if (iocurrent)
 80004b2:	400e      	ands	r6, r1
 80004b4:	d04c      	beq.n	8000550 <HAL_GPIO_DeInit+0xc4>
 80004b6:	f023 0403 	bic.w	r4, r3, #3
 80004ba:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80004be:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80004c2:	f003 0703 	and.w	r7, r3, #3
      tmp = AFIO->EXTICR[position >> 2u];
 80004c6:	68a5      	ldr	r5, [r4, #8]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80004c8:	00bf      	lsls	r7, r7, #2
 80004ca:	fa0c f807 	lsl.w	r8, ip, r7
 80004ce:	ea05 0e08 	and.w	lr, r5, r8
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80004d2:	4d24      	ldr	r5, [pc, #144]	; (8000564 <HAL_GPIO_DeInit+0xd8>)
 80004d4:	42a8      	cmp	r0, r5
 80004d6:	d03d      	beq.n	8000554 <HAL_GPIO_DeInit+0xc8>
 80004d8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80004dc:	42a8      	cmp	r0, r5
 80004de:	d03b      	beq.n	8000558 <HAL_GPIO_DeInit+0xcc>
 80004e0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80004e4:	42a8      	cmp	r0, r5
 80004e6:	d039      	beq.n	800055c <HAL_GPIO_DeInit+0xd0>
 80004e8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80004ec:	42a8      	cmp	r0, r5
 80004ee:	bf0c      	ite	eq
 80004f0:	2503      	moveq	r5, #3
 80004f2:	2504      	movne	r5, #4
 80004f4:	40bd      	lsls	r5, r7
 80004f6:	45ae      	cmp	lr, r5
 80004f8:	ea6f 0506 	mvn.w	r5, r6
 80004fc:	d10f      	bne.n	800051e <HAL_GPIO_DeInit+0x92>
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80004fe:	68a7      	ldr	r7, [r4, #8]
 8000500:	ea27 0708 	bic.w	r7, r7, r8
 8000504:	60a7      	str	r7, [r4, #8]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8000506:	6814      	ldr	r4, [r2, #0]
 8000508:	402c      	ands	r4, r5
 800050a:	6014      	str	r4, [r2, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800050c:	6854      	ldr	r4, [r2, #4]
 800050e:	402c      	ands	r4, r5
 8000510:	6054      	str	r4, [r2, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8000512:	6894      	ldr	r4, [r2, #8]
 8000514:	402c      	ands	r4, r5
 8000516:	6094      	str	r4, [r2, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8000518:	68d4      	ldr	r4, [r2, #12]
 800051a:	402c      	ands	r4, r5
 800051c:	60d4      	str	r4, [r2, #12]
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800051e:	2eff      	cmp	r6, #255	; 0xff
 8000520:	bf91      	iteee	ls
 8000522:	4607      	movls	r7, r0
 8000524:	465f      	movhi	r7, fp
 8000526:	f103 4480 	addhi.w	r4, r3, #1073741824	; 0x40000000
 800052a:	3c08      	subhi	r4, #8
 800052c:	bf95      	itete	ls
 800052e:	f8d0 e000 	ldrls.w	lr, [r0]
 8000532:	f8d0 e004 	ldrhi.w	lr, [r0, #4]
 8000536:	009c      	lslls	r4, r3, #2
 8000538:	00a4      	lslhi	r4, r4, #2
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800053a:	fa0c f604 	lsl.w	r6, ip, r4
 800053e:	ea2e 0606 	bic.w	r6, lr, r6
 8000542:	fa0a f404 	lsl.w	r4, sl, r4
 8000546:	4326      	orrs	r6, r4
 8000548:	603e      	str	r6, [r7, #0]
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800054a:	68c4      	ldr	r4, [r0, #12]
 800054c:	4025      	ands	r5, r4
 800054e:	60c5      	str	r5, [r0, #12]
    position++;
 8000550:	3301      	adds	r3, #1
 8000552:	e7a7      	b.n	80004a4 <HAL_GPIO_DeInit+0x18>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000554:	2500      	movs	r5, #0
 8000556:	e7cd      	b.n	80004f4 <HAL_GPIO_DeInit+0x68>
 8000558:	2501      	movs	r5, #1
 800055a:	e7cb      	b.n	80004f4 <HAL_GPIO_DeInit+0x68>
 800055c:	2502      	movs	r5, #2
 800055e:	e7c9      	b.n	80004f4 <HAL_GPIO_DeInit+0x68>
 8000560:	40010400 	.word	0x40010400
 8000564:	40010800 	.word	0x40010800

08000568 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000568:	6883      	ldr	r3, [r0, #8]
 800056a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800056c:	bf14      	ite	ne
 800056e:	2001      	movne	r0, #1
 8000570:	2000      	moveq	r0, #0
 8000572:	4770      	bx	lr

08000574 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000574:	b10a      	cbz	r2, 800057a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000576:	6101      	str	r1, [r0, #16]
 8000578:	4770      	bx	lr
 800057a:	0409      	lsls	r1, r1, #16
 800057c:	e7fb      	b.n	8000576 <HAL_GPIO_WritePin+0x2>
	...

08000580 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000580:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000584:	4605      	mov	r5, r0
 8000586:	b908      	cbnz	r0, 800058c <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000588:	2001      	movs	r0, #1
 800058a:	e03c      	b.n	8000606 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800058c:	6803      	ldr	r3, [r0, #0]
 800058e:	07db      	lsls	r3, r3, #31
 8000590:	d410      	bmi.n	80005b4 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000592:	682b      	ldr	r3, [r5, #0]
 8000594:	079f      	lsls	r7, r3, #30
 8000596:	d45d      	bmi.n	8000654 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000598:	682b      	ldr	r3, [r5, #0]
 800059a:	0719      	lsls	r1, r3, #28
 800059c:	f100 8094 	bmi.w	80006c8 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80005a0:	682b      	ldr	r3, [r5, #0]
 80005a2:	075a      	lsls	r2, r3, #29
 80005a4:	f100 80be 	bmi.w	8000724 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80005a8:	69e8      	ldr	r0, [r5, #28]
 80005aa:	2800      	cmp	r0, #0
 80005ac:	f040 812c 	bne.w	8000808 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 80005b0:	2000      	movs	r0, #0
 80005b2:	e028      	b.n	8000606 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80005b4:	4c8f      	ldr	r4, [pc, #572]	; (80007f4 <HAL_RCC_OscConfig+0x274>)
 80005b6:	6863      	ldr	r3, [r4, #4]
 80005b8:	f003 030c 	and.w	r3, r3, #12
 80005bc:	2b04      	cmp	r3, #4
 80005be:	d007      	beq.n	80005d0 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80005c0:	6863      	ldr	r3, [r4, #4]
 80005c2:	f003 030c 	and.w	r3, r3, #12
 80005c6:	2b08      	cmp	r3, #8
 80005c8:	d109      	bne.n	80005de <HAL_RCC_OscConfig+0x5e>
 80005ca:	6863      	ldr	r3, [r4, #4]
 80005cc:	03de      	lsls	r6, r3, #15
 80005ce:	d506      	bpl.n	80005de <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80005d0:	6823      	ldr	r3, [r4, #0]
 80005d2:	039c      	lsls	r4, r3, #14
 80005d4:	d5dd      	bpl.n	8000592 <HAL_RCC_OscConfig+0x12>
 80005d6:	686b      	ldr	r3, [r5, #4]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d1da      	bne.n	8000592 <HAL_RCC_OscConfig+0x12>
 80005dc:	e7d4      	b.n	8000588 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005de:	686b      	ldr	r3, [r5, #4]
 80005e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005e4:	d112      	bne.n	800060c <HAL_RCC_OscConfig+0x8c>
 80005e6:	6823      	ldr	r3, [r4, #0]
 80005e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005ec:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80005ee:	f7ff fdf7 	bl	80001e0 <HAL_GetTick>
 80005f2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005f4:	6823      	ldr	r3, [r4, #0]
 80005f6:	0398      	lsls	r0, r3, #14
 80005f8:	d4cb      	bmi.n	8000592 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80005fa:	f7ff fdf1 	bl	80001e0 <HAL_GetTick>
 80005fe:	1b80      	subs	r0, r0, r6
 8000600:	2864      	cmp	r0, #100	; 0x64
 8000602:	d9f7      	bls.n	80005f4 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000604:	2003      	movs	r0, #3
}
 8000606:	b002      	add	sp, #8
 8000608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800060c:	b99b      	cbnz	r3, 8000636 <HAL_RCC_OscConfig+0xb6>
 800060e:	6823      	ldr	r3, [r4, #0]
 8000610:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000614:	6023      	str	r3, [r4, #0]
 8000616:	6823      	ldr	r3, [r4, #0]
 8000618:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800061c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800061e:	f7ff fddf 	bl	80001e0 <HAL_GetTick>
 8000622:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000624:	6823      	ldr	r3, [r4, #0]
 8000626:	0399      	lsls	r1, r3, #14
 8000628:	d5b3      	bpl.n	8000592 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800062a:	f7ff fdd9 	bl	80001e0 <HAL_GetTick>
 800062e:	1b80      	subs	r0, r0, r6
 8000630:	2864      	cmp	r0, #100	; 0x64
 8000632:	d9f7      	bls.n	8000624 <HAL_RCC_OscConfig+0xa4>
 8000634:	e7e6      	b.n	8000604 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000636:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800063a:	6823      	ldr	r3, [r4, #0]
 800063c:	d103      	bne.n	8000646 <HAL_RCC_OscConfig+0xc6>
 800063e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000642:	6023      	str	r3, [r4, #0]
 8000644:	e7cf      	b.n	80005e6 <HAL_RCC_OscConfig+0x66>
 8000646:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800064a:	6023      	str	r3, [r4, #0]
 800064c:	6823      	ldr	r3, [r4, #0]
 800064e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000652:	e7cb      	b.n	80005ec <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000654:	4c67      	ldr	r4, [pc, #412]	; (80007f4 <HAL_RCC_OscConfig+0x274>)
 8000656:	6863      	ldr	r3, [r4, #4]
 8000658:	f013 0f0c 	tst.w	r3, #12
 800065c:	d007      	beq.n	800066e <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800065e:	6863      	ldr	r3, [r4, #4]
 8000660:	f003 030c 	and.w	r3, r3, #12
 8000664:	2b08      	cmp	r3, #8
 8000666:	d110      	bne.n	800068a <HAL_RCC_OscConfig+0x10a>
 8000668:	6863      	ldr	r3, [r4, #4]
 800066a:	03da      	lsls	r2, r3, #15
 800066c:	d40d      	bmi.n	800068a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800066e:	6823      	ldr	r3, [r4, #0]
 8000670:	079b      	lsls	r3, r3, #30
 8000672:	d502      	bpl.n	800067a <HAL_RCC_OscConfig+0xfa>
 8000674:	692b      	ldr	r3, [r5, #16]
 8000676:	2b01      	cmp	r3, #1
 8000678:	d186      	bne.n	8000588 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800067a:	6823      	ldr	r3, [r4, #0]
 800067c:	696a      	ldr	r2, [r5, #20]
 800067e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000682:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000686:	6023      	str	r3, [r4, #0]
 8000688:	e786      	b.n	8000598 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800068a:	692a      	ldr	r2, [r5, #16]
 800068c:	4b5a      	ldr	r3, [pc, #360]	; (80007f8 <HAL_RCC_OscConfig+0x278>)
 800068e:	b16a      	cbz	r2, 80006ac <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8000690:	2201      	movs	r2, #1
 8000692:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000694:	f7ff fda4 	bl	80001e0 <HAL_GetTick>
 8000698:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800069a:	6823      	ldr	r3, [r4, #0]
 800069c:	079f      	lsls	r7, r3, #30
 800069e:	d4ec      	bmi.n	800067a <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80006a0:	f7ff fd9e 	bl	80001e0 <HAL_GetTick>
 80006a4:	1b80      	subs	r0, r0, r6
 80006a6:	2802      	cmp	r0, #2
 80006a8:	d9f7      	bls.n	800069a <HAL_RCC_OscConfig+0x11a>
 80006aa:	e7ab      	b.n	8000604 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80006ac:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80006ae:	f7ff fd97 	bl	80001e0 <HAL_GetTick>
 80006b2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006b4:	6823      	ldr	r3, [r4, #0]
 80006b6:	0798      	lsls	r0, r3, #30
 80006b8:	f57f af6e 	bpl.w	8000598 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80006bc:	f7ff fd90 	bl	80001e0 <HAL_GetTick>
 80006c0:	1b80      	subs	r0, r0, r6
 80006c2:	2802      	cmp	r0, #2
 80006c4:	d9f6      	bls.n	80006b4 <HAL_RCC_OscConfig+0x134>
 80006c6:	e79d      	b.n	8000604 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80006c8:	69aa      	ldr	r2, [r5, #24]
 80006ca:	4c4a      	ldr	r4, [pc, #296]	; (80007f4 <HAL_RCC_OscConfig+0x274>)
 80006cc:	4b4b      	ldr	r3, [pc, #300]	; (80007fc <HAL_RCC_OscConfig+0x27c>)
 80006ce:	b1da      	cbz	r2, 8000708 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80006d0:	2201      	movs	r2, #1
 80006d2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80006d4:	f7ff fd84 	bl	80001e0 <HAL_GetTick>
 80006d8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80006dc:	079b      	lsls	r3, r3, #30
 80006de:	d50d      	bpl.n	80006fc <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80006e0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80006e4:	4b46      	ldr	r3, [pc, #280]	; (8000800 <HAL_RCC_OscConfig+0x280>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80006ec:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80006ee:	bf00      	nop
  }
  while (Delay --);
 80006f0:	9b01      	ldr	r3, [sp, #4]
 80006f2:	1e5a      	subs	r2, r3, #1
 80006f4:	9201      	str	r2, [sp, #4]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d1f9      	bne.n	80006ee <HAL_RCC_OscConfig+0x16e>
 80006fa:	e751      	b.n	80005a0 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80006fc:	f7ff fd70 	bl	80001e0 <HAL_GetTick>
 8000700:	1b80      	subs	r0, r0, r6
 8000702:	2802      	cmp	r0, #2
 8000704:	d9e9      	bls.n	80006da <HAL_RCC_OscConfig+0x15a>
 8000706:	e77d      	b.n	8000604 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000708:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800070a:	f7ff fd69 	bl	80001e0 <HAL_GetTick>
 800070e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000710:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000712:	079f      	lsls	r7, r3, #30
 8000714:	f57f af44 	bpl.w	80005a0 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000718:	f7ff fd62 	bl	80001e0 <HAL_GetTick>
 800071c:	1b80      	subs	r0, r0, r6
 800071e:	2802      	cmp	r0, #2
 8000720:	d9f6      	bls.n	8000710 <HAL_RCC_OscConfig+0x190>
 8000722:	e76f      	b.n	8000604 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000724:	4c33      	ldr	r4, [pc, #204]	; (80007f4 <HAL_RCC_OscConfig+0x274>)
 8000726:	69e3      	ldr	r3, [r4, #28]
 8000728:	00d8      	lsls	r0, r3, #3
 800072a:	d424      	bmi.n	8000776 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 800072c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800072e:	69e3      	ldr	r3, [r4, #28]
 8000730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000734:	61e3      	str	r3, [r4, #28]
 8000736:	69e3      	ldr	r3, [r4, #28]
 8000738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073c:	9300      	str	r3, [sp, #0]
 800073e:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000740:	4e30      	ldr	r6, [pc, #192]	; (8000804 <HAL_RCC_OscConfig+0x284>)
 8000742:	6833      	ldr	r3, [r6, #0]
 8000744:	05d9      	lsls	r1, r3, #23
 8000746:	d518      	bpl.n	800077a <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000748:	68eb      	ldr	r3, [r5, #12]
 800074a:	2b01      	cmp	r3, #1
 800074c:	d126      	bne.n	800079c <HAL_RCC_OscConfig+0x21c>
 800074e:	6a23      	ldr	r3, [r4, #32]
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000756:	f7ff fd43 	bl	80001e0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800075a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800075e:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000760:	6a23      	ldr	r3, [r4, #32]
 8000762:	079b      	lsls	r3, r3, #30
 8000764:	d53f      	bpl.n	80007e6 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8000766:	2f00      	cmp	r7, #0
 8000768:	f43f af1e 	beq.w	80005a8 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 800076c:	69e3      	ldr	r3, [r4, #28]
 800076e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000772:	61e3      	str	r3, [r4, #28]
 8000774:	e718      	b.n	80005a8 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000776:	2700      	movs	r7, #0
 8000778:	e7e2      	b.n	8000740 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800077a:	6833      	ldr	r3, [r6, #0]
 800077c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000780:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000782:	f7ff fd2d 	bl	80001e0 <HAL_GetTick>
 8000786:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000788:	6833      	ldr	r3, [r6, #0]
 800078a:	05da      	lsls	r2, r3, #23
 800078c:	d4dc      	bmi.n	8000748 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800078e:	f7ff fd27 	bl	80001e0 <HAL_GetTick>
 8000792:	eba0 0008 	sub.w	r0, r0, r8
 8000796:	2864      	cmp	r0, #100	; 0x64
 8000798:	d9f6      	bls.n	8000788 <HAL_RCC_OscConfig+0x208>
 800079a:	e733      	b.n	8000604 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800079c:	b9ab      	cbnz	r3, 80007ca <HAL_RCC_OscConfig+0x24a>
 800079e:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80007a0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007a4:	f023 0301 	bic.w	r3, r3, #1
 80007a8:	6223      	str	r3, [r4, #32]
 80007aa:	6a23      	ldr	r3, [r4, #32]
 80007ac:	f023 0304 	bic.w	r3, r3, #4
 80007b0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80007b2:	f7ff fd15 	bl	80001e0 <HAL_GetTick>
 80007b6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80007b8:	6a23      	ldr	r3, [r4, #32]
 80007ba:	0798      	lsls	r0, r3, #30
 80007bc:	d5d3      	bpl.n	8000766 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80007be:	f7ff fd0f 	bl	80001e0 <HAL_GetTick>
 80007c2:	1b80      	subs	r0, r0, r6
 80007c4:	4540      	cmp	r0, r8
 80007c6:	d9f7      	bls.n	80007b8 <HAL_RCC_OscConfig+0x238>
 80007c8:	e71c      	b.n	8000604 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007ca:	2b05      	cmp	r3, #5
 80007cc:	6a23      	ldr	r3, [r4, #32]
 80007ce:	d103      	bne.n	80007d8 <HAL_RCC_OscConfig+0x258>
 80007d0:	f043 0304 	orr.w	r3, r3, #4
 80007d4:	6223      	str	r3, [r4, #32]
 80007d6:	e7ba      	b.n	800074e <HAL_RCC_OscConfig+0x1ce>
 80007d8:	f023 0301 	bic.w	r3, r3, #1
 80007dc:	6223      	str	r3, [r4, #32]
 80007de:	6a23      	ldr	r3, [r4, #32]
 80007e0:	f023 0304 	bic.w	r3, r3, #4
 80007e4:	e7b6      	b.n	8000754 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80007e6:	f7ff fcfb 	bl	80001e0 <HAL_GetTick>
 80007ea:	eba0 0008 	sub.w	r0, r0, r8
 80007ee:	42b0      	cmp	r0, r6
 80007f0:	d9b6      	bls.n	8000760 <HAL_RCC_OscConfig+0x1e0>
 80007f2:	e707      	b.n	8000604 <HAL_RCC_OscConfig+0x84>
 80007f4:	40021000 	.word	0x40021000
 80007f8:	42420000 	.word	0x42420000
 80007fc:	42420480 	.word	0x42420480
 8000800:	20000024 	.word	0x20000024
 8000804:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000808:	4b2a      	ldr	r3, [pc, #168]	; (80008b4 <HAL_RCC_OscConfig+0x334>)
 800080a:	685a      	ldr	r2, [r3, #4]
 800080c:	461c      	mov	r4, r3
 800080e:	f002 020c 	and.w	r2, r2, #12
 8000812:	2a08      	cmp	r2, #8
 8000814:	d03d      	beq.n	8000892 <HAL_RCC_OscConfig+0x312>
 8000816:	2300      	movs	r3, #0
 8000818:	4e27      	ldr	r6, [pc, #156]	; (80008b8 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800081a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800081c:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800081e:	d12b      	bne.n	8000878 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8000820:	f7ff fcde 	bl	80001e0 <HAL_GetTick>
 8000824:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000826:	6823      	ldr	r3, [r4, #0]
 8000828:	0199      	lsls	r1, r3, #6
 800082a:	d41f      	bmi.n	800086c <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800082c:	6a2b      	ldr	r3, [r5, #32]
 800082e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000832:	d105      	bne.n	8000840 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000834:	6862      	ldr	r2, [r4, #4]
 8000836:	68a9      	ldr	r1, [r5, #8]
 8000838:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800083c:	430a      	orrs	r2, r1
 800083e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000840:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000842:	6862      	ldr	r2, [r4, #4]
 8000844:	430b      	orrs	r3, r1
 8000846:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800084a:	4313      	orrs	r3, r2
 800084c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800084e:	2301      	movs	r3, #1
 8000850:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000852:	f7ff fcc5 	bl	80001e0 <HAL_GetTick>
 8000856:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000858:	6823      	ldr	r3, [r4, #0]
 800085a:	019a      	lsls	r2, r3, #6
 800085c:	f53f aea8 	bmi.w	80005b0 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000860:	f7ff fcbe 	bl	80001e0 <HAL_GetTick>
 8000864:	1b40      	subs	r0, r0, r5
 8000866:	2802      	cmp	r0, #2
 8000868:	d9f6      	bls.n	8000858 <HAL_RCC_OscConfig+0x2d8>
 800086a:	e6cb      	b.n	8000604 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800086c:	f7ff fcb8 	bl	80001e0 <HAL_GetTick>
 8000870:	1bc0      	subs	r0, r0, r7
 8000872:	2802      	cmp	r0, #2
 8000874:	d9d7      	bls.n	8000826 <HAL_RCC_OscConfig+0x2a6>
 8000876:	e6c5      	b.n	8000604 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000878:	f7ff fcb2 	bl	80001e0 <HAL_GetTick>
 800087c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800087e:	6823      	ldr	r3, [r4, #0]
 8000880:	019b      	lsls	r3, r3, #6
 8000882:	f57f ae95 	bpl.w	80005b0 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000886:	f7ff fcab 	bl	80001e0 <HAL_GetTick>
 800088a:	1b40      	subs	r0, r0, r5
 800088c:	2802      	cmp	r0, #2
 800088e:	d9f6      	bls.n	800087e <HAL_RCC_OscConfig+0x2fe>
 8000890:	e6b8      	b.n	8000604 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000892:	2801      	cmp	r0, #1
 8000894:	f43f aeb7 	beq.w	8000606 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8000898:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800089a:	6a2b      	ldr	r3, [r5, #32]
 800089c:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 80008a0:	429a      	cmp	r2, r3
 80008a2:	f47f ae71 	bne.w	8000588 <HAL_RCC_OscConfig+0x8>
 80008a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80008a8:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 80008ac:	1ac0      	subs	r0, r0, r3
 80008ae:	bf18      	it	ne
 80008b0:	2001      	movne	r0, #1
 80008b2:	e6a8      	b.n	8000606 <HAL_RCC_OscConfig+0x86>
 80008b4:	40021000 	.word	0x40021000
 80008b8:	42420060 	.word	0x42420060

080008bc <HAL_RCC_GetSysClockFreq>:
{
 80008bc:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80008be:	4b19      	ldr	r3, [pc, #100]	; (8000924 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80008c0:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80008c2:	ac02      	add	r4, sp, #8
 80008c4:	f103 0510 	add.w	r5, r3, #16
 80008c8:	4622      	mov	r2, r4
 80008ca:	6818      	ldr	r0, [r3, #0]
 80008cc:	6859      	ldr	r1, [r3, #4]
 80008ce:	3308      	adds	r3, #8
 80008d0:	c203      	stmia	r2!, {r0, r1}
 80008d2:	42ab      	cmp	r3, r5
 80008d4:	4614      	mov	r4, r2
 80008d6:	d1f7      	bne.n	80008c8 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80008d8:	2301      	movs	r3, #1
 80008da:	f88d 3004 	strb.w	r3, [sp, #4]
 80008de:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80008e0:	4911      	ldr	r1, [pc, #68]	; (8000928 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80008e2:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80008e6:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80008e8:	f003 020c 	and.w	r2, r3, #12
 80008ec:	2a08      	cmp	r2, #8
 80008ee:	d117      	bne.n	8000920 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80008f0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80008f4:	a806      	add	r0, sp, #24
 80008f6:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80008f8:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80008fa:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80008fe:	d50c      	bpl.n	800091a <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000900:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000902:	480a      	ldr	r0, [pc, #40]	; (800092c <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000904:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000908:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800090a:	aa06      	add	r2, sp, #24
 800090c:	4413      	add	r3, r2
 800090e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000912:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000916:	b007      	add	sp, #28
 8000918:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800091a:	4805      	ldr	r0, [pc, #20]	; (8000930 <HAL_RCC_GetSysClockFreq+0x74>)
 800091c:	4350      	muls	r0, r2
 800091e:	e7fa      	b.n	8000916 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000920:	4802      	ldr	r0, [pc, #8]	; (800092c <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000922:	e7f8      	b.n	8000916 <HAL_RCC_GetSysClockFreq+0x5a>
 8000924:	080033ec 	.word	0x080033ec
 8000928:	40021000 	.word	0x40021000
 800092c:	007a1200 	.word	0x007a1200
 8000930:	003d0900 	.word	0x003d0900

08000934 <HAL_RCC_ClockConfig>:
{
 8000934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000938:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800093a:	4604      	mov	r4, r0
 800093c:	b910      	cbnz	r0, 8000944 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800093e:	2001      	movs	r0, #1
 8000940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000944:	4a45      	ldr	r2, [pc, #276]	; (8000a5c <HAL_RCC_ClockConfig+0x128>)
 8000946:	6813      	ldr	r3, [r2, #0]
 8000948:	f003 0307 	and.w	r3, r3, #7
 800094c:	428b      	cmp	r3, r1
 800094e:	d329      	bcc.n	80009a4 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000950:	6821      	ldr	r1, [r4, #0]
 8000952:	078e      	lsls	r6, r1, #30
 8000954:	d431      	bmi.n	80009ba <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000956:	07ca      	lsls	r2, r1, #31
 8000958:	d444      	bmi.n	80009e4 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800095a:	4a40      	ldr	r2, [pc, #256]	; (8000a5c <HAL_RCC_ClockConfig+0x128>)
 800095c:	6813      	ldr	r3, [r2, #0]
 800095e:	f003 0307 	and.w	r3, r3, #7
 8000962:	429d      	cmp	r5, r3
 8000964:	d367      	bcc.n	8000a36 <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000966:	6822      	ldr	r2, [r4, #0]
 8000968:	4d3d      	ldr	r5, [pc, #244]	; (8000a60 <HAL_RCC_ClockConfig+0x12c>)
 800096a:	f012 0f04 	tst.w	r2, #4
 800096e:	d16e      	bne.n	8000a4e <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000970:	0713      	lsls	r3, r2, #28
 8000972:	d506      	bpl.n	8000982 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000974:	686b      	ldr	r3, [r5, #4]
 8000976:	6922      	ldr	r2, [r4, #16]
 8000978:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800097c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000980:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000982:	f7ff ff9b 	bl	80008bc <HAL_RCC_GetSysClockFreq>
 8000986:	686b      	ldr	r3, [r5, #4]
 8000988:	4a36      	ldr	r2, [pc, #216]	; (8000a64 <HAL_RCC_ClockConfig+0x130>)
 800098a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800098e:	5cd3      	ldrb	r3, [r2, r3]
 8000990:	40d8      	lsrs	r0, r3
 8000992:	4b35      	ldr	r3, [pc, #212]	; (8000a68 <HAL_RCC_ClockConfig+0x134>)
 8000994:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8000996:	4b35      	ldr	r3, [pc, #212]	; (8000a6c <HAL_RCC_ClockConfig+0x138>)
 8000998:	6818      	ldr	r0, [r3, #0]
 800099a:	f7ff fbdf 	bl	800015c <HAL_InitTick>
  return HAL_OK;
 800099e:	2000      	movs	r0, #0
 80009a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009a4:	6813      	ldr	r3, [r2, #0]
 80009a6:	f023 0307 	bic.w	r3, r3, #7
 80009aa:	430b      	orrs	r3, r1
 80009ac:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80009ae:	6813      	ldr	r3, [r2, #0]
 80009b0:	f003 0307 	and.w	r3, r3, #7
 80009b4:	4299      	cmp	r1, r3
 80009b6:	d1c2      	bne.n	800093e <HAL_RCC_ClockConfig+0xa>
 80009b8:	e7ca      	b.n	8000950 <HAL_RCC_ClockConfig+0x1c>
 80009ba:	4b29      	ldr	r3, [pc, #164]	; (8000a60 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80009bc:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80009c0:	bf1e      	ittt	ne
 80009c2:	685a      	ldrne	r2, [r3, #4]
 80009c4:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80009c8:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80009ca:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80009cc:	bf42      	ittt	mi
 80009ce:	685a      	ldrmi	r2, [r3, #4]
 80009d0:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80009d4:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80009d6:	685a      	ldr	r2, [r3, #4]
 80009d8:	68a0      	ldr	r0, [r4, #8]
 80009da:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80009de:	4302      	orrs	r2, r0
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	e7b8      	b.n	8000956 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009e4:	6862      	ldr	r2, [r4, #4]
 80009e6:	4e1e      	ldr	r6, [pc, #120]	; (8000a60 <HAL_RCC_ClockConfig+0x12c>)
 80009e8:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009ea:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009ec:	d11b      	bne.n	8000a26 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009ee:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009f2:	d0a4      	beq.n	800093e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80009f4:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009f6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80009fa:	f023 0303 	bic.w	r3, r3, #3
 80009fe:	4313      	orrs	r3, r2
 8000a00:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000a02:	f7ff fbed 	bl	80001e0 <HAL_GetTick>
 8000a06:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000a08:	6873      	ldr	r3, [r6, #4]
 8000a0a:	6862      	ldr	r2, [r4, #4]
 8000a0c:	f003 030c 	and.w	r3, r3, #12
 8000a10:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000a14:	d0a1      	beq.n	800095a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a16:	f7ff fbe3 	bl	80001e0 <HAL_GetTick>
 8000a1a:	1bc0      	subs	r0, r0, r7
 8000a1c:	4540      	cmp	r0, r8
 8000a1e:	d9f3      	bls.n	8000a08 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8000a20:	2003      	movs	r0, #3
}
 8000a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a26:	2a02      	cmp	r2, #2
 8000a28:	d102      	bne.n	8000a30 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a2a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000a2e:	e7e0      	b.n	80009f2 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a30:	f013 0f02 	tst.w	r3, #2
 8000a34:	e7dd      	b.n	80009f2 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a36:	6813      	ldr	r3, [r2, #0]
 8000a38:	f023 0307 	bic.w	r3, r3, #7
 8000a3c:	432b      	orrs	r3, r5
 8000a3e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000a40:	6813      	ldr	r3, [r2, #0]
 8000a42:	f003 0307 	and.w	r3, r3, #7
 8000a46:	429d      	cmp	r5, r3
 8000a48:	f47f af79 	bne.w	800093e <HAL_RCC_ClockConfig+0xa>
 8000a4c:	e78b      	b.n	8000966 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000a4e:	686b      	ldr	r3, [r5, #4]
 8000a50:	68e1      	ldr	r1, [r4, #12]
 8000a52:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a56:	430b      	orrs	r3, r1
 8000a58:	606b      	str	r3, [r5, #4]
 8000a5a:	e789      	b.n	8000970 <HAL_RCC_ClockConfig+0x3c>
 8000a5c:	40022000 	.word	0x40022000
 8000a60:	40021000 	.word	0x40021000
 8000a64:	08008eb5 	.word	0x08008eb5
 8000a68:	20000024 	.word	0x20000024
 8000a6c:	20000004 	.word	0x20000004

08000a70 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000a70:	4b04      	ldr	r3, [pc, #16]	; (8000a84 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000a72:	4a05      	ldr	r2, [pc, #20]	; (8000a88 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000a7a:	5cd3      	ldrb	r3, [r2, r3]
 8000a7c:	4a03      	ldr	r2, [pc, #12]	; (8000a8c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000a7e:	6810      	ldr	r0, [r2, #0]
}
 8000a80:	40d8      	lsrs	r0, r3
 8000a82:	4770      	bx	lr
 8000a84:	40021000 	.word	0x40021000
 8000a88:	08008ec5 	.word	0x08008ec5
 8000a8c:	20000024 	.word	0x20000024

08000a90 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000a90:	4b04      	ldr	r3, [pc, #16]	; (8000aa4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000a92:	4a05      	ldr	r2, [pc, #20]	; (8000aa8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000a9a:	5cd3      	ldrb	r3, [r2, r3]
 8000a9c:	4a03      	ldr	r2, [pc, #12]	; (8000aac <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000a9e:	6810      	ldr	r0, [r2, #0]
}
 8000aa0:	40d8      	lsrs	r0, r3
 8000aa2:	4770      	bx	lr
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	08008ec5 	.word	0x08008ec5
 8000aac:	20000024 	.word	0x20000024

08000ab0 <SPI_WaitFlagStateUntilTimeout.constprop.8>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8000ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	460e      	mov	r6, r1
 8000ab6:	4615      	mov	r5, r2
 8000ab8:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000aba:	6821      	ldr	r1, [r4, #0]
 8000abc:	688a      	ldr	r2, [r1, #8]
 8000abe:	ea36 0302 	bics.w	r3, r6, r2
 8000ac2:	d001      	beq.n	8000ac8 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000ac4:	2000      	movs	r0, #0
}
 8000ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000ac8:	1c6b      	adds	r3, r5, #1
 8000aca:	d0f7      	beq.n	8000abc <SPI_WaitFlagStateUntilTimeout.constprop.8+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8000acc:	f7ff fb88 	bl	80001e0 <HAL_GetTick>
 8000ad0:	1bc0      	subs	r0, r0, r7
 8000ad2:	4285      	cmp	r5, r0
 8000ad4:	d8f1      	bhi.n	8000aba <SPI_WaitFlagStateUntilTimeout.constprop.8+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000ad6:	6823      	ldr	r3, [r4, #0]
 8000ad8:	685a      	ldr	r2, [r3, #4]
 8000ada:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000ade:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000ae0:	6862      	ldr	r2, [r4, #4]
 8000ae2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000ae6:	d10a      	bne.n	8000afe <SPI_WaitFlagStateUntilTimeout.constprop.8+0x4e>
 8000ae8:	68a2      	ldr	r2, [r4, #8]
 8000aea:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000aee:	d002      	beq.n	8000af6 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000af0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000af4:	d103      	bne.n	8000afe <SPI_WaitFlagStateUntilTimeout.constprop.8+0x4e>
          __HAL_SPI_DISABLE(hspi);
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000afc:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000afe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000b00:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000b04:	d107      	bne.n	8000b16 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x66>
          SPI_RESET_CRC(hspi);
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000b14:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8000b16:	2301      	movs	r3, #1
 8000b18:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	2003      	movs	r0, #3
 8000b20:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000b26 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000b26:	b510      	push	{r4, lr}
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000b28:	4613      	mov	r3, r2
 8000b2a:	460a      	mov	r2, r1
 8000b2c:	2180      	movs	r1, #128	; 0x80
{
 8000b2e:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000b30:	f7ff ffbe 	bl	8000ab0 <SPI_WaitFlagStateUntilTimeout.constprop.8>
 8000b34:	b120      	cbz	r0, 8000b40 <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8000b36:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000b38:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b3a:	f043 0320 	orr.w	r3, r3, #32
 8000b3e:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8000b40:	bd10      	pop	{r4, pc}

08000b42 <HAL_SPI_Init>:
{
 8000b42:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8000b44:	4604      	mov	r4, r0
 8000b46:	2800      	cmp	r0, #0
 8000b48:	d034      	beq.n	8000bb4 <HAL_SPI_Init+0x72>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000b4e:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000b52:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000b56:	b91b      	cbnz	r3, 8000b60 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8000b58:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8000b5c:	f001 fe1e 	bl	800279c <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8000b60:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8000b62:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000b64:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000b68:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000b6a:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8000b6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000b70:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000b72:	6863      	ldr	r3, [r4, #4]
 8000b74:	69a1      	ldr	r1, [r4, #24]
 8000b76:	4303      	orrs	r3, r0
 8000b78:	68e0      	ldr	r0, [r4, #12]
 8000b7a:	4303      	orrs	r3, r0
 8000b7c:	6920      	ldr	r0, [r4, #16]
 8000b7e:	4303      	orrs	r3, r0
 8000b80:	6960      	ldr	r0, [r4, #20]
 8000b82:	4303      	orrs	r3, r0
 8000b84:	69e0      	ldr	r0, [r4, #28]
 8000b86:	4303      	orrs	r3, r0
 8000b88:	6a20      	ldr	r0, [r4, #32]
 8000b8a:	4303      	orrs	r3, r0
 8000b8c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000b8e:	4303      	orrs	r3, r0
 8000b90:	f401 7000 	and.w	r0, r1, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8000b94:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000b96:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8000b98:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000b9c:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8000b9e:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000ba0:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000ba2:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000ba4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000ba8:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8000baa:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000bac:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000bae:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8000bb2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000bb4:	2001      	movs	r0, #1
}
 8000bb6:	bd10      	pop	{r4, pc}

08000bb8 <HAL_SPI_DeInit>:
{
 8000bb8:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8000bba:	4604      	mov	r4, r0
 8000bbc:	b180      	cbz	r0, 8000be0 <HAL_SPI_DeInit+0x28>
  hspi->State = HAL_SPI_STATE_BUSY;
 8000bbe:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8000bc0:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000bc2:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000bc6:	6813      	ldr	r3, [r2, #0]
 8000bc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000bcc:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8000bce:	f001 fe1f 	bl	8002810 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	6560      	str	r0, [r4, #84]	; 0x54
  __HAL_UNLOCK(hspi);
 8000bd6:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  hspi->State = HAL_SPI_STATE_RESET;
 8000bda:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  return HAL_OK;
 8000bde:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000be0:	2001      	movs	r0, #1
}
 8000be2:	bd10      	pop	{r4, pc}

08000be4 <HAL_SPI_Transmit>:
{
 8000be4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000be8:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8000bea:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8000bee:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8000bf0:	2b01      	cmp	r3, #1
{
 8000bf2:	460d      	mov	r5, r1
 8000bf4:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8000bf6:	f000 809c 	beq.w	8000d32 <HAL_SPI_Transmit+0x14e>
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000c00:	f7ff faee 	bl	80001e0 <HAL_GetTick>
 8000c04:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8000c06:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8000c0a:	b2c0      	uxtb	r0, r0
 8000c0c:	2801      	cmp	r0, #1
 8000c0e:	f040 808e 	bne.w	8000d2e <HAL_SPI_Transmit+0x14a>
  if ((pData == NULL) || (Size == 0U))
 8000c12:	2d00      	cmp	r5, #0
 8000c14:	d05e      	beq.n	8000cd4 <HAL_SPI_Transmit+0xf0>
 8000c16:	f1b8 0f00 	cmp.w	r8, #0
 8000c1a:	d05b      	beq.n	8000cd4 <HAL_SPI_Transmit+0xf0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000c1c:	2303      	movs	r3, #3
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000c1e:	2000      	movs	r0, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000c20:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000c24:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000c26:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8000c28:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8000c2a:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8000c2e:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8000c30:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8000c32:	6460      	str	r0, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8000c34:	6420      	str	r0, [r4, #64]	; 0x40
 8000c36:	6820      	ldr	r0, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000c38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8000c3c:	bf08      	it	eq
 8000c3e:	6803      	ldreq	r3, [r0, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8000c40:	6325      	str	r5, [r4, #48]	; 0x30
    SPI_1LINE_TX(hspi);
 8000c42:	bf08      	it	eq
 8000c44:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
  hspi->TxXferSize  = Size;
 8000c48:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8000c4c:	bf08      	it	eq
 8000c4e:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000c50:	6803      	ldr	r3, [r0, #0]
 8000c52:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8000c54:	bf5e      	ittt	pl
 8000c56:	6803      	ldrpl	r3, [r0, #0]
 8000c58:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8000c5c:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000c5e:	68e3      	ldr	r3, [r4, #12]
 8000c60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c64:	6863      	ldr	r3, [r4, #4]
 8000c66:	d13e      	bne.n	8000ce6 <HAL_SPI_Transmit+0x102>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000c68:	b113      	cbz	r3, 8000c70 <HAL_SPI_Transmit+0x8c>
 8000c6a:	f1b8 0f01 	cmp.w	r8, #1
 8000c6e:	d107      	bne.n	8000c80 <HAL_SPI_Transmit+0x9c>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000c70:	f835 3b02 	ldrh.w	r3, [r5], #2
 8000c74:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8000c76:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8000c78:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8000c80:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	b9a3      	cbnz	r3, 8000cb0 <HAL_SPI_Transmit+0xcc>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8000c86:	463a      	mov	r2, r7
 8000c88:	4631      	mov	r1, r6
 8000c8a:	4620      	mov	r0, r4
 8000c8c:	f7ff ff4b 	bl	8000b26 <SPI_EndRxTxTransaction>
 8000c90:	2800      	cmp	r0, #0
 8000c92:	d149      	bne.n	8000d28 <HAL_SPI_Transmit+0x144>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000c94:	68a3      	ldr	r3, [r4, #8]
 8000c96:	b933      	cbnz	r3, 8000ca6 <HAL_SPI_Transmit+0xc2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000c98:	9301      	str	r3, [sp, #4]
 8000c9a:	6823      	ldr	r3, [r4, #0]
 8000c9c:	68da      	ldr	r2, [r3, #12]
 8000c9e:	9201      	str	r2, [sp, #4]
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	9301      	str	r3, [sp, #4]
 8000ca4:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000ca6:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8000ca8:	3000      	adds	r0, #0
 8000caa:	bf18      	it	ne
 8000cac:	2001      	movne	r0, #1
 8000cae:	e011      	b.n	8000cd4 <HAL_SPI_Transmit+0xf0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000cb0:	6822      	ldr	r2, [r4, #0]
 8000cb2:	6893      	ldr	r3, [r2, #8]
 8000cb4:	0798      	lsls	r0, r3, #30
 8000cb6:	d505      	bpl.n	8000cc4 <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000cb8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000cba:	f833 1b02 	ldrh.w	r1, [r3], #2
 8000cbe:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8000cc0:	6323      	str	r3, [r4, #48]	; 0x30
 8000cc2:	e7d9      	b.n	8000c78 <HAL_SPI_Transmit+0x94>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8000cc4:	f7ff fa8c 	bl	80001e0 <HAL_GetTick>
 8000cc8:	1bc0      	subs	r0, r0, r7
 8000cca:	42b0      	cmp	r0, r6
 8000ccc:	d3d8      	bcc.n	8000c80 <HAL_SPI_Transmit+0x9c>
 8000cce:	1c71      	adds	r1, r6, #1
 8000cd0:	d0d6      	beq.n	8000c80 <HAL_SPI_Transmit+0x9c>
          errorcode = HAL_TIMEOUT;
 8000cd2:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000cda:	2300      	movs	r3, #0
 8000cdc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8000ce0:	b002      	add	sp, #8
 8000ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000ce6:	b113      	cbz	r3, 8000cee <HAL_SPI_Transmit+0x10a>
 8000ce8:	f1b8 0f01 	cmp.w	r8, #1
 8000cec:	d108      	bne.n	8000d00 <HAL_SPI_Transmit+0x11c>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8000cee:	782b      	ldrb	r3, [r5, #0]
 8000cf0:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8000cf2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8000cf8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8000d00:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d0be      	beq.n	8000c86 <HAL_SPI_Transmit+0xa2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000d08:	6823      	ldr	r3, [r4, #0]
 8000d0a:	689a      	ldr	r2, [r3, #8]
 8000d0c:	0792      	lsls	r2, r2, #30
 8000d0e:	d503      	bpl.n	8000d18 <HAL_SPI_Transmit+0x134>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8000d10:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000d12:	7812      	ldrb	r2, [r2, #0]
 8000d14:	731a      	strb	r2, [r3, #12]
 8000d16:	e7ec      	b.n	8000cf2 <HAL_SPI_Transmit+0x10e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8000d18:	f7ff fa62 	bl	80001e0 <HAL_GetTick>
 8000d1c:	1bc0      	subs	r0, r0, r7
 8000d1e:	4286      	cmp	r6, r0
 8000d20:	d8ee      	bhi.n	8000d00 <HAL_SPI_Transmit+0x11c>
 8000d22:	1c73      	adds	r3, r6, #1
 8000d24:	d0ec      	beq.n	8000d00 <HAL_SPI_Transmit+0x11c>
 8000d26:	e7d4      	b.n	8000cd2 <HAL_SPI_Transmit+0xee>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000d28:	2320      	movs	r3, #32
 8000d2a:	6563      	str	r3, [r4, #84]	; 0x54
 8000d2c:	e7b2      	b.n	8000c94 <HAL_SPI_Transmit+0xb0>
    errorcode = HAL_BUSY;
 8000d2e:	2002      	movs	r0, #2
 8000d30:	e7d0      	b.n	8000cd4 <HAL_SPI_Transmit+0xf0>
  __HAL_LOCK(hspi);
 8000d32:	2002      	movs	r0, #2
 8000d34:	e7d4      	b.n	8000ce0 <HAL_SPI_Transmit+0xfc>

08000d36 <HAL_SPI_TransmitReceive>:
{
 8000d36:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000d3a:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8000d3c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8000d40:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8000d42:	2b01      	cmp	r3, #1
{
 8000d44:	460d      	mov	r5, r1
 8000d46:	4691      	mov	r9, r2
 8000d48:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8000d4a:	f000 80e2 	beq.w	8000f12 <HAL_SPI_TransmitReceive+0x1dc>
 8000d4e:	2301      	movs	r3, #1
 8000d50:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000d54:	f7ff fa44 	bl	80001e0 <HAL_GetTick>
  tmp_state           = hspi->State;
 8000d58:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8000d5c:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 8000d5e:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8000d60:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 8000d62:	6861      	ldr	r1, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8000d64:	d00a      	beq.n	8000d7c <HAL_SPI_TransmitReceive+0x46>
 8000d66:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8000d6a:	f040 80d0 	bne.w	8000f0e <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8000d6e:	68a0      	ldr	r0, [r4, #8]
 8000d70:	2800      	cmp	r0, #0
 8000d72:	f040 80cc 	bne.w	8000f0e <HAL_SPI_TransmitReceive+0x1d8>
 8000d76:	2b04      	cmp	r3, #4
 8000d78:	f040 80c9 	bne.w	8000f0e <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8000d7c:	2d00      	cmp	r5, #0
 8000d7e:	f000 80c4 	beq.w	8000f0a <HAL_SPI_TransmitReceive+0x1d4>
 8000d82:	f1b9 0f00 	cmp.w	r9, #0
 8000d86:	f000 80c0 	beq.w	8000f0a <HAL_SPI_TransmitReceive+0x1d4>
 8000d8a:	2e00      	cmp	r6, #0
 8000d8c:	f000 80bd 	beq.w	8000f0a <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8000d90:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8000d94:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8000d98:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000d9a:	bf1c      	itt	ne
 8000d9c:	2305      	movne	r3, #5
 8000d9e:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000da2:	2300      	movs	r3, #0
 8000da4:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8000da6:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8000da8:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000daa:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8000dac:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8000dae:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000db0:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8000db2:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000db4:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8000db6:	bf58      	it	pl
 8000db8:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8000dba:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8000dbc:	bf58      	it	pl
 8000dbe:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8000dc2:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8000dc4:	bf58      	it	pl
 8000dc6:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000dc8:	68e2      	ldr	r2, [r4, #12]
 8000dca:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8000dce:	d158      	bne.n	8000e82 <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000dd0:	b109      	cbz	r1, 8000dd6 <HAL_SPI_TransmitReceive+0xa0>
 8000dd2:	2e01      	cmp	r6, #1
 8000dd4:	d107      	bne.n	8000de6 <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000dd6:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000dda:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8000ddc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8000dde:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8000de0:	3b01      	subs	r3, #1
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8000de6:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000de8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	b9ab      	cbnz	r3, 8000e1a <HAL_SPI_TransmitReceive+0xe4>
 8000dee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	b993      	cbnz	r3, 8000e1a <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8000df4:	4642      	mov	r2, r8
 8000df6:	4639      	mov	r1, r7
 8000df8:	4620      	mov	r0, r4
 8000dfa:	f7ff fe94 	bl	8000b26 <SPI_EndRxTxTransaction>
 8000dfe:	2800      	cmp	r0, #0
 8000e00:	f040 8081 	bne.w	8000f06 <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000e04:	68a3      	ldr	r3, [r4, #8]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d132      	bne.n	8000e70 <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000e0a:	6823      	ldr	r3, [r4, #0]
 8000e0c:	9001      	str	r0, [sp, #4]
 8000e0e:	68da      	ldr	r2, [r3, #12]
 8000e10:	9201      	str	r2, [sp, #4]
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	9301      	str	r3, [sp, #4]
 8000e16:	9b01      	ldr	r3, [sp, #4]
 8000e18:	e02a      	b.n	8000e70 <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8000e1a:	6822      	ldr	r2, [r4, #0]
 8000e1c:	6893      	ldr	r3, [r2, #8]
 8000e1e:	0799      	lsls	r1, r3, #30
 8000e20:	d50d      	bpl.n	8000e3e <HAL_SPI_TransmitReceive+0x108>
 8000e22:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	b153      	cbz	r3, 8000e3e <HAL_SPI_TransmitReceive+0x108>
 8000e28:	b14d      	cbz	r5, 8000e3e <HAL_SPI_TransmitReceive+0x108>
        txallowed = 0U;
 8000e2a:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000e2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e2e:	f833 1b02 	ldrh.w	r1, [r3], #2
 8000e32:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8000e34:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8000e36:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8000e3e:	6893      	ldr	r3, [r2, #8]
 8000e40:	07db      	lsls	r3, r3, #31
 8000e42:	d50c      	bpl.n	8000e5e <HAL_SPI_TransmitReceive+0x128>
 8000e44:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	b14b      	cbz	r3, 8000e5e <HAL_SPI_TransmitReceive+0x128>
        txallowed = 1U;
 8000e4a:	2501      	movs	r5, #1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8000e4c:	68d2      	ldr	r2, [r2, #12]
 8000e4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000e50:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8000e54:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8000e56:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000e58:	3b01      	subs	r3, #1
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8000e5e:	f7ff f9bf 	bl	80001e0 <HAL_GetTick>
 8000e62:	eba0 0008 	sub.w	r0, r0, r8
 8000e66:	4287      	cmp	r7, r0
 8000e68:	d8be      	bhi.n	8000de8 <HAL_SPI_TransmitReceive+0xb2>
 8000e6a:	1c7e      	adds	r6, r7, #1
 8000e6c:	d0bc      	beq.n	8000de8 <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 8000e6e:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000e70:	2301      	movs	r3, #1
 8000e72:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000e76:	2300      	movs	r3, #0
 8000e78:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8000e7c:	b003      	add	sp, #12
 8000e7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000e82:	b109      	cbz	r1, 8000e88 <HAL_SPI_TransmitReceive+0x152>
 8000e84:	2e01      	cmp	r6, #1
 8000e86:	d108      	bne.n	8000e9a <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8000e88:	782a      	ldrb	r2, [r5, #0]
 8000e8a:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8000e8c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e8e:	3301      	adds	r3, #1
 8000e90:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8000e92:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000e94:	3b01      	subs	r3, #1
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8000e9a:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000e9c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	b91b      	cbnz	r3, 8000eaa <HAL_SPI_TransmitReceive+0x174>
 8000ea2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d0a4      	beq.n	8000df4 <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8000eaa:	6822      	ldr	r2, [r4, #0]
 8000eac:	6893      	ldr	r3, [r2, #8]
 8000eae:	0798      	lsls	r0, r3, #30
 8000eb0:	d50e      	bpl.n	8000ed0 <HAL_SPI_TransmitReceive+0x19a>
 8000eb2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	b15b      	cbz	r3, 8000ed0 <HAL_SPI_TransmitReceive+0x19a>
 8000eb8:	b155      	cbz	r5, 8000ed0 <HAL_SPI_TransmitReceive+0x19a>
        txallowed = 0U;
 8000eba:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8000ebc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8000ec2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8000ec8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8000ed0:	6822      	ldr	r2, [r4, #0]
 8000ed2:	6893      	ldr	r3, [r2, #8]
 8000ed4:	07d9      	lsls	r1, r3, #31
 8000ed6:	d50d      	bpl.n	8000ef4 <HAL_SPI_TransmitReceive+0x1be>
 8000ed8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	b153      	cbz	r3, 8000ef4 <HAL_SPI_TransmitReceive+0x1be>
        txallowed = 1U;
 8000ede:	2501      	movs	r5, #1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8000ee0:	68d2      	ldr	r2, [r2, #12]
 8000ee2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000ee4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8000ee6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000ee8:	3301      	adds	r3, #1
 8000eea:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8000eec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8000ef4:	f7ff f974 	bl	80001e0 <HAL_GetTick>
 8000ef8:	eba0 0008 	sub.w	r0, r0, r8
 8000efc:	4287      	cmp	r7, r0
 8000efe:	d8cd      	bhi.n	8000e9c <HAL_SPI_TransmitReceive+0x166>
 8000f00:	1c7b      	adds	r3, r7, #1
 8000f02:	d0cb      	beq.n	8000e9c <HAL_SPI_TransmitReceive+0x166>
 8000f04:	e7b3      	b.n	8000e6e <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000f06:	2320      	movs	r3, #32
 8000f08:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8000f0a:	2001      	movs	r0, #1
 8000f0c:	e7b0      	b.n	8000e70 <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 8000f0e:	2002      	movs	r0, #2
 8000f10:	e7ae      	b.n	8000e70 <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 8000f12:	2002      	movs	r0, #2
 8000f14:	e7b2      	b.n	8000e7c <HAL_SPI_TransmitReceive+0x146>
	...

08000f18 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000f18:	6a03      	ldr	r3, [r0, #32]
{
 8000f1a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000f1c:	f023 0301 	bic.w	r3, r3, #1
 8000f20:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000f22:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000f24:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000f26:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000f28:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000f2a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000f2e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000f30:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8000f32:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8000f36:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8000f38:	4d0a      	ldr	r5, [pc, #40]	; (8000f64 <TIM_OC1_SetConfig+0x4c>)
 8000f3a:	42a8      	cmp	r0, r5
 8000f3c:	d10b      	bne.n	8000f56 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8000f3e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8000f40:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8000f44:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8000f46:	698e      	ldr	r6, [r1, #24]
 8000f48:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8000f4a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8000f4e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8000f50:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8000f54:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000f56:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000f58:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8000f5a:	684a      	ldr	r2, [r1, #4]
 8000f5c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000f5e:	6203      	str	r3, [r0, #32]
 8000f60:	bd70      	pop	{r4, r5, r6, pc}
 8000f62:	bf00      	nop
 8000f64:	40012c00 	.word	0x40012c00

08000f68 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000f68:	6a03      	ldr	r3, [r0, #32]
{
 8000f6a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000f6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f70:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000f72:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000f74:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000f76:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000f78:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8000f7a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000f7e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000f80:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8000f82:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000f86:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8000f8a:	4d0b      	ldr	r5, [pc, #44]	; (8000fb8 <TIM_OC3_SetConfig+0x50>)
 8000f8c:	42a8      	cmp	r0, r5
 8000f8e:	d10d      	bne.n	8000fac <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000f90:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8000f92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000f96:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000f9a:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8000f9c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8000f9e:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000fa2:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8000fa4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000fa8:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000fac:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000fae:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8000fb0:	684a      	ldr	r2, [r1, #4]
 8000fb2:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000fb4:	6203      	str	r3, [r0, #32]
 8000fb6:	bd70      	pop	{r4, r5, r6, pc}
 8000fb8:	40012c00 	.word	0x40012c00

08000fbc <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000fbc:	6a03      	ldr	r3, [r0, #32]
{
 8000fbe:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000fc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000fc4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000fc6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000fc8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000fca:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000fcc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000fce:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000fd2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000fd6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8000fd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000fdc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000fe0:	4d06      	ldr	r5, [pc, #24]	; (8000ffc <TIM_OC4_SetConfig+0x40>)
 8000fe2:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000fe4:	bf02      	ittt	eq
 8000fe6:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8000fe8:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000fec:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000ff0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000ff2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8000ff4:	684a      	ldr	r2, [r1, #4]
 8000ff6:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000ff8:	6203      	str	r3, [r0, #32]
 8000ffa:	bd30      	pop	{r4, r5, pc}
 8000ffc:	40012c00 	.word	0x40012c00

08001000 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001000:	4a1a      	ldr	r2, [pc, #104]	; (800106c <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8001002:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001004:	4290      	cmp	r0, r2
 8001006:	d00a      	beq.n	800101e <TIM_Base_SetConfig+0x1e>
 8001008:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800100c:	d007      	beq.n	800101e <TIM_Base_SetConfig+0x1e>
 800100e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001012:	4290      	cmp	r0, r2
 8001014:	d003      	beq.n	800101e <TIM_Base_SetConfig+0x1e>
 8001016:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800101a:	4290      	cmp	r0, r2
 800101c:	d115      	bne.n	800104a <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 800101e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001020:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001024:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001026:	4a11      	ldr	r2, [pc, #68]	; (800106c <TIM_Base_SetConfig+0x6c>)
 8001028:	4290      	cmp	r0, r2
 800102a:	d00a      	beq.n	8001042 <TIM_Base_SetConfig+0x42>
 800102c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001030:	d007      	beq.n	8001042 <TIM_Base_SetConfig+0x42>
 8001032:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001036:	4290      	cmp	r0, r2
 8001038:	d003      	beq.n	8001042 <TIM_Base_SetConfig+0x42>
 800103a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800103e:	4290      	cmp	r0, r2
 8001040:	d103      	bne.n	800104a <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001042:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001048:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800104a:	694a      	ldr	r2, [r1, #20]
 800104c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001050:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001052:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001054:	688b      	ldr	r3, [r1, #8]
 8001056:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001058:	680b      	ldr	r3, [r1, #0]
 800105a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800105c:	4b03      	ldr	r3, [pc, #12]	; (800106c <TIM_Base_SetConfig+0x6c>)
 800105e:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8001060:	bf04      	itt	eq
 8001062:	690b      	ldreq	r3, [r1, #16]
 8001064:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001066:	2301      	movs	r3, #1
 8001068:	6143      	str	r3, [r0, #20]
 800106a:	4770      	bx	lr
 800106c:	40012c00 	.word	0x40012c00

08001070 <HAL_TIM_PWM_Init>:
{
 8001070:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001072:	4604      	mov	r4, r0
 8001074:	b1a0      	cbz	r0, 80010a0 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001076:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800107a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800107e:	b91b      	cbnz	r3, 8001088 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001080:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001084:	f001 fbd8 	bl	8002838 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001088:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800108a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800108c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001090:	1d21      	adds	r1, r4, #4
 8001092:	f7ff ffb5 	bl	8001000 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001096:	2301      	movs	r3, #1
  return HAL_OK;
 8001098:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800109a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800109e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80010a0:	2001      	movs	r0, #1
}
 80010a2:	bd10      	pop	{r4, pc}

080010a4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80010a4:	6a03      	ldr	r3, [r0, #32]
{
 80010a6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80010a8:	f023 0310 	bic.w	r3, r3, #16
 80010ac:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80010ae:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80010b0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80010b2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80010b4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80010b6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80010ba:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80010be:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80010c0:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80010c4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80010c8:	4d0b      	ldr	r5, [pc, #44]	; (80010f8 <TIM_OC2_SetConfig+0x54>)
 80010ca:	42a8      	cmp	r0, r5
 80010cc:	d10d      	bne.n	80010ea <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80010ce:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80010d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80010d4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80010d8:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80010da:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80010dc:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80010e0:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80010e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80010e6:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80010ea:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80010ec:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80010ee:	684a      	ldr	r2, [r1, #4]
 80010f0:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80010f2:	6203      	str	r3, [r0, #32]
 80010f4:	bd70      	pop	{r4, r5, r6, pc}
 80010f6:	bf00      	nop
 80010f8:	40012c00 	.word	0x40012c00

080010fc <HAL_TIM_PWM_ConfigChannel>:
{
 80010fc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80010fe:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001102:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001104:	2b01      	cmp	r3, #1
 8001106:	f04f 0002 	mov.w	r0, #2
 800110a:	d025      	beq.n	8001158 <HAL_TIM_PWM_ConfigChannel+0x5c>
 800110c:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800110e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8001112:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8001116:	2a0c      	cmp	r2, #12
 8001118:	d818      	bhi.n	800114c <HAL_TIM_PWM_ConfigChannel+0x50>
 800111a:	e8df f002 	tbb	[pc, r2]
 800111e:	1707      	.short	0x1707
 8001120:	171e1717 	.word	0x171e1717
 8001124:	172f1717 	.word	0x172f1717
 8001128:	1717      	.short	0x1717
 800112a:	40          	.byte	0x40
 800112b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800112c:	6820      	ldr	r0, [r4, #0]
 800112e:	f7ff fef3 	bl	8000f18 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001132:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001134:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001136:	699a      	ldr	r2, [r3, #24]
 8001138:	f042 0208 	orr.w	r2, r2, #8
 800113c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800113e:	699a      	ldr	r2, [r3, #24]
 8001140:	f022 0204 	bic.w	r2, r2, #4
 8001144:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001146:	699a      	ldr	r2, [r3, #24]
 8001148:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800114a:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 800114c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800114e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001150:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001154:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001158:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800115a:	6820      	ldr	r0, [r4, #0]
 800115c:	f7ff ffa2 	bl	80010a4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001160:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001162:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001164:	699a      	ldr	r2, [r3, #24]
 8001166:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800116a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800116c:	699a      	ldr	r2, [r3, #24]
 800116e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001172:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001174:	699a      	ldr	r2, [r3, #24]
 8001176:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800117a:	e7e6      	b.n	800114a <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800117c:	6820      	ldr	r0, [r4, #0]
 800117e:	f7ff fef3 	bl	8000f68 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001182:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001184:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001186:	69da      	ldr	r2, [r3, #28]
 8001188:	f042 0208 	orr.w	r2, r2, #8
 800118c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800118e:	69da      	ldr	r2, [r3, #28]
 8001190:	f022 0204 	bic.w	r2, r2, #4
 8001194:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001196:	69da      	ldr	r2, [r3, #28]
 8001198:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800119a:	61da      	str	r2, [r3, #28]
      break;
 800119c:	e7d6      	b.n	800114c <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800119e:	6820      	ldr	r0, [r4, #0]
 80011a0:	f7ff ff0c 	bl	8000fbc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80011a4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80011a6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80011a8:	69da      	ldr	r2, [r3, #28]
 80011aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80011ae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80011b0:	69da      	ldr	r2, [r3, #28]
 80011b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011b6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80011b8:	69da      	ldr	r2, [r3, #28]
 80011ba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80011be:	e7ec      	b.n	800119a <HAL_TIM_PWM_ConfigChannel+0x9e>

080011c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80011c0:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80011c2:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80011c4:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80011c6:	f001 011f 	and.w	r1, r1, #31
 80011ca:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80011cc:	ea23 0304 	bic.w	r3, r3, r4
 80011d0:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80011d2:	6a03      	ldr	r3, [r0, #32]
 80011d4:	408a      	lsls	r2, r1
 80011d6:	431a      	orrs	r2, r3
 80011d8:	6202      	str	r2, [r0, #32]
 80011da:	bd10      	pop	{r4, pc}

080011dc <HAL_TIM_PWM_Start>:
{
 80011dc:	b510      	push	{r4, lr}
 80011de:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80011e0:	2201      	movs	r2, #1
 80011e2:	6800      	ldr	r0, [r0, #0]
 80011e4:	f7ff ffec 	bl	80011c0 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80011e8:	6823      	ldr	r3, [r4, #0]
 80011ea:	4a09      	ldr	r2, [pc, #36]	; (8001210 <HAL_TIM_PWM_Start+0x34>)
}
 80011ec:	2000      	movs	r0, #0
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80011ee:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 80011f0:	bf02      	ittt	eq
 80011f2:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 80011f4:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 80011f8:	645a      	streq	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80011fa:	689a      	ldr	r2, [r3, #8]
 80011fc:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001200:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8001202:	bf1e      	ittt	ne
 8001204:	681a      	ldrne	r2, [r3, #0]
 8001206:	f042 0201 	orrne.w	r2, r2, #1
 800120a:	601a      	strne	r2, [r3, #0]
}
 800120c:	bd10      	pop	{r4, pc}
 800120e:	bf00      	nop
 8001210:	40012c00 	.word	0x40012c00

08001214 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001214:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001218:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 800121a:	2b01      	cmp	r3, #1
 800121c:	f04f 0302 	mov.w	r3, #2
 8001220:	d014      	beq.n	800124c <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001222:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001224:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8001228:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800122a:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800122c:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800122e:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001230:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001234:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001238:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800123a:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800123c:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800123e:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001240:	2301      	movs	r3, #1
 8001242:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001246:	2300      	movs	r3, #0
 8001248:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800124c:	4618      	mov	r0, r3

  return HAL_OK;
}
 800124e:	bd30      	pop	{r4, r5, pc}

08001250 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001250:	b538      	push	{r3, r4, r5, lr}
 8001252:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001254:	6803      	ldr	r3, [r0, #0]
 8001256:	68c1      	ldr	r1, [r0, #12]
 8001258:	691a      	ldr	r2, [r3, #16]
 800125a:	2419      	movs	r4, #25
 800125c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001260:	430a      	orrs	r2, r1
 8001262:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001264:	6882      	ldr	r2, [r0, #8]
 8001266:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8001268:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800126a:	4302      	orrs	r2, r0
 800126c:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 800126e:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8001272:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001276:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8001278:	430a      	orrs	r2, r1
 800127a:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800127c:	695a      	ldr	r2, [r3, #20]
 800127e:	69a9      	ldr	r1, [r5, #24]
 8001280:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001284:	430a      	orrs	r2, r1
 8001286:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001288:	4a0d      	ldr	r2, [pc, #52]	; (80012c0 <UART_SetConfig+0x70>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d114      	bne.n	80012b8 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800128e:	f7ff fbff 	bl	8000a90 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001292:	4360      	muls	r0, r4
 8001294:	686c      	ldr	r4, [r5, #4]
 8001296:	2264      	movs	r2, #100	; 0x64
 8001298:	00a4      	lsls	r4, r4, #2
 800129a:	fbb0 f0f4 	udiv	r0, r0, r4
 800129e:	fbb0 f4f2 	udiv	r4, r0, r2
 80012a2:	fb02 0314 	mls	r3, r2, r4, r0
 80012a6:	011b      	lsls	r3, r3, #4
 80012a8:	3332      	adds	r3, #50	; 0x32
 80012aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80012ae:	6829      	ldr	r1, [r5, #0]
 80012b0:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80012b4:	608b      	str	r3, [r1, #8]
 80012b6:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 80012b8:	f7ff fbda 	bl	8000a70 <HAL_RCC_GetPCLK1Freq>
 80012bc:	e7e9      	b.n	8001292 <UART_SetConfig+0x42>
 80012be:	bf00      	nop
 80012c0:	40013800 	.word	0x40013800

080012c4 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80012c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012c6:	4604      	mov	r4, r0
 80012c8:	460e      	mov	r6, r1
 80012ca:	4617      	mov	r7, r2
 80012cc:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80012ce:	6821      	ldr	r1, [r4, #0]
 80012d0:	680b      	ldr	r3, [r1, #0]
 80012d2:	ea36 0303 	bics.w	r3, r6, r3
 80012d6:	d101      	bne.n	80012dc <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80012d8:	2000      	movs	r0, #0
}
 80012da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 80012dc:	1c6b      	adds	r3, r5, #1
 80012de:	d0f7      	beq.n	80012d0 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80012e0:	b995      	cbnz	r5, 8001308 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80012e2:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 80012e4:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80012e6:	68da      	ldr	r2, [r3, #12]
 80012e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80012ec:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80012ee:	695a      	ldr	r2, [r3, #20]
 80012f0:	f022 0201 	bic.w	r2, r2, #1
 80012f4:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80012f6:	2320      	movs	r3, #32
 80012f8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80012fc:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001300:	2300      	movs	r3, #0
 8001302:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001308:	f7fe ff6a 	bl	80001e0 <HAL_GetTick>
 800130c:	1bc0      	subs	r0, r0, r7
 800130e:	4285      	cmp	r5, r0
 8001310:	d2dd      	bcs.n	80012ce <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001312:	e7e6      	b.n	80012e2 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001314 <HAL_UART_Init>:
{
 8001314:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001316:	4604      	mov	r4, r0
 8001318:	b340      	cbz	r0, 800136c <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800131a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800131e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001322:	b91b      	cbnz	r3, 800132c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001324:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001328:	f001 fac0 	bl	80028ac <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800132c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800132e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001330:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001334:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001336:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001338:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800133c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800133e:	f7ff ff87 	bl	8001250 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001342:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001344:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001346:	691a      	ldr	r2, [r3, #16]
 8001348:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800134c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800134e:	695a      	ldr	r2, [r3, #20]
 8001350:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001354:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001356:	68da      	ldr	r2, [r3, #12]
 8001358:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800135c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800135e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001360:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001362:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001366:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800136a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800136c:	2001      	movs	r0, #1
}
 800136e:	bd10      	pop	{r4, pc}

08001370 <HAL_UART_Transmit>:
{
 8001370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001374:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001376:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 800137a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800137c:	2b20      	cmp	r3, #32
{
 800137e:	460d      	mov	r5, r1
 8001380:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001382:	d14e      	bne.n	8001422 <HAL_UART_Transmit+0xb2>
    if ((pData == NULL) || (Size == 0U))
 8001384:	2900      	cmp	r1, #0
 8001386:	d049      	beq.n	800141c <HAL_UART_Transmit+0xac>
 8001388:	2a00      	cmp	r2, #0
 800138a:	d047      	beq.n	800141c <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 800138c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001390:	2b01      	cmp	r3, #1
 8001392:	d046      	beq.n	8001422 <HAL_UART_Transmit+0xb2>
 8001394:	2301      	movs	r3, #1
 8001396:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800139a:	2300      	movs	r3, #0
 800139c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800139e:	2321      	movs	r3, #33	; 0x21
 80013a0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80013a4:	f7fe ff1c 	bl	80001e0 <HAL_GetTick>
 80013a8:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 80013aa:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80013ae:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80013b2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	b96b      	cbnz	r3, 80013d4 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80013b8:	463b      	mov	r3, r7
 80013ba:	4632      	mov	r2, r6
 80013bc:	2140      	movs	r1, #64	; 0x40
 80013be:	4620      	mov	r0, r4
 80013c0:	f7ff ff80 	bl	80012c4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80013c4:	b9a8      	cbnz	r0, 80013f2 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 80013c6:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80013c8:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 80013cc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 80013d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 80013d4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80013d6:	4632      	mov	r2, r6
      huart->TxXferCount--;
 80013d8:	3b01      	subs	r3, #1
 80013da:	b29b      	uxth	r3, r3
 80013dc:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80013de:	68a3      	ldr	r3, [r4, #8]
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80013e0:	2180      	movs	r1, #128	; 0x80
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80013e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80013e6:	4620      	mov	r0, r4
 80013e8:	463b      	mov	r3, r7
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80013ea:	d10e      	bne.n	800140a <HAL_UART_Transmit+0x9a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80013ec:	f7ff ff6a 	bl	80012c4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80013f0:	b110      	cbz	r0, 80013f8 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 80013f2:	2003      	movs	r0, #3
 80013f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80013f8:	882b      	ldrh	r3, [r5, #0]
 80013fa:	6822      	ldr	r2, [r4, #0]
 80013fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001400:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001402:	6923      	ldr	r3, [r4, #16]
 8001404:	b943      	cbnz	r3, 8001418 <HAL_UART_Transmit+0xa8>
          pData += 2U;
 8001406:	3502      	adds	r5, #2
 8001408:	e7d3      	b.n	80013b2 <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800140a:	f7ff ff5b 	bl	80012c4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800140e:	2800      	cmp	r0, #0
 8001410:	d1ef      	bne.n	80013f2 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001412:	6823      	ldr	r3, [r4, #0]
 8001414:	782a      	ldrb	r2, [r5, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	3501      	adds	r5, #1
 800141a:	e7ca      	b.n	80013b2 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800141c:	2001      	movs	r0, #1
 800141e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001422:	2002      	movs	r0, #2
}
 8001424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001428 <ILI9341_Write_Command>:



/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8001428:	b510      	push	{r4, lr}
 800142a:	4604      	mov	r4, r0
	DISP_DC_CMD;
 800142c:	2200      	movs	r2, #0
 800142e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001432:	480b      	ldr	r0, [pc, #44]	; (8001460 <ILI9341_Write_Command+0x38>)
 8001434:	f7ff f89e 	bl	8000574 <HAL_GPIO_WritePin>
	DISP_CS_SELECT;
 8001438:	2200      	movs	r2, #0
 800143a:	2102      	movs	r1, #2
 800143c:	4808      	ldr	r0, [pc, #32]	; (8001460 <ILI9341_Write_Command+0x38>)
 800143e:	f7ff f899 	bl	8000574 <HAL_GPIO_WritePin>
	DISP_SPI->DR = Command;
 8001442:	4b08      	ldr	r3, [pc, #32]	; (8001464 <ILI9341_Write_Command+0x3c>)
 8001444:	60dc      	str	r4, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8001446:	689a      	ldr	r2, [r3, #8]
 8001448:	0791      	lsls	r1, r2, #30
 800144a:	d5fc      	bpl.n	8001446 <ILI9341_Write_Command+0x1e>
	while(DISP_SPI->SR & SPI_SR_BSY);
 800144c:	689a      	ldr	r2, [r3, #8]
 800144e:	0612      	lsls	r2, r2, #24
 8001450:	d4fc      	bmi.n	800144c <ILI9341_Write_Command+0x24>
	DISP_CS_UNSELECT;
 8001452:	2201      	movs	r2, #1
}
 8001454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	DISP_CS_UNSELECT;
 8001458:	2102      	movs	r1, #2
 800145a:	4801      	ldr	r0, [pc, #4]	; (8001460 <ILI9341_Write_Command+0x38>)
 800145c:	f7ff b88a 	b.w	8000574 <HAL_GPIO_WritePin>
 8001460:	40010c00 	.word	0x40010c00
 8001464:	40013000 	.word	0x40013000

08001468 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8001468:	b510      	push	{r4, lr}
 800146a:	4604      	mov	r4, r0
	DISP_DC_DATA;
 800146c:	2201      	movs	r2, #1
 800146e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001472:	480b      	ldr	r0, [pc, #44]	; (80014a0 <ILI9341_Write_Data+0x38>)
 8001474:	f7ff f87e 	bl	8000574 <HAL_GPIO_WritePin>
	DISP_CS_SELECT;
 8001478:	2200      	movs	r2, #0
 800147a:	2102      	movs	r1, #2
 800147c:	4808      	ldr	r0, [pc, #32]	; (80014a0 <ILI9341_Write_Data+0x38>)
 800147e:	f7ff f879 	bl	8000574 <HAL_GPIO_WritePin>
	DISP_SPI->DR = Data;
 8001482:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <ILI9341_Write_Data+0x3c>)
 8001484:	60dc      	str	r4, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	0791      	lsls	r1, r2, #30
 800148a:	d5fc      	bpl.n	8001486 <ILI9341_Write_Data+0x1e>
	while(DISP_SPI->SR & SPI_SR_BSY);
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	0612      	lsls	r2, r2, #24
 8001490:	d4fc      	bmi.n	800148c <ILI9341_Write_Data+0x24>
	DISP_CS_UNSELECT;
 8001492:	2201      	movs	r2, #1
}
 8001494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	DISP_CS_UNSELECT;
 8001498:	2102      	movs	r1, #2
 800149a:	4801      	ldr	r0, [pc, #4]	; (80014a0 <ILI9341_Write_Data+0x38>)
 800149c:	f7ff b86a 	b.w	8000574 <HAL_GPIO_WritePin>
 80014a0:	40010c00 	.word	0x40010c00
 80014a4:	40013000 	.word	0x40013000

080014a8 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80014a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014ac:	4680      	mov	r8, r0
 80014ae:	460e      	mov	r6, r1
	DISP_DC_CMD;
 80014b0:	4840      	ldr	r0, [pc, #256]	; (80015b4 <ILI9341_Set_Address+0x10c>)
 80014b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
{
 80014b6:	4617      	mov	r7, r2
	DISP_DC_CMD;
 80014b8:	2200      	movs	r2, #0
{
 80014ba:	461d      	mov	r5, r3
	DISP_DC_CMD;
 80014bc:	f7ff f85a 	bl	8000574 <HAL_GPIO_WritePin>
	DISP_CS_SELECT;
 80014c0:	2200      	movs	r2, #0
 80014c2:	2102      	movs	r1, #2
 80014c4:	483b      	ldr	r0, [pc, #236]	; (80015b4 <ILI9341_Set_Address+0x10c>)
 80014c6:	f7ff f855 	bl	8000574 <HAL_GPIO_WritePin>

	DISP_SPI->DR = 0x2A;
 80014ca:	232a      	movs	r3, #42	; 0x2a
 80014cc:	4c3a      	ldr	r4, [pc, #232]	; (80015b8 <ILI9341_Set_Address+0x110>)
 80014ce:	60e3      	str	r3, [r4, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80014d0:	68a3      	ldr	r3, [r4, #8]
 80014d2:	079a      	lsls	r2, r3, #30
 80014d4:	d5fc      	bpl.n	80014d0 <ILI9341_Set_Address+0x28>
	while(DISP_SPI->SR & SPI_SR_BSY);
 80014d6:	68a3      	ldr	r3, [r4, #8]
 80014d8:	061b      	lsls	r3, r3, #24
 80014da:	d4fc      	bmi.n	80014d6 <ILI9341_Set_Address+0x2e>

	DISP_DC_DATA;
 80014dc:	2201      	movs	r2, #1
 80014de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014e2:	4834      	ldr	r0, [pc, #208]	; (80015b4 <ILI9341_Set_Address+0x10c>)
 80014e4:	f7ff f846 	bl	8000574 <HAL_GPIO_WritePin>
	DISP_SPI->DR = (uint8_t)(X1 >> 8);
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80014e8:	4a33      	ldr	r2, [pc, #204]	; (80015b8 <ILI9341_Set_Address+0x110>)
	DISP_SPI->DR = (uint8_t)(X1 >> 8);
 80014ea:	ea4f 2318 	mov.w	r3, r8, lsr #8
 80014ee:	4611      	mov	r1, r2
 80014f0:	60e3      	str	r3, [r4, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80014f2:	6893      	ldr	r3, [r2, #8]
 80014f4:	079c      	lsls	r4, r3, #30
 80014f6:	d5fc      	bpl.n	80014f2 <ILI9341_Set_Address+0x4a>
	DISP_SPI->DR = (uint8_t)X1;
 80014f8:	fa5f f388 	uxtb.w	r3, r8
 80014fc:	60d3      	str	r3, [r2, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80014fe:	688b      	ldr	r3, [r1, #8]
 8001500:	0798      	lsls	r0, r3, #30
 8001502:	d5fc      	bpl.n	80014fe <ILI9341_Set_Address+0x56>
	DISP_SPI->DR = (uint8_t)(X2 >> 8);
 8001504:	0a3b      	lsrs	r3, r7, #8
 8001506:	60cb      	str	r3, [r1, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8001508:	4b2b      	ldr	r3, [pc, #172]	; (80015b8 <ILI9341_Set_Address+0x110>)
 800150a:	461c      	mov	r4, r3
 800150c:	689a      	ldr	r2, [r3, #8]
 800150e:	0792      	lsls	r2, r2, #30
 8001510:	d5fc      	bpl.n	800150c <ILI9341_Set_Address+0x64>
	DISP_SPI->DR = (uint8_t)X2;
 8001512:	b2ff      	uxtb	r7, r7
 8001514:	60df      	str	r7, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8001516:	68a3      	ldr	r3, [r4, #8]
 8001518:	079b      	lsls	r3, r3, #30
 800151a:	d5fc      	bpl.n	8001516 <ILI9341_Set_Address+0x6e>
	while(DISP_SPI->SR & SPI_SR_BSY);
 800151c:	68a2      	ldr	r2, [r4, #8]
 800151e:	f012 0280 	ands.w	r2, r2, #128	; 0x80
 8001522:	d1fb      	bne.n	800151c <ILI9341_Set_Address+0x74>

	DISP_DC_CMD;
 8001524:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001528:	4822      	ldr	r0, [pc, #136]	; (80015b4 <ILI9341_Set_Address+0x10c>)
 800152a:	f7ff f823 	bl	8000574 <HAL_GPIO_WritePin>
	DISP_SPI->DR = 0x2B;
 800152e:	232b      	movs	r3, #43	; 0x2b
 8001530:	60e3      	str	r3, [r4, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8001532:	4b21      	ldr	r3, [pc, #132]	; (80015b8 <ILI9341_Set_Address+0x110>)
 8001534:	461c      	mov	r4, r3
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	0797      	lsls	r7, r2, #30
 800153a:	d5fc      	bpl.n	8001536 <ILI9341_Set_Address+0x8e>
	while(DISP_SPI->SR & SPI_SR_BSY);
 800153c:	68a3      	ldr	r3, [r4, #8]
 800153e:	0618      	lsls	r0, r3, #24
 8001540:	d4fc      	bmi.n	800153c <ILI9341_Set_Address+0x94>

	DISP_DC_DATA;
 8001542:	2201      	movs	r2, #1
 8001544:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001548:	481a      	ldr	r0, [pc, #104]	; (80015b4 <ILI9341_Set_Address+0x10c>)
 800154a:	f7ff f813 	bl	8000574 <HAL_GPIO_WritePin>
	DISP_SPI->DR = (uint8_t)(Y1 >> 8);
 800154e:	0a33      	lsrs	r3, r6, #8
 8001550:	60e3      	str	r3, [r4, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8001552:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <ILI9341_Set_Address+0x110>)
 8001554:	461a      	mov	r2, r3
 8001556:	6899      	ldr	r1, [r3, #8]
 8001558:	0789      	lsls	r1, r1, #30
 800155a:	d5fc      	bpl.n	8001556 <ILI9341_Set_Address+0xae>
	DISP_SPI->DR = (uint8_t)Y1;
 800155c:	b2f6      	uxtb	r6, r6
 800155e:	60de      	str	r6, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8001560:	6893      	ldr	r3, [r2, #8]
 8001562:	079f      	lsls	r7, r3, #30
 8001564:	d5fc      	bpl.n	8001560 <ILI9341_Set_Address+0xb8>
	DISP_SPI->DR = (uint8_t)(Y2 >> 8);
 8001566:	0a2b      	lsrs	r3, r5, #8
 8001568:	60d3      	str	r3, [r2, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 800156a:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <ILI9341_Set_Address+0x110>)
 800156c:	461c      	mov	r4, r3
 800156e:	689a      	ldr	r2, [r3, #8]
 8001570:	0796      	lsls	r6, r2, #30
 8001572:	d5fc      	bpl.n	800156e <ILI9341_Set_Address+0xc6>
	DISP_SPI->DR = (uint8_t)Y2;
 8001574:	b2ed      	uxtb	r5, r5
 8001576:	60dd      	str	r5, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8001578:	68a3      	ldr	r3, [r4, #8]
 800157a:	0798      	lsls	r0, r3, #30
 800157c:	d5fc      	bpl.n	8001578 <ILI9341_Set_Address+0xd0>
	while(DISP_SPI->SR & SPI_SR_BSY);
 800157e:	68a2      	ldr	r2, [r4, #8]
 8001580:	f012 0280 	ands.w	r2, r2, #128	; 0x80
 8001584:	d1fb      	bne.n	800157e <ILI9341_Set_Address+0xd6>

	DISP_DC_CMD;
 8001586:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800158a:	480a      	ldr	r0, [pc, #40]	; (80015b4 <ILI9341_Set_Address+0x10c>)
 800158c:	f7fe fff2 	bl	8000574 <HAL_GPIO_WritePin>
	DISP_SPI->DR = 0x2C;
 8001590:	232c      	movs	r3, #44	; 0x2c
 8001592:	60e3      	str	r3, [r4, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8001594:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <ILI9341_Set_Address+0x110>)
 8001596:	461a      	mov	r2, r3
 8001598:	6899      	ldr	r1, [r3, #8]
 800159a:	0789      	lsls	r1, r1, #30
 800159c:	d5fc      	bpl.n	8001598 <ILI9341_Set_Address+0xf0>
	while(DISP_SPI->SR & SPI_SR_BSY);
 800159e:	6893      	ldr	r3, [r2, #8]
 80015a0:	061b      	lsls	r3, r3, #24
 80015a2:	d4fc      	bmi.n	800159e <ILI9341_Set_Address+0xf6>
	DISP_CS_UNSELECT;
 80015a4:	2201      	movs	r2, #1
}
 80015a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	DISP_CS_UNSELECT;
 80015aa:	2102      	movs	r1, #2
 80015ac:	4801      	ldr	r0, [pc, #4]	; (80015b4 <ILI9341_Set_Address+0x10c>)
 80015ae:	f7fe bfe1 	b.w	8000574 <HAL_GPIO_WritePin>
 80015b2:	bf00      	nop
 80015b4:	40010c00 	.word	0x40010c00
 80015b8:	40013000 	.word	0x40013000

080015bc <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 80015bc:	b510      	push	{r4, lr}
	DISP_RST_RESET;
 80015be:	4c0d      	ldr	r4, [pc, #52]	; (80015f4 <ILI9341_Reset+0x38>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015c6:	4620      	mov	r0, r4
 80015c8:	f7fe ffd4 	bl	8000574 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80015cc:	20c8      	movs	r0, #200	; 0xc8
 80015ce:	f7fe fe0d 	bl	80001ec <HAL_Delay>
	DISP_CS_SELECT;
 80015d2:	2200      	movs	r2, #0
 80015d4:	2102      	movs	r1, #2
 80015d6:	4620      	mov	r0, r4
 80015d8:	f7fe ffcc 	bl	8000574 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80015dc:	20c8      	movs	r0, #200	; 0xc8
 80015de:	f7fe fe05 	bl	80001ec <HAL_Delay>
	DISP_RST_WORK;
 80015e2:	4620      	mov	r0, r4
}
 80015e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	DISP_RST_WORK;
 80015e8:	2201      	movs	r2, #1
 80015ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015ee:	f7fe bfc1 	b.w	8000574 <HAL_GPIO_WritePin>
 80015f2:	bf00      	nop
 80015f4:	40010c00 	.word	0x40010c00

080015f8 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation)
{
 80015f8:	b510      	push	{r4, lr}
	DISP_DC_CMD;
 80015fa:	2200      	movs	r2, #0
 80015fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
{
 8001600:	4604      	mov	r4, r0
	DISP_DC_CMD;
 8001602:	481a      	ldr	r0, [pc, #104]	; (800166c <ILI9341_Set_Rotation+0x74>)
 8001604:	f7fe ffb6 	bl	8000574 <HAL_GPIO_WritePin>
	DISP_CS_SELECT;
 8001608:	2200      	movs	r2, #0
 800160a:	2102      	movs	r1, #2
 800160c:	4817      	ldr	r0, [pc, #92]	; (800166c <ILI9341_Set_Rotation+0x74>)
 800160e:	f7fe ffb1 	bl	8000574 <HAL_GPIO_WritePin>
	DISP_SPI->DR = 0x36;
 8001612:	2236      	movs	r2, #54	; 0x36
 8001614:	4b16      	ldr	r3, [pc, #88]	; (8001670 <ILI9341_Set_Rotation+0x78>)
 8001616:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8001618:	689a      	ldr	r2, [r3, #8]
 800161a:	0791      	lsls	r1, r2, #30
 800161c:	d5fc      	bpl.n	8001618 <ILI9341_Set_Rotation+0x20>
	while(DISP_SPI->SR & SPI_SR_BSY);
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	0612      	lsls	r2, r2, #24
 8001622:	d4fc      	bmi.n	800161e <ILI9341_Set_Rotation+0x26>
	DISP_CS_UNSELECT;
 8001624:	2201      	movs	r2, #1
 8001626:	2102      	movs	r1, #2
 8001628:	4810      	ldr	r0, [pc, #64]	; (800166c <ILI9341_Set_Rotation+0x74>)
 800162a:	f7fe ffa3 	bl	8000574 <HAL_GPIO_WritePin>

	switch(Rotation)
 800162e:	2c03      	cmp	r4, #3
 8001630:	d80d      	bhi.n	800164e <ILI9341_Set_Rotation+0x56>
 8001632:	e8df f004 	tbb	[pc, r4]
 8001636:	0d02      	.short	0x0d02
 8001638:	1816      	.short	0x1816
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 800163a:	2048      	movs	r0, #72	; 0x48
			ILI9341_Write_Data(0x20|0x08);
			LCD_WIDTH  = 320;
			LCD_HEIGHT = 240;
			break;
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 800163c:	f7ff ff14 	bl	8001468 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8001640:	22f0      	movs	r2, #240	; 0xf0
 8001642:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <ILI9341_Set_Rotation+0x7c>)
 8001644:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001646:	f44f 72a0 	mov.w	r2, #320	; 0x140
			break;
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
			LCD_WIDTH  = 320;
			LCD_HEIGHT = 240;
 800164a:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <ILI9341_Set_Rotation+0x80>)
 800164c:	801a      	strh	r2, [r3, #0]
 800164e:	bd10      	pop	{r4, pc}
			ILI9341_Write_Data(0x20|0x08);
 8001650:	2028      	movs	r0, #40	; 0x28
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8001652:	f7ff ff09 	bl	8001468 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001656:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <ILI9341_Set_Rotation+0x7c>)
 800165c:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800165e:	22f0      	movs	r2, #240	; 0xf0
 8001660:	e7f3      	b.n	800164a <ILI9341_Set_Rotation+0x52>
			ILI9341_Write_Data(0x80|0x08);
 8001662:	2088      	movs	r0, #136	; 0x88
 8001664:	e7ea      	b.n	800163c <ILI9341_Set_Rotation+0x44>
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8001666:	20e8      	movs	r0, #232	; 0xe8
 8001668:	e7f3      	b.n	8001652 <ILI9341_Set_Rotation+0x5a>
 800166a:	bf00      	nop
 800166c:	40010c00 	.word	0x40010c00
 8001670:	40013000 	.word	0x40013000
 8001674:	2000000a 	.word	0x2000000a
 8001678:	20000008 	.word	0x20000008

0800167c <ILI9341_Init>:
}


/*Initialize LCD display*/
void ILI9341_Init(void)
{
 800167c:	b508      	push	{r3, lr}
	DISP_RST_WORK; /*Enable LCD display*/
 800167e:	2201      	movs	r2, #1
 8001680:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001684:	4884      	ldr	r0, [pc, #528]	; (8001898 <ILI9341_Init+0x21c>)
 8001686:	f7fe ff75 	bl	8000574 <HAL_GPIO_WritePin>
	//DISP_CS_SELECT; /* Initialize SPI */
	ILI9341_Reset();
 800168a:	f7ff ff97 	bl	80015bc <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_Write_Command(0x01);
 800168e:	2001      	movs	r0, #1
 8001690:	f7ff feca 	bl	8001428 <ILI9341_Write_Command>
	HAL_Delay(1000);
 8001694:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001698:	f7fe fda8 	bl	80001ec <HAL_Delay>

	//POWER CONTROL A
	ILI9341_Write_Command(0xCB);
 800169c:	20cb      	movs	r0, #203	; 0xcb
 800169e:	f7ff fec3 	bl	8001428 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x39);
 80016a2:	2039      	movs	r0, #57	; 0x39
 80016a4:	f7ff fee0 	bl	8001468 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2C);
 80016a8:	202c      	movs	r0, #44	; 0x2c
 80016aa:	f7ff fedd 	bl	8001468 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 80016ae:	2000      	movs	r0, #0
 80016b0:	f7ff feda 	bl	8001468 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x34);
 80016b4:	2034      	movs	r0, #52	; 0x34
 80016b6:	f7ff fed7 	bl	8001468 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x02);
 80016ba:	2002      	movs	r0, #2
 80016bc:	f7ff fed4 	bl	8001468 <ILI9341_Write_Data>

	//POWER CONTROL B
	ILI9341_Write_Command(0xCF);
 80016c0:	20cf      	movs	r0, #207	; 0xcf
 80016c2:	f7ff feb1 	bl	8001428 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 80016c6:	2000      	movs	r0, #0
 80016c8:	f7ff fece 	bl	8001468 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 80016cc:	20c1      	movs	r0, #193	; 0xc1
 80016ce:	f7ff fecb 	bl	8001468 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x30);
 80016d2:	2030      	movs	r0, #48	; 0x30
 80016d4:	f7ff fec8 	bl	8001468 <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL A
	ILI9341_Write_Command(0xE8);
 80016d8:	20e8      	movs	r0, #232	; 0xe8
 80016da:	f7ff fea5 	bl	8001428 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x85);
 80016de:	2085      	movs	r0, #133	; 0x85
 80016e0:	f7ff fec2 	bl	8001468 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 80016e4:	2000      	movs	r0, #0
 80016e6:	f7ff febf 	bl	8001468 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x78);
 80016ea:	2078      	movs	r0, #120	; 0x78
 80016ec:	f7ff febc 	bl	8001468 <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL B
	ILI9341_Write_Command(0xEA);
 80016f0:	20ea      	movs	r0, #234	; 0xea
 80016f2:	f7ff fe99 	bl	8001428 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 80016f6:	2000      	movs	r0, #0
 80016f8:	f7ff feb6 	bl	8001468 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 80016fc:	2000      	movs	r0, #0
 80016fe:	f7ff feb3 	bl	8001468 <ILI9341_Write_Data>

	//POWER ON SEQUENCE CONTROL
	ILI9341_Write_Command(0xED);
 8001702:	20ed      	movs	r0, #237	; 0xed
 8001704:	f7ff fe90 	bl	8001428 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x64);
 8001708:	2064      	movs	r0, #100	; 0x64
 800170a:	f7ff fead 	bl	8001468 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 800170e:	2003      	movs	r0, #3
 8001710:	f7ff feaa 	bl	8001468 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x12);
 8001714:	2012      	movs	r0, #18
 8001716:	f7ff fea7 	bl	8001468 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x81);
 800171a:	2081      	movs	r0, #129	; 0x81
 800171c:	f7ff fea4 	bl	8001468 <ILI9341_Write_Data>

	//PUMP RATIO CONTROL
	ILI9341_Write_Command(0xF7);
 8001720:	20f7      	movs	r0, #247	; 0xf7
 8001722:	f7ff fe81 	bl	8001428 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x20);
 8001726:	2020      	movs	r0, #32
 8001728:	f7ff fe9e 	bl	8001468 <ILI9341_Write_Data>

	//POWER CONTROL,VRH[5:0]
	ILI9341_Write_Command(0xC0);
 800172c:	20c0      	movs	r0, #192	; 0xc0
 800172e:	f7ff fe7b 	bl	8001428 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x23);
 8001732:	2023      	movs	r0, #35	; 0x23
 8001734:	f7ff fe98 	bl	8001468 <ILI9341_Write_Data>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_Write_Command(0xC1);
 8001738:	20c1      	movs	r0, #193	; 0xc1
 800173a:	f7ff fe75 	bl	8001428 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x10);
 800173e:	2010      	movs	r0, #16
 8001740:	f7ff fe92 	bl	8001468 <ILI9341_Write_Data>

	//VCM CONTROL
	ILI9341_Write_Command(0xC5);
 8001744:	20c5      	movs	r0, #197	; 0xc5
 8001746:	f7ff fe6f 	bl	8001428 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x3E);
 800174a:	203e      	movs	r0, #62	; 0x3e
 800174c:	f7ff fe8c 	bl	8001468 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x28);
 8001750:	2028      	movs	r0, #40	; 0x28
 8001752:	f7ff fe89 	bl	8001468 <ILI9341_Write_Data>

	//VCM CONTROL 2
	ILI9341_Write_Command(0xC7);
 8001756:	20c7      	movs	r0, #199	; 0xc7
 8001758:	f7ff fe66 	bl	8001428 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x86);
 800175c:	2086      	movs	r0, #134	; 0x86
 800175e:	f7ff fe83 	bl	8001468 <ILI9341_Write_Data>

	//MEMORY ACCESS CONTROL
	ILI9341_Write_Command(0x36);
 8001762:	2036      	movs	r0, #54	; 0x36
 8001764:	f7ff fe60 	bl	8001428 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x48);
 8001768:	2048      	movs	r0, #72	; 0x48
 800176a:	f7ff fe7d 	bl	8001468 <ILI9341_Write_Data>

	//PIXEL FORMAT
	ILI9341_Write_Command(0x3A);
 800176e:	203a      	movs	r0, #58	; 0x3a
 8001770:	f7ff fe5a 	bl	8001428 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x55);
 8001774:	2055      	movs	r0, #85	; 0x55
 8001776:	f7ff fe77 	bl	8001468 <ILI9341_Write_Data>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_Write_Command(0xB1);
 800177a:	20b1      	movs	r0, #177	; 0xb1
 800177c:	f7ff fe54 	bl	8001428 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8001780:	2000      	movs	r0, #0
 8001782:	f7ff fe71 	bl	8001468 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x18);
 8001786:	2018      	movs	r0, #24
 8001788:	f7ff fe6e 	bl	8001468 <ILI9341_Write_Data>

	//DISPLAY FUNCTION CONTROL
	ILI9341_Write_Command(0xB6);
 800178c:	20b6      	movs	r0, #182	; 0xb6
 800178e:	f7ff fe4b 	bl	8001428 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x08);
 8001792:	2008      	movs	r0, #8
 8001794:	f7ff fe68 	bl	8001468 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x82);
 8001798:	2082      	movs	r0, #130	; 0x82
 800179a:	f7ff fe65 	bl	8001468 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x27);
 800179e:	2027      	movs	r0, #39	; 0x27
 80017a0:	f7ff fe62 	bl	8001468 <ILI9341_Write_Data>

	//3GAMMA FUNCTION DISABLE
	ILI9341_Write_Command(0xF2);
 80017a4:	20f2      	movs	r0, #242	; 0xf2
 80017a6:	f7ff fe3f 	bl	8001428 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 80017aa:	2000      	movs	r0, #0
 80017ac:	f7ff fe5c 	bl	8001468 <ILI9341_Write_Data>

	//GAMMA CURVE SELECTED
	ILI9341_Write_Command(0x26);
 80017b0:	2026      	movs	r0, #38	; 0x26
 80017b2:	f7ff fe39 	bl	8001428 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x01);
 80017b6:	2001      	movs	r0, #1
 80017b8:	f7ff fe56 	bl	8001468 <ILI9341_Write_Data>

	//POSITIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE0);
 80017bc:	20e0      	movs	r0, #224	; 0xe0
 80017be:	f7ff fe33 	bl	8001428 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x0F);
 80017c2:	200f      	movs	r0, #15
 80017c4:	f7ff fe50 	bl	8001468 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 80017c8:	2031      	movs	r0, #49	; 0x31
 80017ca:	f7ff fe4d 	bl	8001468 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2B);
 80017ce:	202b      	movs	r0, #43	; 0x2b
 80017d0:	f7ff fe4a 	bl	8001468 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 80017d4:	200c      	movs	r0, #12
 80017d6:	f7ff fe47 	bl	8001468 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 80017da:	200e      	movs	r0, #14
 80017dc:	f7ff fe44 	bl	8001468 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 80017e0:	2008      	movs	r0, #8
 80017e2:	f7ff fe41 	bl	8001468 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x4E);
 80017e6:	204e      	movs	r0, #78	; 0x4e
 80017e8:	f7ff fe3e 	bl	8001468 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xF1);
 80017ec:	20f1      	movs	r0, #241	; 0xf1
 80017ee:	f7ff fe3b 	bl	8001468 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x37);
 80017f2:	2037      	movs	r0, #55	; 0x37
 80017f4:	f7ff fe38 	bl	8001468 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 80017f8:	2007      	movs	r0, #7
 80017fa:	f7ff fe35 	bl	8001468 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x10);
 80017fe:	2010      	movs	r0, #16
 8001800:	f7ff fe32 	bl	8001468 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8001804:	2003      	movs	r0, #3
 8001806:	f7ff fe2f 	bl	8001468 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 800180a:	200e      	movs	r0, #14
 800180c:	f7ff fe2c 	bl	8001468 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x09);
 8001810:	2009      	movs	r0, #9
 8001812:	f7ff fe29 	bl	8001468 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8001816:	2000      	movs	r0, #0
 8001818:	f7ff fe26 	bl	8001468 <ILI9341_Write_Data>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE1);
 800181c:	20e1      	movs	r0, #225	; 0xe1
 800181e:	f7ff fe03 	bl	8001428 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8001822:	2000      	movs	r0, #0
 8001824:	f7ff fe20 	bl	8001468 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8001828:	200e      	movs	r0, #14
 800182a:	f7ff fe1d 	bl	8001468 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x14);
 800182e:	2014      	movs	r0, #20
 8001830:	f7ff fe1a 	bl	8001468 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8001834:	2003      	movs	r0, #3
 8001836:	f7ff fe17 	bl	8001468 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x11);
 800183a:	2011      	movs	r0, #17
 800183c:	f7ff fe14 	bl	8001468 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 8001840:	2007      	movs	r0, #7
 8001842:	f7ff fe11 	bl	8001468 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8001846:	2031      	movs	r0, #49	; 0x31
 8001848:	f7ff fe0e 	bl	8001468 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 800184c:	20c1      	movs	r0, #193	; 0xc1
 800184e:	f7ff fe0b 	bl	8001468 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x48);
 8001852:	2048      	movs	r0, #72	; 0x48
 8001854:	f7ff fe08 	bl	8001468 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 8001858:	2008      	movs	r0, #8
 800185a:	f7ff fe05 	bl	8001468 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 800185e:	200f      	movs	r0, #15
 8001860:	f7ff fe02 	bl	8001468 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8001864:	200c      	movs	r0, #12
 8001866:	f7ff fdff 	bl	8001468 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 800186a:	2031      	movs	r0, #49	; 0x31
 800186c:	f7ff fdfc 	bl	8001468 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x36);
 8001870:	2036      	movs	r0, #54	; 0x36
 8001872:	f7ff fdf9 	bl	8001468 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8001876:	200f      	movs	r0, #15
 8001878:	f7ff fdf6 	bl	8001468 <ILI9341_Write_Data>

	//EXIT SLEEP
	ILI9341_Write_Command(0x11);
 800187c:	2011      	movs	r0, #17
 800187e:	f7ff fdd3 	bl	8001428 <ILI9341_Write_Command>
	HAL_Delay(120);
 8001882:	2078      	movs	r0, #120	; 0x78
 8001884:	f7fe fcb2 	bl	80001ec <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_Write_Command(0x29);
 8001888:	2029      	movs	r0, #41	; 0x29
 800188a:	f7ff fdcd 	bl	8001428 <ILI9341_Write_Command>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
}
 800188e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8001892:	2003      	movs	r0, #3
 8001894:	f7ff beb0 	b.w	80015f8 <ILI9341_Set_Rotation>
 8001898:	40010c00 	.word	0x40010c00

0800189c <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 800189c:	b538      	push	{r3, r4, r5, lr}
 800189e:	4605      	mov	r5, r0
	DISP_DC_DATA;
 80018a0:	2201      	movs	r2, #1
 80018a2:	4812      	ldr	r0, [pc, #72]	; (80018ec <ILI9341_Draw_Colour_Burst+0x50>)
{
 80018a4:	460c      	mov	r4, r1
	DISP_DC_DATA;
 80018a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018aa:	f7fe fe63 	bl	8000574 <HAL_GPIO_WritePin>
	DISP_CS_SELECT;
 80018ae:	2200      	movs	r2, #0
 80018b0:	2102      	movs	r1, #2
 80018b2:	480e      	ldr	r0, [pc, #56]	; (80018ec <ILI9341_Draw_Colour_Burst+0x50>)
 80018b4:	f7fe fe5e 	bl	8000574 <HAL_GPIO_WritePin>
 80018b8:	4b0d      	ldr	r3, [pc, #52]	; (80018f0 <ILI9341_Draw_Colour_Burst+0x54>)

	while(Size > 0)
	{
		DISP_SPI->DR = (Colour >> 8);
 80018ba:	0a2a      	lsrs	r2, r5, #8
	while(Size > 0)
 80018bc:	b964      	cbnz	r4, 80018d8 <ILI9341_Draw_Colour_Burst+0x3c>
		DISP_SPI->DR = Colour;
		while(!(DISP_SPI->SR & SPI_SR_TXE));
		Size--;
	}

	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	0791      	lsls	r1, r2, #30
 80018c2:	d5fc      	bpl.n	80018be <ILI9341_Draw_Colour_Burst+0x22>
	while(DISP_SPI->SR & SPI_SR_BSY);
 80018c4:	689a      	ldr	r2, [r3, #8]
 80018c6:	0612      	lsls	r2, r2, #24
 80018c8:	d4fc      	bmi.n	80018c4 <ILI9341_Draw_Colour_Burst+0x28>
	DISP_CS_UNSELECT;
 80018ca:	2201      	movs	r2, #1
}
 80018cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	DISP_CS_UNSELECT;
 80018d0:	2102      	movs	r1, #2
 80018d2:	4806      	ldr	r0, [pc, #24]	; (80018ec <ILI9341_Draw_Colour_Burst+0x50>)
 80018d4:	f7fe be4e 	b.w	8000574 <HAL_GPIO_WritePin>
		DISP_SPI->DR = (Colour >> 8);
 80018d8:	60da      	str	r2, [r3, #12]
		while(!(DISP_SPI->SR & SPI_SR_TXE));
 80018da:	6899      	ldr	r1, [r3, #8]
 80018dc:	0789      	lsls	r1, r1, #30
 80018de:	d5fc      	bpl.n	80018da <ILI9341_Draw_Colour_Burst+0x3e>
		DISP_SPI->DR = Colour;
 80018e0:	60dd      	str	r5, [r3, #12]
		while(!(DISP_SPI->SR & SPI_SR_TXE));
 80018e2:	6899      	ldr	r1, [r3, #8]
 80018e4:	0788      	lsls	r0, r1, #30
 80018e6:	d5fc      	bpl.n	80018e2 <ILI9341_Draw_Colour_Burst+0x46>
		Size--;
 80018e8:	3c01      	subs	r4, #1
 80018ea:	e7e7      	b.n	80018bc <ILI9341_Draw_Colour_Burst+0x20>
 80018ec:	40010c00 	.word	0x40010c00
 80018f0:	40013000 	.word	0x40013000

080018f4 <ILI9341_Fill_Screen>:
//////////////////////////////////////// USER FUNCTION //////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
void ILI9341_Fill_Screen(uint16_t Colour)
{
	ILI9341_Set_Address(0, 0, LCD_WIDTH, LCD_HEIGHT);
 80018f4:	2100      	movs	r1, #0
{
 80018f6:	b570      	push	{r4, r5, r6, lr}
 80018f8:	4606      	mov	r6, r0
	ILI9341_Set_Address(0, 0, LCD_WIDTH, LCD_HEIGHT);
 80018fa:	4d09      	ldr	r5, [pc, #36]	; (8001920 <ILI9341_Fill_Screen+0x2c>)
 80018fc:	4c09      	ldr	r4, [pc, #36]	; (8001924 <ILI9341_Fill_Screen+0x30>)
 80018fe:	882a      	ldrh	r2, [r5, #0]
 8001900:	8823      	ldrh	r3, [r4, #0]
 8001902:	4608      	mov	r0, r1
 8001904:	b29b      	uxth	r3, r3
 8001906:	b292      	uxth	r2, r2
 8001908:	f7ff fdce 	bl	80014a8 <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH * LCD_HEIGHT);
 800190c:	882b      	ldrh	r3, [r5, #0]
 800190e:	8821      	ldrh	r1, [r4, #0]
 8001910:	b29b      	uxth	r3, r3
 8001912:	b289      	uxth	r1, r1
 8001914:	4630      	mov	r0, r6
}
 8001916:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH * LCD_HEIGHT);
 800191a:	4359      	muls	r1, r3
 800191c:	f7ff bfbe 	b.w	800189c <ILI9341_Draw_Colour_Burst>
 8001920:	2000000a 	.word	0x2000000a
 8001924:	20000008 	.word	0x20000008

08001928 <ILI9341_Draw_Pixel>:

//DRAW PIXEL AT XY POSITION WITH SELECTED COLOUR
void ILI9341_Draw_Pixel(uint16_t X, uint16_t Y, uint16_t Colour)
{
 8001928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT)) return;
 800192a:	4b4f      	ldr	r3, [pc, #316]	; (8001a68 <ILI9341_Draw_Pixel+0x140>)
{
 800192c:	4605      	mov	r5, r0
	if((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT)) return;
 800192e:	881b      	ldrh	r3, [r3, #0]
{
 8001930:	460c      	mov	r4, r1
	if((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT)) return;
 8001932:	b29b      	uxth	r3, r3
 8001934:	4283      	cmp	r3, r0
{
 8001936:	4617      	mov	r7, r2
	if((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT)) return;
 8001938:	f240 8095 	bls.w	8001a66 <ILI9341_Draw_Pixel+0x13e>
 800193c:	4b4b      	ldr	r3, [pc, #300]	; (8001a6c <ILI9341_Draw_Pixel+0x144>)
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	b29b      	uxth	r3, r3
 8001942:	428b      	cmp	r3, r1
 8001944:	f240 808f 	bls.w	8001a66 <ILI9341_Draw_Pixel+0x13e>

	//ADDRESS
	DISP_DC_CMD;
 8001948:	2200      	movs	r2, #0
 800194a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800194e:	4848      	ldr	r0, [pc, #288]	; (8001a70 <ILI9341_Draw_Pixel+0x148>)
 8001950:	f7fe fe10 	bl	8000574 <HAL_GPIO_WritePin>
	DISP_CS_SELECT;
 8001954:	2200      	movs	r2, #0
 8001956:	2102      	movs	r1, #2
 8001958:	4845      	ldr	r0, [pc, #276]	; (8001a70 <ILI9341_Draw_Pixel+0x148>)
 800195a:	f7fe fe0b 	bl	8000574 <HAL_GPIO_WritePin>
	DISP_SPI->DR = 0x2A;
 800195e:	232a      	movs	r3, #42	; 0x2a
 8001960:	4e44      	ldr	r6, [pc, #272]	; (8001a74 <ILI9341_Draw_Pixel+0x14c>)
 8001962:	60f3      	str	r3, [r6, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8001964:	68b3      	ldr	r3, [r6, #8]
 8001966:	079b      	lsls	r3, r3, #30
 8001968:	d5fc      	bpl.n	8001964 <ILI9341_Draw_Pixel+0x3c>
	while(DISP_SPI->SR & SPI_SR_BSY);////////////
 800196a:	68b3      	ldr	r3, [r6, #8]
 800196c:	0618      	lsls	r0, r3, #24
 800196e:	d4fc      	bmi.n	800196a <ILI9341_Draw_Pixel+0x42>

	DISP_DC_DATA;
 8001970:	2201      	movs	r2, #1
 8001972:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001976:	483e      	ldr	r0, [pc, #248]	; (8001a70 <ILI9341_Draw_Pixel+0x148>)
 8001978:	f7fe fdfc 	bl	8000574 <HAL_GPIO_WritePin>
	DISP_SPI->DR = (X >> 8);
 800197c:	0a2b      	lsrs	r3, r5, #8
 800197e:	60f3      	str	r3, [r6, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8001980:	4b3c      	ldr	r3, [pc, #240]	; (8001a74 <ILI9341_Draw_Pixel+0x14c>)
 8001982:	461a      	mov	r2, r3
 8001984:	6899      	ldr	r1, [r3, #8]
 8001986:	0789      	lsls	r1, r1, #30
 8001988:	d5fc      	bpl.n	8001984 <ILI9341_Draw_Pixel+0x5c>
	DISP_SPI->DR = X;
 800198a:	60dd      	str	r5, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 800198c:	6893      	ldr	r3, [r2, #8]
 800198e:	079e      	lsls	r6, r3, #30
 8001990:	d5fc      	bpl.n	800198c <ILI9341_Draw_Pixel+0x64>
	DISP_SPI->DR = ((X + 1) >> 8);
 8001992:	3501      	adds	r5, #1
 8001994:	122b      	asrs	r3, r5, #8
 8001996:	60d3      	str	r3, [r2, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8001998:	4b36      	ldr	r3, [pc, #216]	; (8001a74 <ILI9341_Draw_Pixel+0x14c>)
 800199a:	461e      	mov	r6, r3
 800199c:	689a      	ldr	r2, [r3, #8]
 800199e:	0790      	lsls	r0, r2, #30
 80019a0:	d5fc      	bpl.n	800199c <ILI9341_Draw_Pixel+0x74>
	DISP_SPI->DR = (X + 1);
 80019a2:	60dd      	str	r5, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80019a4:	68b3      	ldr	r3, [r6, #8]
 80019a6:	0799      	lsls	r1, r3, #30
 80019a8:	d5fc      	bpl.n	80019a4 <ILI9341_Draw_Pixel+0x7c>
	while(DISP_SPI->SR & SPI_SR_BSY);
 80019aa:	68b2      	ldr	r2, [r6, #8]
 80019ac:	f012 0280 	ands.w	r2, r2, #128	; 0x80
 80019b0:	d1fb      	bne.n	80019aa <ILI9341_Draw_Pixel+0x82>

	//ADDRESS
	DISP_DC_CMD;
 80019b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019b6:	482e      	ldr	r0, [pc, #184]	; (8001a70 <ILI9341_Draw_Pixel+0x148>)
 80019b8:	f7fe fddc 	bl	8000574 <HAL_GPIO_WritePin>
	DISP_SPI->DR = 0x2B;
 80019bc:	232b      	movs	r3, #43	; 0x2b
 80019be:	60f3      	str	r3, [r6, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80019c0:	4b2c      	ldr	r3, [pc, #176]	; (8001a74 <ILI9341_Draw_Pixel+0x14c>)
 80019c2:	461d      	mov	r5, r3
 80019c4:	689a      	ldr	r2, [r3, #8]
 80019c6:	0792      	lsls	r2, r2, #30
 80019c8:	d5fc      	bpl.n	80019c4 <ILI9341_Draw_Pixel+0x9c>
	while(DISP_SPI->SR & SPI_SR_BSY);
 80019ca:	68ab      	ldr	r3, [r5, #8]
 80019cc:	061e      	lsls	r6, r3, #24
 80019ce:	d4fc      	bmi.n	80019ca <ILI9341_Draw_Pixel+0xa2>

	DISP_DC_DATA;
 80019d0:	2201      	movs	r2, #1
 80019d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019d6:	4826      	ldr	r0, [pc, #152]	; (8001a70 <ILI9341_Draw_Pixel+0x148>)
 80019d8:	f7fe fdcc 	bl	8000574 <HAL_GPIO_WritePin>
	DISP_SPI->DR = (Y >> 8);
 80019dc:	0a23      	lsrs	r3, r4, #8
 80019de:	60eb      	str	r3, [r5, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80019e0:	4b24      	ldr	r3, [pc, #144]	; (8001a74 <ILI9341_Draw_Pixel+0x14c>)
 80019e2:	461a      	mov	r2, r3
 80019e4:	6899      	ldr	r1, [r3, #8]
 80019e6:	0788      	lsls	r0, r1, #30
 80019e8:	d5fc      	bpl.n	80019e4 <ILI9341_Draw_Pixel+0xbc>
	DISP_SPI->DR = Y;
 80019ea:	60dc      	str	r4, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80019ec:	6893      	ldr	r3, [r2, #8]
 80019ee:	0799      	lsls	r1, r3, #30
 80019f0:	d5fc      	bpl.n	80019ec <ILI9341_Draw_Pixel+0xc4>
	DISP_SPI->DR = ((Y + 1) >> 8);
 80019f2:	3401      	adds	r4, #1
 80019f4:	1223      	asrs	r3, r4, #8
 80019f6:	60d3      	str	r3, [r2, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80019f8:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <ILI9341_Draw_Pixel+0x14c>)
 80019fa:	461d      	mov	r5, r3
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	0792      	lsls	r2, r2, #30
 8001a00:	d5fc      	bpl.n	80019fc <ILI9341_Draw_Pixel+0xd4>
	DISP_SPI->DR = (Y + 1);
 8001a02:	60dc      	str	r4, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8001a04:	68ab      	ldr	r3, [r5, #8]
 8001a06:	079b      	lsls	r3, r3, #30
 8001a08:	d5fc      	bpl.n	8001a04 <ILI9341_Draw_Pixel+0xdc>
	while(DISP_SPI->SR & SPI_SR_BSY);
 8001a0a:	68aa      	ldr	r2, [r5, #8]
 8001a0c:	f012 0280 	ands.w	r2, r2, #128	; 0x80
 8001a10:	d1fb      	bne.n	8001a0a <ILI9341_Draw_Pixel+0xe2>

	//ADDRESS
	DISP_DC_CMD;
 8001a12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a16:	4816      	ldr	r0, [pc, #88]	; (8001a70 <ILI9341_Draw_Pixel+0x148>)
 8001a18:	f7fe fdac 	bl	8000574 <HAL_GPIO_WritePin>
	DISP_SPI->DR = 0x2C;
 8001a1c:	232c      	movs	r3, #44	; 0x2c
 8001a1e:	60eb      	str	r3, [r5, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8001a20:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <ILI9341_Draw_Pixel+0x14c>)
 8001a22:	461c      	mov	r4, r3
 8001a24:	689a      	ldr	r2, [r3, #8]
 8001a26:	0796      	lsls	r6, r2, #30
 8001a28:	d5fc      	bpl.n	8001a24 <ILI9341_Draw_Pixel+0xfc>
	while(DISP_SPI->SR & SPI_SR_BSY);
 8001a2a:	68a3      	ldr	r3, [r4, #8]
 8001a2c:	061d      	lsls	r5, r3, #24
 8001a2e:	d4fc      	bmi.n	8001a2a <ILI9341_Draw_Pixel+0x102>

	DISP_DC_DATA;
 8001a30:	2201      	movs	r2, #1
 8001a32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a36:	480e      	ldr	r0, [pc, #56]	; (8001a70 <ILI9341_Draw_Pixel+0x148>)
 8001a38:	f7fe fd9c 	bl	8000574 <HAL_GPIO_WritePin>
	DISP_SPI->DR = (Colour >> 8);
 8001a3c:	0a3b      	lsrs	r3, r7, #8
 8001a3e:	60e3      	str	r3, [r4, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <ILI9341_Draw_Pixel+0x14c>)
 8001a42:	461a      	mov	r2, r3
 8001a44:	6899      	ldr	r1, [r3, #8]
 8001a46:	0788      	lsls	r0, r1, #30
 8001a48:	d5fc      	bpl.n	8001a44 <ILI9341_Draw_Pixel+0x11c>
	DISP_SPI->DR = Colour;
 8001a4a:	60df      	str	r7, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8001a4c:	6893      	ldr	r3, [r2, #8]
 8001a4e:	0799      	lsls	r1, r3, #30
 8001a50:	d5fc      	bpl.n	8001a4c <ILI9341_Draw_Pixel+0x124>
	while(DISP_SPI->SR & SPI_SR_BSY);
 8001a52:	6893      	ldr	r3, [r2, #8]
 8001a54:	061b      	lsls	r3, r3, #24
 8001a56:	d4fc      	bmi.n	8001a52 <ILI9341_Draw_Pixel+0x12a>

	DISP_CS_UNSELECT;
 8001a58:	2201      	movs	r2, #1
}
 8001a5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	DISP_CS_UNSELECT;
 8001a5e:	2102      	movs	r1, #2
 8001a60:	4803      	ldr	r0, [pc, #12]	; (8001a70 <ILI9341_Draw_Pixel+0x148>)
 8001a62:	f7fe bd87 	b.w	8000574 <HAL_GPIO_WritePin>
 8001a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a68:	2000000a 	.word	0x2000000a
 8001a6c:	20000008 	.word	0x20000008
 8001a70:	40010c00 	.word	0x40010c00
 8001a74:	40013000 	.word	0x40013000

08001a78 <ILI9341_Draw_Rectangle>:

//DRAW RECTANGLE OF SET SIZE AND HEIGTH AT X and Y POSITION WITH CUSTOM COLOUR
void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8001a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT)) return;
 8001a7a:	4f1a      	ldr	r7, [pc, #104]	; (8001ae4 <ILI9341_Draw_Rectangle+0x6c>)
{
 8001a7c:	461c      	mov	r4, r3
	if((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT)) return;
 8001a7e:	883b      	ldrh	r3, [r7, #0]
{
 8001a80:	4615      	mov	r5, r2
	if((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT)) return;
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	4283      	cmp	r3, r0
{
 8001a86:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	if((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT)) return;
 8001a8a:	d929      	bls.n	8001ae0 <ILI9341_Draw_Rectangle+0x68>
 8001a8c:	4b16      	ldr	r3, [pc, #88]	; (8001ae8 <ILI9341_Draw_Rectangle+0x70>)
 8001a8e:	881a      	ldrh	r2, [r3, #0]
 8001a90:	b292      	uxth	r2, r2
 8001a92:	428a      	cmp	r2, r1
 8001a94:	d924      	bls.n	8001ae0 <ILI9341_Draw_Rectangle+0x68>

	if((X + Width - 1) >= LCD_WIDTH)
 8001a96:	883a      	ldrh	r2, [r7, #0]
 8001a98:	eb00 0e05 	add.w	lr, r0, r5
 8001a9c:	b292      	uxth	r2, r2
 8001a9e:	4596      	cmp	lr, r2
	{
		Width = LCD_WIDTH - X;
 8001aa0:	bfc8      	it	gt
 8001aa2:	883d      	ldrhgt	r5, [r7, #0]
	}

	if((Y + Height - 1) >= LCD_HEIGHT)
 8001aa4:	881a      	ldrh	r2, [r3, #0]
		Width = LCD_WIDTH - X;
 8001aa6:	bfc8      	it	gt
 8001aa8:	1a2d      	subgt	r5, r5, r0
	if((Y + Height - 1) >= LCD_HEIGHT)
 8001aaa:	eb01 0704 	add.w	r7, r1, r4
 8001aae:	b292      	uxth	r2, r2
		Width = LCD_WIDTH - X;
 8001ab0:	bfc8      	it	gt
 8001ab2:	b2ad      	uxthgt	r5, r5
	if((Y + Height - 1) >= LCD_HEIGHT)
 8001ab4:	4297      	cmp	r7, r2
	{
		Height = LCD_HEIGHT - Y;
 8001ab6:	bfc8      	it	gt
 8001ab8:	881c      	ldrhgt	r4, [r3, #0]
	}

	ILI9341_Set_Address(X, Y, X + Width - 1, Y + Height - 1);
 8001aba:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
		Height = LCD_HEIGHT - Y;
 8001abe:	bfc4      	itt	gt
 8001ac0:	1a64      	subgt	r4, r4, r1
 8001ac2:	b2a4      	uxthgt	r4, r4
	ILI9341_Set_Address(X, Y, X + Width - 1, Y + Height - 1);
 8001ac4:	1e4b      	subs	r3, r1, #1
 8001ac6:	4423      	add	r3, r4
 8001ac8:	442a      	add	r2, r5
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	b292      	uxth	r2, r2
 8001ace:	f7ff fceb 	bl	80014a8 <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(Colour, Height * Width);
 8001ad2:	fb05 f104 	mul.w	r1, r5, r4
 8001ad6:	4630      	mov	r0, r6
}
 8001ad8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ILI9341_Draw_Colour_Burst(Colour, Height * Width);
 8001adc:	f7ff bede 	b.w	800189c <ILI9341_Draw_Colour_Burst>
 8001ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	2000000a 	.word	0x2000000a
 8001ae8:	20000008 	.word	0x20000008

08001aec <ILI9341_Draw_Horizontal_Line>:

//DRAW LINE FROM X,Y LOCATION to X+Width,Y LOCATION
void ILI9341_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Colour)
{
 8001aec:	b570      	push	{r4, r5, r6, lr}
 8001aee:	461d      	mov	r5, r3
	if((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT)) return;
 8001af0:	4b10      	ldr	r3, [pc, #64]	; (8001b34 <ILI9341_Draw_Horizontal_Line+0x48>)
{
 8001af2:	4614      	mov	r4, r2
	if((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT)) return;
 8001af4:	881a      	ldrh	r2, [r3, #0]
 8001af6:	b292      	uxth	r2, r2
 8001af8:	4282      	cmp	r2, r0
 8001afa:	d91a      	bls.n	8001b32 <ILI9341_Draw_Horizontal_Line+0x46>
 8001afc:	4a0e      	ldr	r2, [pc, #56]	; (8001b38 <ILI9341_Draw_Horizontal_Line+0x4c>)
 8001afe:	8812      	ldrh	r2, [r2, #0]
 8001b00:	b292      	uxth	r2, r2
 8001b02:	428a      	cmp	r2, r1
 8001b04:	d915      	bls.n	8001b32 <ILI9341_Draw_Horizontal_Line+0x46>

	if((X + Width - 1) >= LCD_WIDTH)
 8001b06:	881a      	ldrh	r2, [r3, #0]
 8001b08:	1906      	adds	r6, r0, r4
 8001b0a:	b292      	uxth	r2, r2
 8001b0c:	4296      	cmp	r6, r2
	{
		Width = LCD_WIDTH - X;
 8001b0e:	bfc8      	it	gt
 8001b10:	881c      	ldrhgt	r4, [r3, #0]
	}

	ILI9341_Set_Address(X, Y, X + Width - 1, Y);
 8001b12:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
		Width = LCD_WIDTH - X;
 8001b16:	bfc4      	itt	gt
 8001b18:	1a24      	subgt	r4, r4, r0
 8001b1a:	b2a4      	uxthgt	r4, r4
	ILI9341_Set_Address(X, Y, X + Width - 1, Y);
 8001b1c:	4422      	add	r2, r4
 8001b1e:	460b      	mov	r3, r1
 8001b20:	b292      	uxth	r2, r2
 8001b22:	f7ff fcc1 	bl	80014a8 <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(Colour, Width);
 8001b26:	4621      	mov	r1, r4
 8001b28:	4628      	mov	r0, r5
}
 8001b2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ILI9341_Draw_Colour_Burst(Colour, Width);
 8001b2e:	f7ff beb5 	b.w	800189c <ILI9341_Draw_Colour_Burst>
 8001b32:	bd70      	pop	{r4, r5, r6, pc}
 8001b34:	2000000a 	.word	0x2000000a
 8001b38:	20000008 	.word	0x20000008

08001b3c <ILI9341_Draw_Vertical_Line>:

//DRAW LINE FROM X,Y LOCATION to X,Y+Height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height, uint16_t Colour)
{
 8001b3c:	b570      	push	{r4, r5, r6, lr}
 8001b3e:	461d      	mov	r5, r3
	if((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT)) return;
 8001b40:	4b10      	ldr	r3, [pc, #64]	; (8001b84 <ILI9341_Draw_Vertical_Line+0x48>)
{
 8001b42:	4614      	mov	r4, r2
	if((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT)) return;
 8001b44:	881b      	ldrh	r3, [r3, #0]
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	4283      	cmp	r3, r0
 8001b4a:	d91a      	bls.n	8001b82 <ILI9341_Draw_Vertical_Line+0x46>
 8001b4c:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <ILI9341_Draw_Vertical_Line+0x4c>)
 8001b4e:	881a      	ldrh	r2, [r3, #0]
 8001b50:	b292      	uxth	r2, r2
 8001b52:	428a      	cmp	r2, r1
 8001b54:	d915      	bls.n	8001b82 <ILI9341_Draw_Vertical_Line+0x46>

	if((Y + Height - 1) >= LCD_HEIGHT)
 8001b56:	881a      	ldrh	r2, [r3, #0]
 8001b58:	190e      	adds	r6, r1, r4
 8001b5a:	b292      	uxth	r2, r2
 8001b5c:	4296      	cmp	r6, r2
	{
		Height = LCD_HEIGHT - Y;
 8001b5e:	bfc8      	it	gt
 8001b60:	881c      	ldrhgt	r4, [r3, #0]
	}

	ILI9341_Set_Address(X, Y, X, Y + Height - 1);
 8001b62:	f101 33ff 	add.w	r3, r1, #4294967295	; 0xffffffff
		Height = LCD_HEIGHT - Y;
 8001b66:	bfc4      	itt	gt
 8001b68:	1a64      	subgt	r4, r4, r1
 8001b6a:	b2a4      	uxthgt	r4, r4
	ILI9341_Set_Address(X, Y, X, Y + Height - 1);
 8001b6c:	4423      	add	r3, r4
 8001b6e:	4602      	mov	r2, r0
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	f7ff fc99 	bl	80014a8 <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(Colour, Height);
 8001b76:	4621      	mov	r1, r4
 8001b78:	4628      	mov	r0, r5
}
 8001b7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ILI9341_Draw_Colour_Burst(Colour, Height);
 8001b7e:	f7ff be8d 	b.w	800189c <ILI9341_Draw_Colour_Burst>
 8001b82:	bd70      	pop	{r4, r5, r6, pc}
 8001b84:	2000000a 	.word	0x2000000a
 8001b88:	20000008 	.word	0x20000008

08001b8c <ILI9341_Draw_Hollow_Circle>:

/*Draw hollow circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Hollow_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 8001b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int x = Radius - 1;
    int y = 0;
    int dx = 1;
    int dy = 1;
    int err = dx - (Radius << 1);
 8001b90:	0056      	lsls	r6, r2, #1
{
 8001b92:	b089      	sub	sp, #36	; 0x24
 8001b94:	461f      	mov	r7, r3
	int x = Radius - 1;
 8001b96:	1e53      	subs	r3, r2, #1

        if (err > 0)
        {
            x--;
            dx += 2;
            err += (-Radius << 1) + dx;
 8001b98:	4252      	negs	r2, r2
	int x = Radius - 1;
 8001b9a:	9300      	str	r3, [sp, #0]
            err += (-Radius << 1) + dx;
 8001b9c:	0053      	lsls	r3, r2, #1
 8001b9e:	9306      	str	r3, [sp, #24]
    int dy = 1;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	9302      	str	r3, [sp, #8]
    int dx = 1;
 8001ba4:	9303      	str	r3, [sp, #12]
    int y = 0;
 8001ba6:	2300      	movs	r3, #0
{
 8001ba8:	4680      	mov	r8, r0
 8001baa:	4689      	mov	r9, r1
    int err = dx - (Radius << 1);
 8001bac:	f1c6 0601 	rsb	r6, r6, #1
    int y = 0;
 8001bb0:	9301      	str	r3, [sp, #4]
    while (x >= y)
 8001bb2:	9b00      	ldr	r3, [sp, #0]
 8001bb4:	9a01      	ldr	r2, [sp, #4]
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	da02      	bge.n	8001bc0 <ILI9341_Draw_Hollow_Circle+0x34>
        }
    }
}
 8001bba:	b009      	add	sp, #36	; 0x24
 8001bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ILI9341_Draw_Pixel(X + x, Y + y, Colour);
 8001bc0:	f8bd 5000 	ldrh.w	r5, [sp]
 8001bc4:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 8001bc8:	eb05 0308 	add.w	r3, r5, r8
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	9304      	str	r3, [sp, #16]
 8001bd0:	eb04 0309 	add.w	r3, r4, r9
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	463a      	mov	r2, r7
 8001bda:	9804      	ldr	r0, [sp, #16]
 8001bdc:	9307      	str	r3, [sp, #28]
        ILI9341_Draw_Pixel(X + y, Y + x, Colour);
 8001bde:	eb05 0b09 	add.w	fp, r5, r9
        ILI9341_Draw_Pixel(X + x, Y + y, Colour);
 8001be2:	f7ff fea1 	bl	8001928 <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X + y, Y + x, Colour);
 8001be6:	eb08 0204 	add.w	r2, r8, r4
 8001bea:	b293      	uxth	r3, r2
 8001bec:	fa1f fb8b 	uxth.w	fp, fp
        ILI9341_Draw_Pixel(X - y, Y + x, Colour);
 8001bf0:	eba8 0a04 	sub.w	sl, r8, r4
        ILI9341_Draw_Pixel(X + y, Y + x, Colour);
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	4659      	mov	r1, fp
 8001bf8:	463a      	mov	r2, r7
        ILI9341_Draw_Pixel(X - y, Y + x, Colour);
 8001bfa:	fa1f fa8a 	uxth.w	sl, sl
        ILI9341_Draw_Pixel(X + y, Y + x, Colour);
 8001bfe:	9305      	str	r3, [sp, #20]
 8001c00:	f7ff fe92 	bl	8001928 <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X - y, Y + x, Colour);
 8001c04:	4659      	mov	r1, fp
 8001c06:	463a      	mov	r2, r7
 8001c08:	4650      	mov	r0, sl
 8001c0a:	f7ff fe8d 	bl	8001928 <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X - x, Y + y, Colour);
 8001c0e:	eba8 0b05 	sub.w	fp, r8, r5
 8001c12:	9b07      	ldr	r3, [sp, #28]
 8001c14:	fa1f fb8b 	uxth.w	fp, fp
        ILI9341_Draw_Pixel(X - x, Y - y, Colour);
 8001c18:	eba9 0404 	sub.w	r4, r9, r4
        ILI9341_Draw_Pixel(X - x, Y + y, Colour);
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	463a      	mov	r2, r7
 8001c20:	4658      	mov	r0, fp
        ILI9341_Draw_Pixel(X - x, Y - y, Colour);
 8001c22:	b2a4      	uxth	r4, r4
        ILI9341_Draw_Pixel(X - y, Y - x, Colour);
 8001c24:	eba9 0505 	sub.w	r5, r9, r5
        ILI9341_Draw_Pixel(X - x, Y + y, Colour);
 8001c28:	f7ff fe7e 	bl	8001928 <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X - y, Y - x, Colour);
 8001c2c:	b2ad      	uxth	r5, r5
        ILI9341_Draw_Pixel(X - x, Y - y, Colour);
 8001c2e:	463a      	mov	r2, r7
 8001c30:	4621      	mov	r1, r4
 8001c32:	4658      	mov	r0, fp
 8001c34:	f7ff fe78 	bl	8001928 <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X - y, Y - x, Colour);
 8001c38:	463a      	mov	r2, r7
 8001c3a:	4629      	mov	r1, r5
 8001c3c:	4650      	mov	r0, sl
 8001c3e:	f7ff fe73 	bl	8001928 <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X + y, Y - x, Colour);
 8001c42:	463a      	mov	r2, r7
 8001c44:	4629      	mov	r1, r5
 8001c46:	9805      	ldr	r0, [sp, #20]
 8001c48:	f7ff fe6e 	bl	8001928 <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X + x, Y - y, Colour);
 8001c4c:	463a      	mov	r2, r7
 8001c4e:	4621      	mov	r1, r4
 8001c50:	9804      	ldr	r0, [sp, #16]
 8001c52:	f7ff fe69 	bl	8001928 <ILI9341_Draw_Pixel>
        if (err <= 0)
 8001c56:	2e00      	cmp	r6, #0
 8001c58:	dc09      	bgt.n	8001c6e <ILI9341_Draw_Hollow_Circle+0xe2>
            y++;
 8001c5a:	9b01      	ldr	r3, [sp, #4]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	9301      	str	r3, [sp, #4]
            err += dy;
 8001c60:	9b02      	ldr	r3, [sp, #8]
 8001c62:	441e      	add	r6, r3
        if (err > 0)
 8001c64:	2e00      	cmp	r6, #0
            dy += 2;
 8001c66:	f103 0302 	add.w	r3, r3, #2
 8001c6a:	9302      	str	r3, [sp, #8]
        if (err > 0)
 8001c6c:	dda1      	ble.n	8001bb2 <ILI9341_Draw_Hollow_Circle+0x26>
            x--;
 8001c6e:	9b00      	ldr	r3, [sp, #0]
            err += (-Radius << 1) + dx;
 8001c70:	9a06      	ldr	r2, [sp, #24]
            x--;
 8001c72:	3b01      	subs	r3, #1
 8001c74:	9300      	str	r3, [sp, #0]
            dx += 2;
 8001c76:	9b03      	ldr	r3, [sp, #12]
 8001c78:	3302      	adds	r3, #2
 8001c7a:	9303      	str	r3, [sp, #12]
            err += (-Radius << 1) + dx;
 8001c7c:	4413      	add	r3, r2
 8001c7e:	441e      	add	r6, r3
 8001c80:	e797      	b.n	8001bb2 <ILI9341_Draw_Hollow_Circle+0x26>

08001c82 <ILI9341_Draw_Filled_Circle>:

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 8001c82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int x = Radius;
	int y = 0;
	int xChange = 1 - (Radius << 1);
	int yChange = 0;
	int radiusError = 0;
 8001c86:	2600      	movs	r6, #0
{
 8001c88:	4607      	mov	r7, r0
 8001c8a:	4688      	mov	r8, r1
	int x = Radius;
 8001c8c:	4615      	mov	r5, r2
	int y = 0;
 8001c8e:	4634      	mov	r4, r6
{
 8001c90:	4699      	mov	r9, r3
	int xChange = 1 - (Radius << 1);
 8001c92:	0053      	lsls	r3, r2, #1
{
 8001c94:	b085      	sub	sp, #20
	int xChange = 1 - (Radius << 1);
 8001c96:	f1c3 0301 	rsb	r3, r3, #1
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	0063      	lsls	r3, r4, #1
 8001c9e:	fa1f fb84 	uxth.w	fp, r4
 8001ca2:	9301      	str	r3, [sp, #4]
	
	while (x >= y)
	{
		for (int i = X - x; i <= X + x; i++)
		{
			ILI9341_Draw_Pixel(i, Y + y,Colour);
 8001ca4:	eb08 030b 	add.w	r3, r8, fp
 8001ca8:	b29b      	uxth	r3, r3
		for (int i = X - x; i <= X + x; i++)
 8001caa:	eba7 0a05 	sub.w	sl, r7, r5
			ILI9341_Draw_Pixel(i, Y + y,Colour);
 8001cae:	9302      	str	r3, [sp, #8]
		for (int i = X - x; i <= X + x; i++)
 8001cb0:	197b      	adds	r3, r7, r5
 8001cb2:	459a      	cmp	sl, r3
 8001cb4:	dd1c      	ble.n	8001cf0 <ILI9341_Draw_Filled_Circle+0x6e>
			ILI9341_Draw_Pixel(i, Y - y,Colour);
		}

		for (int i = X - y; i <= X + y; i++)
		{
			ILI9341_Draw_Pixel(i, Y + x,Colour);
 8001cb6:	fa1f fb85 	uxth.w	fp, r5
 8001cba:	eb08 030b 	add.w	r3, r8, fp
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	eba7 0a04 	sub.w	sl, r7, r4
 8001cc4:	9302      	str	r3, [sp, #8]
		for (int i = X - y; i <= X + y; i++)
 8001cc6:	193b      	adds	r3, r7, r4
 8001cc8:	459a      	cmp	sl, r3
 8001cca:	dd24      	ble.n	8001d16 <ILI9341_Draw_Filled_Circle+0x94>
			ILI9341_Draw_Pixel(i, Y - x,Colour);
		}

		y++;
		radiusError += yChange;
 8001ccc:	9b01      	ldr	r3, [sp, #4]
		y++;
 8001cce:	3401      	adds	r4, #1
		radiusError += yChange;
 8001cd0:	441e      	add	r6, r3
		yChange += 2;

		if(((radiusError << 1) + xChange) > 0)
 8001cd2:	9b00      	ldr	r3, [sp, #0]
 8001cd4:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	dd04      	ble.n	8001ce6 <ILI9341_Draw_Filled_Circle+0x64>
		{
			x--;
			radiusError += xChange;
 8001cdc:	9b00      	ldr	r3, [sp, #0]
			x--;
 8001cde:	3d01      	subs	r5, #1
			radiusError += xChange;
 8001ce0:	441e      	add	r6, r3
			xChange += 2;
 8001ce2:	3302      	adds	r3, #2
 8001ce4:	9300      	str	r3, [sp, #0]
	while (x >= y)
 8001ce6:	42a5      	cmp	r5, r4
 8001ce8:	dad8      	bge.n	8001c9c <ILI9341_Draw_Filled_Circle+0x1a>
		}
	}
}
 8001cea:	b005      	add	sp, #20
 8001cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ILI9341_Draw_Pixel(i, Y + y,Colour);
 8001cf0:	fa1f f38a 	uxth.w	r3, sl
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	464a      	mov	r2, r9
 8001cf8:	9902      	ldr	r1, [sp, #8]
 8001cfa:	9303      	str	r3, [sp, #12]
 8001cfc:	f7ff fe14 	bl	8001928 <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(i, Y - y,Colour);
 8001d00:	9b03      	ldr	r3, [sp, #12]
 8001d02:	eba8 010b 	sub.w	r1, r8, fp
 8001d06:	464a      	mov	r2, r9
 8001d08:	b289      	uxth	r1, r1
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff fe0c 	bl	8001928 <ILI9341_Draw_Pixel>
		for (int i = X - x; i <= X + x; i++)
 8001d10:	f10a 0a01 	add.w	sl, sl, #1
 8001d14:	e7cc      	b.n	8001cb0 <ILI9341_Draw_Filled_Circle+0x2e>
			ILI9341_Draw_Pixel(i, Y + x,Colour);
 8001d16:	fa1f f38a 	uxth.w	r3, sl
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	464a      	mov	r2, r9
 8001d1e:	9902      	ldr	r1, [sp, #8]
 8001d20:	9303      	str	r3, [sp, #12]
 8001d22:	f7ff fe01 	bl	8001928 <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(i, Y - x,Colour);
 8001d26:	9b03      	ldr	r3, [sp, #12]
 8001d28:	eba8 010b 	sub.w	r1, r8, fp
 8001d2c:	464a      	mov	r2, r9
 8001d2e:	b289      	uxth	r1, r1
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff fdf9 	bl	8001928 <ILI9341_Draw_Pixel>
		for (int i = X - y; i <= X + y; i++)
 8001d36:	f10a 0a01 	add.w	sl, sl, #1
 8001d3a:	e7c4      	b.n	8001cc6 <ILI9341_Draw_Filled_Circle+0x44>

08001d3c <ILI9341_Draw_Hollow_Rectangle_Coord>:

/*Draw a hollow rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Hollow_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 8001d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d40:	4606      	mov	r6, r0
 8001d42:	469a      	mov	sl, r3
 8001d44:	4689      	mov	r9, r1
 8001d46:	4617      	mov	r7, r2
	
	Calc_Negative = Y1 - Y0;
	if(Calc_Negative < 0) Negative_Y = 1;
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 8001d48:	1a15      	subs	r5, r2, r0
	{
		X_length = X1 - X0;		
	}
	else
	{
		X_length = X0 - X1;		
 8001d4a:	bf48      	it	mi
 8001d4c:	1a85      	submi	r5, r0, r2
{
 8001d4e:	f8bd 8020 	ldrh.w	r8, [sp, #32]
		X_length = X0 - X1;		
 8001d52:	b2ad      	uxth	r5, r5
	Calc_Negative = Y1 - Y0;
 8001d54:	1a5c      	subs	r4, r3, r1
	}

	ILI9341_Draw_Horizontal_Line(X0, Y0, X_length, Colour);
 8001d56:	462a      	mov	r2, r5
 8001d58:	4643      	mov	r3, r8
 8001d5a:	f7ff fec7 	bl	8001aec <ILI9341_Draw_Horizontal_Line>
	ILI9341_Draw_Horizontal_Line(X0, Y1, X_length, Colour);
 8001d5e:	4643      	mov	r3, r8
 8001d60:	462a      	mov	r2, r5
 8001d62:	4651      	mov	r1, sl
 8001d64:	4630      	mov	r0, r6
 8001d66:	f7ff fec1 	bl	8001aec <ILI9341_Draw_Horizontal_Line>
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 8001d6a:	2c00      	cmp	r4, #0
	{
		Y_length = Y1 - Y0;		
	}
	else
	{
		Y_length = Y0 - Y1;		
 8001d6c:	bfb8      	it	lt
 8001d6e:	eba9 040a 	sublt.w	r4, r9, sl
 8001d72:	b2a4      	uxth	r4, r4
	}

	ILI9341_Draw_Vertical_Line(X0, Y0, Y_length, Colour);
 8001d74:	4643      	mov	r3, r8
 8001d76:	4622      	mov	r2, r4
 8001d78:	4649      	mov	r1, r9
 8001d7a:	4630      	mov	r0, r6
 8001d7c:	f7ff fede 	bl	8001b3c <ILI9341_Draw_Vertical_Line>
	ILI9341_Draw_Vertical_Line(X1, Y0, Y_length, Colour);
 8001d80:	4643      	mov	r3, r8
 8001d82:	4622      	mov	r2, r4
 8001d84:	4649      	mov	r1, r9
 8001d86:	4638      	mov	r0, r7
 8001d88:	f7ff fed8 	bl	8001b3c <ILI9341_Draw_Vertical_Line>
	
	if((X_length > 0)||(Y_length > 0)) 
 8001d8c:	b905      	cbnz	r5, 8001d90 <ILI9341_Draw_Hollow_Rectangle_Coord+0x54>
 8001d8e:	b134      	cbz	r4, 8001d9e <ILI9341_Draw_Hollow_Rectangle_Coord+0x62>
	{
		ILI9341_Draw_Pixel(X1, Y1, Colour);
 8001d90:	4642      	mov	r2, r8
 8001d92:	4651      	mov	r1, sl
 8001d94:	4638      	mov	r0, r7
	}
}
 8001d96:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		ILI9341_Draw_Pixel(X1, Y1, Colour);
 8001d9a:	f7ff bdc5 	b.w	8001928 <ILI9341_Draw_Pixel>
 8001d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001da2 <ILI9341_Draw_Filled_Rectangle_Coord>:

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 8001da2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001da4:	4616      	mov	r6, r2
 8001da6:	461f      	mov	r7, r3
	
	Calc_Negative = Y1 - Y0;
	if(Calc_Negative < 0) Negative_Y = 1;
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 8001da8:	1a15      	subs	r5, r2, r0
	Calc_Negative = Y1 - Y0;
 8001daa:	eba3 0401 	sub.w	r4, r3, r1
		X_length = X1 - X0;
		X0_true = X0;
	}
	else
	{
		X_length = X0 - X1;
 8001dae:	bf48      	it	mi
 8001db0:	1b80      	submi	r0, r0, r6
{
 8001db2:	f8bd e014 	ldrh.w	lr, [sp, #20]
		X_length = X1 - X0;
 8001db6:	bf52      	itee	pl
 8001db8:	b2aa      	uxthpl	r2, r5
		X_length = X0 - X1;
 8001dba:	b282      	uxthmi	r2, r0
		X0_true = X1;
 8001dbc:	4630      	movmi	r0, r6
	}
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 8001dbe:	2c00      	cmp	r4, #0
		Y_length = Y1 - Y0;
		Y0_true = Y0;		
	}
	else
	{
		Y_length = Y0 - Y1;
 8001dc0:	bfb6      	itet	lt
 8001dc2:	1bc9      	sublt	r1, r1, r7
		Y_length = Y1 - Y0;
 8001dc4:	b2a3      	uxthge	r3, r4
		Y_length = Y0 - Y1;
 8001dc6:	b28b      	uxthlt	r3, r1
		Y0_true = Y1;	
	}
	
	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);	
 8001dc8:	f8cd e014 	str.w	lr, [sp, #20]
		Y0_true = Y1;	
 8001dcc:	bfb8      	it	lt
 8001dce:	4639      	movlt	r1, r7
}
 8001dd0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);	
 8001dd4:	f7ff be50 	b.w	8001a78 <ILI9341_Draw_Rectangle>

08001dd8 <ILI9341_Random_line>:

//////////////////////////////////////////////////////////////////////////////////////////////
void ILI9341_Random_line(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8001dd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ddc:	4616      	mov	r6, r2
	// Bresenham's algorithm - thx wikpedia

	int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 8001dde:	1a5f      	subs	r7, r3, r1
 8001de0:	eba6 0800 	sub.w	r8, r6, r0
 8001de4:	2f00      	cmp	r7, #0
 8001de6:	bfb8      	it	lt
 8001de8:	427f      	neglt	r7, r7
 8001dea:	f1b8 0f00 	cmp.w	r8, #0
 8001dee:	bfb8      	it	lt
 8001df0:	f1c8 0800 	rsblt	r8, r8, #0

	if(steep)
 8001df4:	4547      	cmp	r7, r8
{
 8001df6:	4604      	mov	r4, r0
 8001df8:	460d      	mov	r5, r1
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	f8bd b030 	ldrh.w	fp, [sp, #48]	; 0x30
	if(steep)
 8001e00:	dd04      	ble.n	8001e0c <ILI9341_Random_line+0x34>
 8001e02:	4633      	mov	r3, r6
	{
		swap(x1, y1);
 8001e04:	460c      	mov	r4, r1
		swap(x2, y2);
 8001e06:	4616      	mov	r6, r2
		swap(x1, y1);
 8001e08:	4605      	mov	r5, r0
		swap(x2, y2);
 8001e0a:	461a      	mov	r2, r3
	}

	if(x1 > x2)
 8001e0c:	42b4      	cmp	r4, r6
 8001e0e:	dd05      	ble.n	8001e1c <ILI9341_Random_line+0x44>
 8001e10:	462b      	mov	r3, r5
	{
		swap(x1, x2);
		swap(y1, y2);
 8001e12:	4615      	mov	r5, r2
 8001e14:	461a      	mov	r2, r3
	if(x1 > x2)
 8001e16:	4623      	mov	r3, r4
 8001e18:	4634      	mov	r4, r6
 8001e1a:	461e      	mov	r6, r3
	}

	int16_t dx, dy;

	dx = x2 - x1;
	dy = abs(y2 - y1);
 8001e1c:	eba2 0a05 	sub.w	sl, r2, r5
 8001e20:	4653      	mov	r3, sl
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	bfb8      	it	lt
 8001e26:	425b      	neglt	r3, r3
 8001e28:	9301      	str	r3, [sp, #4]

	int16_t err = dx / 2;
 8001e2a:	2302      	movs	r3, #2
	dx = x2 - x1;
 8001e2c:	eba6 0904 	sub.w	r9, r6, r4
 8001e30:	fa1f f989 	uxth.w	r9, r9
	int16_t err = dx / 2;
 8001e34:	fa0f f189 	sxth.w	r1, r9
 8001e38:	fb91 faf3 	sdiv	sl, r1, r3
	{
		ystep = 1;
	}
	else
	{
		ystep = -1;
 8001e3c:	4295      	cmp	r5, r2
 8001e3e:	bfb4      	ite	lt
 8001e40:	2301      	movlt	r3, #1
 8001e42:	f04f 33ff 	movge.w	r3, #4294967295	; 0xffffffff
 8001e46:	9300      	str	r3, [sp, #0]
	}

	for(; x1 <= x2; x1++)
 8001e48:	42b4      	cmp	r4, r6
 8001e4a:	dd02      	ble.n	8001e52 <ILI9341_Random_line+0x7a>
		{
			y1 += ystep;
			err += dx;
		}
	}
}
 8001e4c:	b003      	add	sp, #12
 8001e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(steep)
 8001e52:	4547      	cmp	r7, r8
 8001e54:	b2a0      	uxth	r0, r4
 8001e56:	fa1f fe85 	uxth.w	lr, r5
			ILI9341_Draw_Pixel(y1, x1, color);
 8001e5a:	bfc8      	it	gt
 8001e5c:	4601      	movgt	r1, r0
 8001e5e:	465a      	mov	r2, fp
 8001e60:	bfcc      	ite	gt
 8001e62:	4670      	movgt	r0, lr
			ILI9341_Draw_Pixel(x1, y1, color);
 8001e64:	4671      	movle	r1, lr
 8001e66:	f7ff fd5f 	bl	8001928 <ILI9341_Draw_Pixel>
		err -= dy;
 8001e6a:	9b01      	ldr	r3, [sp, #4]
 8001e6c:	ebaa 0303 	sub.w	r3, sl, r3
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	fa0f fa82 	sxth.w	sl, r2
		if(err < 0)
 8001e76:	f1ba 0f00 	cmp.w	sl, #0
 8001e7a:	da06      	bge.n	8001e8a <ILI9341_Random_line+0xb2>
			y1 += ystep;
 8001e7c:	9b00      	ldr	r3, [sp, #0]
 8001e7e:	441d      	add	r5, r3
			err += dx;
 8001e80:	eb09 0302 	add.w	r3, r9, r2
			y1 += ystep;
 8001e84:	b22d      	sxth	r5, r5
			err += dx;
 8001e86:	fa0f fa83 	sxth.w	sl, r3
 8001e8a:	3401      	adds	r4, #1
 8001e8c:	b224      	sxth	r4, r4
 8001e8e:	e7db      	b.n	8001e48 <ILI9341_Random_line+0x70>

08001e90 <ILI9341_Draw_Image>:

/////////////////////////////////////// Картинка из массива ///////////////////////////////////////////////////
void ILI9341_Draw_Image(const char *image_array, uint16_t x_coordinat, uint16_t y_coordinat, uint16_t img_width, uint16_t img_height, uint32_t s_img)
{
 8001e90:	b570      	push	{r4, r5, r6, lr}
 8001e92:	4604      	mov	r4, r0
 8001e94:	4608      	mov	r0, r1
 8001e96:	f8bd 6010 	ldrh.w	r6, [sp, #16]
 8001e9a:	4611      	mov	r1, r2
	ILI9341_Set_Address(x_coordinat, y_coordinat, img_width + x_coordinat - 1, img_height + y_coordinat - 1);
 8001e9c:	3a01      	subs	r2, #1
 8001e9e:	4416      	add	r6, r2
 8001ea0:	1e42      	subs	r2, r0, #1
 8001ea2:	441a      	add	r2, r3
 8001ea4:	b292      	uxth	r2, r2
 8001ea6:	b2b3      	uxth	r3, r6
{
 8001ea8:	9d05      	ldr	r5, [sp, #20]
	ILI9341_Set_Address(x_coordinat, y_coordinat, img_width + x_coordinat - 1, img_height + y_coordinat - 1);
 8001eaa:	f7ff fafd 	bl	80014a8 <ILI9341_Set_Address>

	DISP_DC_DATA;
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001eb4:	4810      	ldr	r0, [pc, #64]	; (8001ef8 <ILI9341_Draw_Image+0x68>)
 8001eb6:	f7fe fb5d 	bl	8000574 <HAL_GPIO_WritePin>
	DISP_CS_SELECT;
 8001eba:	480f      	ldr	r0, [pc, #60]	; (8001ef8 <ILI9341_Draw_Image+0x68>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	2102      	movs	r1, #2
 8001ec0:	f7fe fb58 	bl	8000574 <HAL_GPIO_WritePin>
 8001ec4:	4620      	mov	r0, r4
 8001ec6:	4b0d      	ldr	r3, [pc, #52]	; (8001efc <ILI9341_Draw_Image+0x6c>)
 8001ec8:	4425      	add	r5, r4

	for(uint32_t i = 0; i < s_img; i++)
 8001eca:	42a8      	cmp	r0, r5
 8001ecc:	d10c      	bne.n	8001ee8 <ILI9341_Draw_Image+0x58>
	{
		DISP_SPI->DR = image_array[i];
		while(!(DISP_SPI->SR & SPI_SR_TXE));
	}

	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	0791      	lsls	r1, r2, #30
 8001ed2:	d5fc      	bpl.n	8001ece <ILI9341_Draw_Image+0x3e>
	while(DISP_SPI->SR & SPI_SR_BSY);
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	0612      	lsls	r2, r2, #24
 8001ed8:	d4fc      	bmi.n	8001ed4 <ILI9341_Draw_Image+0x44>
	DISP_CS_UNSELECT;
 8001eda:	2201      	movs	r2, #1
}
 8001edc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	DISP_CS_UNSELECT;
 8001ee0:	2102      	movs	r1, #2
 8001ee2:	4805      	ldr	r0, [pc, #20]	; (8001ef8 <ILI9341_Draw_Image+0x68>)
 8001ee4:	f7fe bb46 	b.w	8000574 <HAL_GPIO_WritePin>
		DISP_SPI->DR = image_array[i];
 8001ee8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001eec:	60da      	str	r2, [r3, #12]
		while(!(DISP_SPI->SR & SPI_SR_TXE));
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	0794      	lsls	r4, r2, #30
 8001ef2:	d5fc      	bpl.n	8001eee <ILI9341_Draw_Image+0x5e>
 8001ef4:	e7e9      	b.n	8001eca <ILI9341_Draw_Image+0x3a>
 8001ef6:	bf00      	nop
 8001ef8:	40010c00 	.word	0x40010c00
 8001efc:	40013000 	.word	0x40013000

08001f00 <ILI9341_WriteString>:
    }
}

// Вывод строки
void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001f00:	b082      	sub	sp, #8
 8001f02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f06:	4691      	mov	r9, r2
 8001f08:	b087      	sub	sp, #28
 8001f0a:	460c      	mov	r4, r1
 8001f0c:	f8bd 1050 	ldrh.w	r1, [sp, #80]	; 0x50
 8001f10:	f8bd b04c 	ldrh.w	fp, [sp, #76]	; 0x4c
 8001f14:	9311      	str	r3, [sp, #68]	; 0x44
 8001f16:	b2df      	uxtb	r7, r3
 8001f18:	f3c3 2507 	ubfx	r5, r3, #8, #8
                ILI9341_Write_Data(bgcolor >> 8);
 8001f1c:	0a0b      	lsrs	r3, r1, #8
 8001f1e:	9303      	str	r3, [sp, #12]
                ILI9341_Write_Data(color >> 8);
 8001f20:	ea4f 231b 	mov.w	r3, fp, lsr #8
 8001f24:	9302      	str	r3, [sp, #8]
                ILI9341_Write_Data(bgcolor & 0xFF);
 8001f26:	b2cb      	uxtb	r3, r1
 8001f28:	9305      	str	r3, [sp, #20]
    while(*str)
 8001f2a:	f819 ab01 	ldrb.w	sl, [r9], #1
 8001f2e:	f1ba 0f00 	cmp.w	sl, #0
 8001f32:	d104      	bne.n	8001f3e <ILI9341_WriteString+0x3e>

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
        x += font.width;
        str++;
    }
}
 8001f34:	b007      	add	sp, #28
 8001f36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f3a:	b002      	add	sp, #8
 8001f3c:	4770      	bx	lr
        if(x + font.width >= ILI9341_SCREEN_WIDTH)
 8001f3e:	19c3      	adds	r3, r0, r7
 8001f40:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001f44:	db08      	blt.n	8001f58 <ILI9341_WriteString+0x58>
            y += font.height;
 8001f46:	442c      	add	r4, r5
 8001f48:	b2a4      	uxth	r4, r4
            if(y + font.height >= ILI9341_SCREEN_HEIGHT)
 8001f4a:	1963      	adds	r3, r4, r5
 8001f4c:	2bef      	cmp	r3, #239	; 0xef
 8001f4e:	dcf1      	bgt.n	8001f34 <ILI9341_WriteString+0x34>
            if(*str == ' ')
 8001f50:	f1ba 0f20 	cmp.w	sl, #32
 8001f54:	d03a      	beq.n	8001fcc <ILI9341_WriteString+0xcc>
            x = 0;
 8001f56:	2000      	movs	r0, #0
        b = font.data[(ch - 32) * font.height + i];
 8001f58:	f1aa 0a20 	sub.w	sl, sl, #32
    ILI9341_Set_Address(x, y, x + font.width - 1, y + font.height - 1);
 8001f5c:	19c6      	adds	r6, r0, r7
        b = font.data[(ch - 32) * font.height + i];
 8001f5e:	fb05 fa0a 	mul.w	sl, r5, sl
    ILI9341_Set_Address(x, y, x + font.width - 1, y + font.height - 1);
 8001f62:	b2b6      	uxth	r6, r6
 8001f64:	1e6b      	subs	r3, r5, #1
 8001f66:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 8001f6a:	4423      	add	r3, r4
 8001f6c:	1e72      	subs	r2, r6, #1
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	b292      	uxth	r2, r2
 8001f72:	4621      	mov	r1, r4
 8001f74:	f7ff fa98 	bl	80014a8 <ILI9341_Set_Address>
 8001f78:	eb08 034a 	add.w	r3, r8, sl, lsl #1
    for(i = 0; i < font.height; i++)
 8001f7c:	f04f 0a00 	mov.w	sl, #0
 8001f80:	9300      	str	r3, [sp, #0]
                ILI9341_Write_Data(color & 0xFF);
 8001f82:	fa5f f38b 	uxtb.w	r3, fp
 8001f86:	9304      	str	r3, [sp, #16]
    for(i = 0; i < font.height; i++)
 8001f88:	45aa      	cmp	sl, r5
 8001f8a:	d301      	bcc.n	8001f90 <ILI9341_WriteString+0x90>
            x = 0;
 8001f8c:	4630      	mov	r0, r6
 8001f8e:	e7cc      	b.n	8001f2a <ILI9341_WriteString+0x2a>
        for(j = 0; j < font.width; j++)
 8001f90:	f04f 0800 	mov.w	r8, #0
        b = font.data[(ch - 32) * font.height + i];
 8001f94:	9b00      	ldr	r3, [sp, #0]
 8001f96:	f833 301a 	ldrh.w	r3, [r3, sl, lsl #1]
 8001f9a:	9301      	str	r3, [sp, #4]
        for(j = 0; j < font.width; j++)
 8001f9c:	45b8      	cmp	r8, r7
 8001f9e:	d302      	bcc.n	8001fa6 <ILI9341_WriteString+0xa6>
    for(i = 0; i < font.height; i++)
 8001fa0:	f10a 0a01 	add.w	sl, sl, #1
 8001fa4:	e7f0      	b.n	8001f88 <ILI9341_WriteString+0x88>
            if((b << j) & 0x8000)
 8001fa6:	9b01      	ldr	r3, [sp, #4]
 8001fa8:	fa03 f108 	lsl.w	r1, r3, r8
 8001fac:	040b      	lsls	r3, r1, #16
 8001fae:	d508      	bpl.n	8001fc2 <ILI9341_WriteString+0xc2>
                ILI9341_Write_Data(color >> 8);
 8001fb0:	9802      	ldr	r0, [sp, #8]
 8001fb2:	f7ff fa59 	bl	8001468 <ILI9341_Write_Data>
                ILI9341_Write_Data(color & 0xFF);
 8001fb6:	9804      	ldr	r0, [sp, #16]
                ILI9341_Write_Data(bgcolor & 0xFF);
 8001fb8:	f7ff fa56 	bl	8001468 <ILI9341_Write_Data>
        for(j = 0; j < font.width; j++)
 8001fbc:	f108 0801 	add.w	r8, r8, #1
 8001fc0:	e7ec      	b.n	8001f9c <ILI9341_WriteString+0x9c>
                ILI9341_Write_Data(bgcolor >> 8);
 8001fc2:	9803      	ldr	r0, [sp, #12]
 8001fc4:	f7ff fa50 	bl	8001468 <ILI9341_Write_Data>
                ILI9341_Write_Data(bgcolor & 0xFF);
 8001fc8:	9805      	ldr	r0, [sp, #20]
 8001fca:	e7f5      	b.n	8001fb8 <ILI9341_WriteString+0xb8>
            x = 0;
 8001fcc:	2600      	movs	r6, #0
 8001fce:	e7dd      	b.n	8001f8c <ILI9341_WriteString+0x8c>

08001fd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fd0:	b510      	push	{r4, lr}
 8001fd2:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fd4:	2228      	movs	r2, #40	; 0x28
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	a806      	add	r0, sp, #24
 8001fda:	f000 fdb7 	bl	8002b4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fde:	2100      	movs	r1, #0
 8001fe0:	2214      	movs	r2, #20
 8001fe2:	a801      	add	r0, sp, #4
 8001fe4:	f000 fdb2 	bl	8002b4c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fe8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fec:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fee:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ff0:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ff2:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001ff4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ff8:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ffa:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ffc:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001ffe:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002000:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002002:	f7fe fabd 	bl	8000580 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002006:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002008:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800200c:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800200e:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002010:	4621      	mov	r1, r4
 8002012:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002014:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002016:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002018:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800201a:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800201c:	f7fe fc8a 	bl	8000934 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8002020:	b010      	add	sp, #64	; 0x40
 8002022:	bd10      	pop	{r4, pc}

08002024 <main>:
{
 8002024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002028:	b09f      	sub	sp, #124	; 0x7c
  HAL_Init();
 800202a:	f7fe f8bb 	bl	80001a4 <HAL_Init>
  SystemClock_Config();
 800202e:	f7ff ffcf 	bl	8001fd0 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002032:	2210      	movs	r2, #16
 8002034:	2100      	movs	r1, #0
 8002036:	a80e      	add	r0, sp, #56	; 0x38
 8002038:	f000 fd88 	bl	8002b4c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800203c:	4b9f      	ldr	r3, [pc, #636]	; (80022bc <main+0x298>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin, GPIO_PIN_RESET);
 800203e:	f640 4103 	movw	r1, #3075	; 0xc03
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002042:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin, GPIO_PIN_RESET);
 8002044:	489e      	ldr	r0, [pc, #632]	; (80022c0 <main+0x29c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002046:	f042 0220 	orr.w	r2, r2, #32
 800204a:	619a      	str	r2, [r3, #24]
 800204c:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pins : TOUCH_CS_Pin TFT_CS_Pin TFT_RST_Pin TFT_DC_Pin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002050:	f002 0220 	and.w	r2, r2, #32
 8002054:	9208      	str	r2, [sp, #32]
 8002056:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002058:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800205a:	f04f 0801 	mov.w	r8, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800205e:	f042 0204 	orr.w	r2, r2, #4
 8002062:	619a      	str	r2, [r3, #24]
 8002064:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002066:	f04f 0902 	mov.w	r9, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800206a:	f002 0204 	and.w	r2, r2, #4
 800206e:	9209      	str	r2, [sp, #36]	; 0x24
 8002070:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002072:	699a      	ldr	r2, [r3, #24]
  hspi1.Instance = SPI1;
 8002074:	4d93      	ldr	r5, [pc, #588]	; (80022c4 <main+0x2a0>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002076:	f042 0208 	orr.w	r2, r2, #8
 800207a:	619a      	str	r2, [r3, #24]
 800207c:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin, GPIO_PIN_RESET);
 800207e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002080:	f003 0308 	and.w	r3, r3, #8
 8002084:	930a      	str	r3, [sp, #40]	; 0x28
 8002086:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(GPIOB, TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin, GPIO_PIN_RESET);
 8002088:	f7fe fa74 	bl	8000574 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin;
 800208c:	f640 4303 	movw	r3, #3075	; 0xc03
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002090:	a90e      	add	r1, sp, #56	; 0x38
 8002092:	488b      	ldr	r0, [pc, #556]	; (80022c0 <main+0x29c>)
  GPIO_InitStruct.Pin = TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin;
 8002094:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002096:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209a:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a0:	f7fe f912 	bl	80002c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 80020a4:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 80020a6:	a90e      	add	r1, sp, #56	; 0x38
 80020a8:	4885      	ldr	r0, [pc, #532]	; (80022c0 <main+0x29c>)
  GPIO_InitStruct.Pin = IRQ_Pin;
 80020aa:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020ac:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ae:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 80020b0:	f7fe f90a 	bl	80002c8 <HAL_GPIO_Init>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80020b4:	f44f 7382 	mov.w	r3, #260	; 0x104
 80020b8:	4a83      	ldr	r2, [pc, #524]	; (80022c8 <main+0x2a4>)
  hspi1.Init.CRCPolynomial = 10;
 80020ba:	260a      	movs	r6, #10
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80020bc:	e885 000c 	stmia.w	r5, {r2, r3}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80020c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020c4:	61ab      	str	r3, [r5, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80020c6:	2308      	movs	r3, #8
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80020c8:	4628      	mov	r0, r5
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80020ca:	61eb      	str	r3, [r5, #28]
  hspi1.Init.CRCPolynomial = 10;
 80020cc:	62ee      	str	r6, [r5, #44]	; 0x2c
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80020ce:	60ac      	str	r4, [r5, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80020d0:	60ec      	str	r4, [r5, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020d2:	612c      	str	r4, [r5, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020d4:	616c      	str	r4, [r5, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020d6:	622c      	str	r4, [r5, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80020d8:	626c      	str	r4, [r5, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020da:	62ac      	str	r4, [r5, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80020dc:	f7fe fd31 	bl	8000b42 <HAL_SPI_Init>
  huart1.Init.BaudRate = 115200;
 80020e0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Instance = USART1;
 80020e4:	4f79      	ldr	r7, [pc, #484]	; (80022cc <main+0x2a8>)
  huart1.Init.BaudRate = 115200;
 80020e6:	497a      	ldr	r1, [pc, #488]	; (80022d0 <main+0x2ac>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020e8:	4638      	mov	r0, r7
  huart1.Init.BaudRate = 115200;
 80020ea:	e887 000a 	stmia.w	r7, {r1, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020ee:	230c      	movs	r3, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020f0:	60bc      	str	r4, [r7, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020f2:	617b      	str	r3, [r7, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020f4:	60fc      	str	r4, [r7, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020f6:	613c      	str	r4, [r7, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020f8:	61bc      	str	r4, [r7, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020fa:	61fc      	str	r4, [r7, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020fc:	f7ff f90a 	bl	8001314 <HAL_UART_Init>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002100:	221c      	movs	r2, #28
 8002102:	4621      	mov	r1, r4
 8002104:	a80e      	add	r0, sp, #56	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002106:	940b      	str	r4, [sp, #44]	; 0x2c
 8002108:	940c      	str	r4, [sp, #48]	; 0x30
  TIM_OC_InitTypeDef sConfigOC = {0};
 800210a:	f000 fd1f 	bl	8002b4c <memset>
  htim4.Init.Prescaler = 71;
 800210e:	2347      	movs	r3, #71	; 0x47
  htim4.Init.Period = 1000;
 8002110:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
  htim4.Instance = TIM4;
 8002114:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 80022e8 <main+0x2c4>
  htim4.Init.Prescaler = 71;
 8002118:	486e      	ldr	r0, [pc, #440]	; (80022d4 <main+0x2b0>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800211a:	f8ca 4008 	str.w	r4, [sl, #8]
  htim4.Init.Prescaler = 71;
 800211e:	e88a 0009 	stmia.w	sl, {r0, r3}
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002122:	4650      	mov	r0, sl
  htim4.Init.Period = 1000;
 8002124:	f8ca b00c 	str.w	fp, [sl, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002128:	f8ca 4010 	str.w	r4, [sl, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800212c:	f8ca 4018 	str.w	r4, [sl, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002130:	f7fe ff9e 	bl	8001070 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002134:	a90b      	add	r1, sp, #44	; 0x2c
 8002136:	4650      	mov	r0, sl
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002138:	940b      	str	r4, [sp, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800213a:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800213c:	f7ff f86a 	bl	8001214 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002140:	2360      	movs	r3, #96	; 0x60
 8002142:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 500;
 8002144:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002148:	4622      	mov	r2, r4
 800214a:	a90e      	add	r1, sp, #56	; 0x38
 800214c:	4650      	mov	r0, sl
  sConfigOC.Pulse = 500;
 800214e:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002150:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002152:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002154:	f7fe ffd2 	bl	80010fc <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim4);
 8002158:	4650      	mov	r0, sl
 800215a:	f000 fb81 	bl	8002860 <HAL_TIM_MspPostInit>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); // этот таймер используется у меня для подсветки экрана
 800215e:	4621      	mov	r1, r4
 8002160:	4650      	mov	r0, sl
 8002162:	f7ff f83b 	bl	80011dc <HAL_TIM_PWM_Start>
  HAL_UART_Transmit(&huart1, (uint8_t*)"Start\n", 6, 1000);
 8002166:	465b      	mov	r3, fp
 8002168:	2206      	movs	r2, #6
 800216a:	495b      	ldr	r1, [pc, #364]	; (80022d8 <main+0x2b4>)
 800216c:	4638      	mov	r0, r7
 800216e:	f7ff f8ff 	bl	8001370 <HAL_UART_Transmit>
  ILI9341_WriteString(10, 10, "Hello World", Font_7x10, WHITE, MYFON); // можно передавать непосредственно текст
 8002172:	f642 1a65 	movw	sl, #10597	; 0x2965
  DISP_CS_UNSELECT;
 8002176:	4649      	mov	r1, r9
  ILI9341_WriteString(10, 10, "Hello World", Font_7x10, WHITE, MYFON); // можно передавать непосредственно текст
 8002178:	f64f 79ff 	movw	r9, #65535	; 0xffff
  __HAL_SPI_ENABLE(DISP_SPI_PTR);
 800217c:	682a      	ldr	r2, [r5, #0]
  DISP_CS_UNSELECT;
 800217e:	4850      	ldr	r0, [pc, #320]	; (80022c0 <main+0x29c>)
  __HAL_SPI_ENABLE(DISP_SPI_PTR);
 8002180:	6813      	ldr	r3, [r2, #0]
  ILI9341_WriteString(10, 10, "Hello World", Font_7x10, WHITE, MYFON); // можно передавать непосредственно текст
 8002182:	4f56      	ldr	r7, [pc, #344]	; (80022dc <main+0x2b8>)
  __HAL_SPI_ENABLE(DISP_SPI_PTR);
 8002184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002188:	6013      	str	r3, [r2, #0]
  DISP_CS_UNSELECT;
 800218a:	4642      	mov	r2, r8
 800218c:	f7fe f9f2 	bl	8000574 <HAL_GPIO_WritePin>
  TOUCH_CS_UNSELECT; // это нужно только если есть тач
 8002190:	4642      	mov	r2, r8
 8002192:	4641      	mov	r1, r8
 8002194:	484a      	ldr	r0, [pc, #296]	; (80022c0 <main+0x29c>)
 8002196:	f7fe f9ed 	bl	8000574 <HAL_GPIO_WritePin>
  ILI9341_Init(); // инициализация дисплея
 800219a:	f7ff fa6f 	bl	800167c <ILI9341_Init>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2); // установка ориентации экрана (варианты в файле ILI9341_GFX.h)
 800219e:	2003      	movs	r0, #3
 80021a0:	f7ff fa2a 	bl	80015f8 <ILI9341_Set_Rotation>
  ILI9341_Fill_Screen(MYFON); // заливка всего экрана цветом (цвета в файле ILI9341_GFX.h)
 80021a4:	f642 1065 	movw	r0, #10597	; 0x2965
 80021a8:	f7ff fba4 	bl	80018f4 <ILI9341_Fill_Screen>
  ILI9341_WriteString(10, 10, "Hello World", Font_7x10, WHITE, MYFON); // можно передавать непосредственно текст
 80021ac:	4b4c      	ldr	r3, [pc, #304]	; (80022e0 <main+0x2bc>)
 80021ae:	f8cd a008 	str.w	sl, [sp, #8]
 80021b2:	f8cd 9004 	str.w	r9, [sp, #4]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	4631      	mov	r1, r6
 80021ba:	9200      	str	r2, [sp, #0]
 80021bc:	4630      	mov	r0, r6
 80021be:	463a      	mov	r2, r7
 80021c0:	681b      	ldr	r3, [r3, #0]
  ILI9341_WriteString(20, 30, "Hello World", Font_11x18, WHITE, MYFON);
 80021c2:	4e48      	ldr	r6, [pc, #288]	; (80022e4 <main+0x2c0>)
  ILI9341_WriteString(10, 10, "Hello World", Font_7x10, WHITE, MYFON); // можно передавать непосредственно текст
 80021c4:	f7ff fe9c 	bl	8001f00 <ILI9341_WriteString>
  ILI9341_WriteString(20, 30, "Hello World", Font_11x18, WHITE, MYFON);
 80021c8:	f8cd a008 	str.w	sl, [sp, #8]
 80021cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80021d0:	6873      	ldr	r3, [r6, #4]
 80021d2:	463a      	mov	r2, r7
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	6833      	ldr	r3, [r6, #0]
 80021d8:	211e      	movs	r1, #30
 80021da:	2014      	movs	r0, #20
 80021dc:	f7ff fe90 	bl	8001f00 <ILI9341_WriteString>
  ILI9341_WriteString(30, 60, "Hello World", Font_16x26, BLUE, DARKGREEN);
 80021e0:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80021e4:	9302      	str	r3, [sp, #8]
 80021e6:	231f      	movs	r3, #31
 80021e8:	f8df 8100 	ldr.w	r8, [pc, #256]	; 80022ec <main+0x2c8>
 80021ec:	9301      	str	r3, [sp, #4]
 80021ee:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80021f2:	463a      	mov	r2, r7
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	f8d8 3000 	ldr.w	r3, [r8]
 80021fa:	213c      	movs	r1, #60	; 0x3c
 80021fc:	201e      	movs	r0, #30
 80021fe:	f7ff fe7f 	bl	8001f00 <ILI9341_WriteString>
  char txt_buf[] = "Hello World";
 8002202:	6838      	ldr	r0, [r7, #0]
 8002204:	6879      	ldr	r1, [r7, #4]
 8002206:	ab0b      	add	r3, sp, #44	; 0x2c
 8002208:	c303      	stmia	r3!, {r0, r1}
 800220a:	68b8      	ldr	r0, [r7, #8]
  ILI9341_WriteString(40, 96, txt_buf, Font_16x26, RED, GREEN); // можно передавать массив
 800220c:	f44f 4778 	mov.w	r7, #63488	; 0xf800
  char txt_buf[] = "Hello World";
 8002210:	6018      	str	r0, [r3, #0]
  ILI9341_WriteString(40, 96, txt_buf, Font_16x26, RED, GREEN); // можно передавать массив
 8002212:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002216:	9701      	str	r7, [sp, #4]
 8002218:	9302      	str	r3, [sp, #8]
 800221a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800221e:	aa0b      	add	r2, sp, #44	; 0x2c
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	f8d8 3000 	ldr.w	r3, [r8]
 8002226:	2160      	movs	r1, #96	; 0x60
 8002228:	2028      	movs	r0, #40	; 0x28
 800222a:	f7ff fe69 	bl	8001f00 <ILI9341_WriteString>
  HAL_Delay(1000);
 800222e:	4658      	mov	r0, fp
 8002230:	f7fd ffdc 	bl	80001ec <HAL_Delay>
  ILI9341_Fill_Screen(MYFON);
 8002234:	4650      	mov	r0, sl
 8002236:	f7ff fb5d 	bl	80018f4 <ILI9341_Fill_Screen>
  ILI9341_Draw_Pixel(100, 100, WHITE); // рисует пиксель (координаты и цвет)
 800223a:	2164      	movs	r1, #100	; 0x64
 800223c:	464a      	mov	r2, r9
 800223e:	4608      	mov	r0, r1
 8002240:	f7ff fb72 	bl	8001928 <ILI9341_Draw_Pixel>
  HAL_Delay(300);
 8002244:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002248:	f7fd ffd0 	bl	80001ec <HAL_Delay>
  ILI9341_Draw_Pixel(102, 100, MAROON);
 800224c:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 8002250:	2164      	movs	r1, #100	; 0x64
 8002252:	2066      	movs	r0, #102	; 0x66
 8002254:	f7ff fb68 	bl	8001928 <ILI9341_Draw_Pixel>
  HAL_Delay(300);
 8002258:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800225c:	f7fd ffc6 	bl	80001ec <HAL_Delay>
  ILI9341_Draw_Pixel(100, 102, BLUE);
 8002260:	221f      	movs	r2, #31
 8002262:	2166      	movs	r1, #102	; 0x66
 8002264:	2064      	movs	r0, #100	; 0x64
 8002266:	f7ff fb5f 	bl	8001928 <ILI9341_Draw_Pixel>
  HAL_Delay(300);
 800226a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800226e:	f7fd ffbd 	bl	80001ec <HAL_Delay>
  ILI9341_Draw_Pixel(102, 102, RED);
 8002272:	2166      	movs	r1, #102	; 0x66
 8002274:	463a      	mov	r2, r7
 8002276:	4608      	mov	r0, r1
 8002278:	f7ff fb56 	bl	8001928 <ILI9341_Draw_Pixel>
  HAL_Delay(300);
 800227c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002280:	f7fd ffb4 	bl	80001ec <HAL_Delay>
 8002284:	46aa      	mov	sl, r5
	  ILI9341_Draw_Pixel(i, 20, WHITE);
 8002286:	b2a0      	uxth	r0, r4
 8002288:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800228c:	2114      	movs	r1, #20
 800228e:	f7ff fb4b 	bl	8001928 <ILI9341_Draw_Pixel>
 8002292:	3401      	adds	r4, #1
	  HAL_Delay(10);
 8002294:	200a      	movs	r0, #10
 8002296:	f7fd ffa9 	bl	80001ec <HAL_Delay>
  for(uint8_t i = 0; i < 100; i++)
 800229a:	2c64      	cmp	r4, #100	; 0x64
 800229c:	d1f3      	bne.n	8002286 <main+0x262>
 800229e:	2400      	movs	r4, #0
	  ILI9341_Draw_Pixel(40, i, BLUE);
 80022a0:	b2a1      	uxth	r1, r4
 80022a2:	221f      	movs	r2, #31
 80022a4:	2028      	movs	r0, #40	; 0x28
 80022a6:	f7ff fb3f 	bl	8001928 <ILI9341_Draw_Pixel>
 80022aa:	3401      	adds	r4, #1
	  HAL_Delay(10);
 80022ac:	200a      	movs	r0, #10
 80022ae:	f7fd ff9d 	bl	80001ec <HAL_Delay>
  for(uint8_t i = 0; i < 100; i++)
 80022b2:	2c64      	cmp	r4, #100	; 0x64
 80022b4:	d1f4      	bne.n	80022a0 <main+0x27c>
 80022b6:	2500      	movs	r5, #0
 80022b8:	e01a      	b.n	80022f0 <main+0x2cc>
 80022ba:	bf00      	nop
 80022bc:	40021000 	.word	0x40021000
 80022c0:	40010c00 	.word	0x40010c00
 80022c4:	20000138 	.word	0x20000138
 80022c8:	40013000 	.word	0x40013000
 80022cc:	200000f8 	.word	0x200000f8
 80022d0:	40013800 	.word	0x40013800
 80022d4:	40000800 	.word	0x40000800
 80022d8:	08008e10 	.word	0x08008e10
 80022dc:	08008e17 	.word	0x08008e17
 80022e0:	2000001c 	.word	0x2000001c
 80022e4:	2000000c 	.word	0x2000000c
 80022e8:	200000b8 	.word	0x200000b8
 80022ec:	20000014 	.word	0x20000014
	  ILI9341_Draw_Pixel(i, i, RED);
 80022f0:	b2a9      	uxth	r1, r5
 80022f2:	4608      	mov	r0, r1
 80022f4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80022f8:	f7ff fb16 	bl	8001928 <ILI9341_Draw_Pixel>
 80022fc:	3501      	adds	r5, #1
	  HAL_Delay(10);
 80022fe:	200a      	movs	r0, #10
 8002300:	f7fd ff74 	bl	80001ec <HAL_Delay>
  for(uint8_t i = 0; i < 100; i++)
 8002304:	2d64      	cmp	r5, #100	; 0x64
 8002306:	d1f3      	bne.n	80022f0 <main+0x2cc>
  HAL_Delay(1000);
 8002308:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800230c:	f7fd ff6e 	bl	80001ec <HAL_Delay>
  ILI9341_Fill_Screen(MYFON);
 8002310:	f642 1065 	movw	r0, #10597	; 0x2965
  ILI9341_Draw_Rectangle(10, 10, 50, 70, WHITE); // рисует закрашеный прямоугольник (первые два аргумента это начальные координаты, а следующие два это ширина и высота)
 8002314:	f64f 74ff 	movw	r4, #65535	; 0xffff
  ILI9341_Fill_Screen(MYFON);
 8002318:	f7ff faec 	bl	80018f4 <ILI9341_Fill_Screen>
  ILI9341_Draw_Rectangle(10, 10, 50, 70, WHITE); // рисует закрашеный прямоугольник (первые два аргумента это начальные координаты, а следующие два это ширина и высота)
 800231c:	210a      	movs	r1, #10
 800231e:	2346      	movs	r3, #70	; 0x46
 8002320:	4608      	mov	r0, r1
 8002322:	2232      	movs	r2, #50	; 0x32
 8002324:	9400      	str	r4, [sp, #0]
 8002326:	f7ff fba7 	bl	8001a78 <ILI9341_Draw_Rectangle>
  HAL_Delay(1000);
 800232a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800232e:	f7fd ff5d 	bl	80001ec <HAL_Delay>
  ILI9341_Fill_Screen(MYFON);
 8002332:	f642 1065 	movw	r0, #10597	; 0x2965
 8002336:	f7ff fadd 	bl	80018f4 <ILI9341_Fill_Screen>
  ILI9341_Draw_Horizontal_Line(10, 10, 200, WHITE); // рисует горизонтальную линию (первые два аргумента это начальные координаты, а третий длина)
 800233a:	210a      	movs	r1, #10
 800233c:	4623      	mov	r3, r4
 800233e:	4608      	mov	r0, r1
 8002340:	22c8      	movs	r2, #200	; 0xc8
 8002342:	f7ff fbd3 	bl	8001aec <ILI9341_Draw_Horizontal_Line>
  HAL_Delay(1000);
 8002346:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800234a:	f7fd ff4f 	bl	80001ec <HAL_Delay>
  ILI9341_Fill_Screen(MYFON);
 800234e:	f642 1065 	movw	r0, #10597	; 0x2965
 8002352:	f7ff facf 	bl	80018f4 <ILI9341_Fill_Screen>
  ILI9341_Draw_Vertical_Line(10, 10, 200, WHITE); // рисует вертикальную линию (первые два аргумента это начальные координаты, а третий длина)
 8002356:	210a      	movs	r1, #10
 8002358:	4623      	mov	r3, r4
 800235a:	4608      	mov	r0, r1
 800235c:	22c8      	movs	r2, #200	; 0xc8
 800235e:	f7ff fbed 	bl	8001b3c <ILI9341_Draw_Vertical_Line>
  HAL_Delay(1000);
 8002362:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002366:	f7fd ff41 	bl	80001ec <HAL_Delay>
  ILI9341_Fill_Screen(MYFON);
 800236a:	f642 1065 	movw	r0, #10597	; 0x2965
 800236e:	f7ff fac1 	bl	80018f4 <ILI9341_Fill_Screen>
  ILI9341_Random_line(160, 120, 50, 175, WHITE); // рисует произвольную линию (первые два аргумента это начальные координаты, а третий и четвёртый - конечные)
 8002372:	23af      	movs	r3, #175	; 0xaf
 8002374:	2232      	movs	r2, #50	; 0x32
 8002376:	2178      	movs	r1, #120	; 0x78
 8002378:	9400      	str	r4, [sp, #0]
 800237a:	20a0      	movs	r0, #160	; 0xa0
 800237c:	f7ff fd2c 	bl	8001dd8 <ILI9341_Random_line>
  HAL_Delay(1000);
 8002380:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002384:	f7fd ff32 	bl	80001ec <HAL_Delay>
  ILI9341_Random_line(123, 180, 150, 75, WHITE);
 8002388:	234b      	movs	r3, #75	; 0x4b
 800238a:	2296      	movs	r2, #150	; 0x96
 800238c:	21b4      	movs	r1, #180	; 0xb4
 800238e:	9400      	str	r4, [sp, #0]
 8002390:	207b      	movs	r0, #123	; 0x7b
 8002392:	f7ff fd21 	bl	8001dd8 <ILI9341_Random_line>
  HAL_Delay(1000);
 8002396:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800239a:	f7fd ff27 	bl	80001ec <HAL_Delay>
  ILI9341_Fill_Screen(MYFON);
 800239e:	f642 1065 	movw	r0, #10597	; 0x2965
 80023a2:	f7ff faa7 	bl	80018f4 <ILI9341_Fill_Screen>
  ILI9341_Draw_Hollow_Circle(100, 100, 50, WHITE); // рисует прозрачный круг (первые два аргумента это координаты центра, а третий радиус)
 80023a6:	4623      	mov	r3, r4
 80023a8:	4629      	mov	r1, r5
 80023aa:	2232      	movs	r2, #50	; 0x32
 80023ac:	4628      	mov	r0, r5
 80023ae:	f7ff fbed 	bl	8001b8c <ILI9341_Draw_Hollow_Circle>
  HAL_Delay(1000);
 80023b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023b6:	f7fd ff19 	bl	80001ec <HAL_Delay>
  ILI9341_Fill_Screen(MYFON);
 80023ba:	f642 1065 	movw	r0, #10597	; 0x2965
 80023be:	f7ff fa99 	bl	80018f4 <ILI9341_Fill_Screen>
  ILI9341_Draw_Filled_Circle(150, 100, 40, WHITE); // рисует закрашеный круг (первые два аргумента это координаты центра, а третий радиус)
 80023c2:	4623      	mov	r3, r4
 80023c4:	4629      	mov	r1, r5
 80023c6:	2228      	movs	r2, #40	; 0x28
 80023c8:	2096      	movs	r0, #150	; 0x96
 80023ca:	f7ff fc5a 	bl	8001c82 <ILI9341_Draw_Filled_Circle>
  HAL_Delay(1000);
 80023ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023d2:	f7fd ff0b 	bl	80001ec <HAL_Delay>
  ILI9341_Fill_Screen(MYFON);
 80023d6:	f642 1065 	movw	r0, #10597	; 0x2965
 80023da:	f7ff fa8b 	bl	80018f4 <ILI9341_Fill_Screen>
  ILI9341_Draw_Hollow_Rectangle_Coord(10, 10, 50, 70, WHITE); // рисует прозрачный прямоугольник (первые два аргумента это начальные координаты, а вторые два конечные)
 80023de:	210a      	movs	r1, #10
 80023e0:	2346      	movs	r3, #70	; 0x46
 80023e2:	4608      	mov	r0, r1
 80023e4:	2232      	movs	r2, #50	; 0x32
 80023e6:	9400      	str	r4, [sp, #0]
 80023e8:	f7ff fca8 	bl	8001d3c <ILI9341_Draw_Hollow_Rectangle_Coord>
  HAL_Delay(1000);
 80023ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023f0:	f7fd fefc 	bl	80001ec <HAL_Delay>
  ILI9341_Fill_Screen(MYFON);
 80023f4:	f642 1065 	movw	r0, #10597	; 0x2965
 80023f8:	f7ff fa7c 	bl	80018f4 <ILI9341_Fill_Screen>
  ILI9341_Draw_Filled_Rectangle_Coord(20, 20, 70, 60, WHITE); // рисует закрашеный прямоугольник (первые два аргумента это начальные координаты, а вторые два конечные)
 80023fc:	2114      	movs	r1, #20
 80023fe:	233c      	movs	r3, #60	; 0x3c
 8002400:	4608      	mov	r0, r1
 8002402:	2246      	movs	r2, #70	; 0x46
 8002404:	9400      	str	r4, [sp, #0]
 8002406:	f7ff fccc 	bl	8001da2 <ILI9341_Draw_Filled_Rectangle_Coord>
  HAL_Delay(1000);
 800240a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800240e:	f7fd feed 	bl	80001ec <HAL_Delay>
  ILI9341_Fill_Screen(MYFON);
 8002412:	f642 1065 	movw	r0, #10597	; 0x2965
  ILI9341_Draw_Image(img_logo, 30, 30, 80, 80, size_img); // подробности см. статье
 8002416:	2550      	movs	r5, #80	; 0x50
  ILI9341_Fill_Screen(MYFON);
 8002418:	f7ff fa6c 	bl	80018f4 <ILI9341_Fill_Screen>
  ILI9341_Draw_Image(img_logo, 30, 30, 80, 80, size_img); // подробности см. статье
 800241c:	f44f 5848 	mov.w	r8, #12800	; 0x3200
 8002420:	221e      	movs	r2, #30
 8002422:	462b      	mov	r3, r5
 8002424:	4611      	mov	r1, r2
 8002426:	e88d 0120 	stmia.w	sp, {r5, r8}
 800242a:	48be      	ldr	r0, [pc, #760]	; (8002724 <main+0x700>)
 800242c:	f7ff fd30 	bl	8001e90 <ILI9341_Draw_Image>
  HAL_Delay(1000);
 8002430:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002434:	f7fd feda 	bl	80001ec <HAL_Delay>
  ILI9341_Fill_Screen(MYFON);
 8002438:	f642 1065 	movw	r0, #10597	; 0x2965
 800243c:	f7ff fa5a 	bl	80018f4 <ILI9341_Fill_Screen>
  ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8002440:	2000      	movs	r0, #0
 8002442:	f7ff f8d9 	bl	80015f8 <ILI9341_Set_Rotation>
  ILI9341_Draw_Image(img_logo, 30, 30, 80, 80, size_img);
 8002446:	221e      	movs	r2, #30
  ILI9341_WriteString(30, 120, "SCREEN_VERTICAL_1", Font_11x18, WHITE, MYFON);
 8002448:	f642 1765 	movw	r7, #10597	; 0x2965
  ILI9341_Draw_Image(img_logo, 30, 30, 80, 80, size_img);
 800244c:	462b      	mov	r3, r5
 800244e:	4611      	mov	r1, r2
 8002450:	e88d 0120 	stmia.w	sp, {r5, r8}
 8002454:	48b3      	ldr	r0, [pc, #716]	; (8002724 <main+0x700>)
 8002456:	f7ff fd1b 	bl	8001e90 <ILI9341_Draw_Image>
  ILI9341_WriteString(30, 120, "SCREEN_VERTICAL_1", Font_11x18, WHITE, MYFON);
 800245a:	9702      	str	r7, [sp, #8]
 800245c:	9401      	str	r4, [sp, #4]
 800245e:	6873      	ldr	r3, [r6, #4]
 8002460:	4ab1      	ldr	r2, [pc, #708]	; (8002728 <main+0x704>)
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	6833      	ldr	r3, [r6, #0]
 8002466:	2178      	movs	r1, #120	; 0x78
 8002468:	201e      	movs	r0, #30
 800246a:	f7ff fd49 	bl	8001f00 <ILI9341_WriteString>
  HAL_Delay(1000);
 800246e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002472:	f7fd febb 	bl	80001ec <HAL_Delay>
  ILI9341_Fill_Screen(MYFON);
 8002476:	4638      	mov	r0, r7
 8002478:	f7ff fa3c 	bl	80018f4 <ILI9341_Fill_Screen>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 800247c:	2001      	movs	r0, #1
 800247e:	f7ff f8bb 	bl	80015f8 <ILI9341_Set_Rotation>
  ILI9341_Draw_Image(img_logo, 30, 30, 80, 80, size_img);
 8002482:	221e      	movs	r2, #30
 8002484:	462b      	mov	r3, r5
 8002486:	4611      	mov	r1, r2
 8002488:	e88d 0120 	stmia.w	sp, {r5, r8}
 800248c:	48a5      	ldr	r0, [pc, #660]	; (8002724 <main+0x700>)
 800248e:	f7ff fcff 	bl	8001e90 <ILI9341_Draw_Image>
  ILI9341_WriteString(30, 120, "SCREEN_HORIZONTAL_1", Font_11x18, WHITE, MYFON);
 8002492:	9702      	str	r7, [sp, #8]
 8002494:	9401      	str	r4, [sp, #4]
 8002496:	6873      	ldr	r3, [r6, #4]
 8002498:	4aa4      	ldr	r2, [pc, #656]	; (800272c <main+0x708>)
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	6833      	ldr	r3, [r6, #0]
 800249e:	2178      	movs	r1, #120	; 0x78
 80024a0:	201e      	movs	r0, #30
 80024a2:	f7ff fd2d 	bl	8001f00 <ILI9341_WriteString>
  HAL_Delay(1000);
 80024a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024aa:	f7fd fe9f 	bl	80001ec <HAL_Delay>
  ILI9341_Fill_Screen(MYFON);
 80024ae:	4638      	mov	r0, r7
 80024b0:	f7ff fa20 	bl	80018f4 <ILI9341_Fill_Screen>
  ILI9341_Set_Rotation(SCREEN_VERTICAL_2);
 80024b4:	2002      	movs	r0, #2
 80024b6:	f7ff f89f 	bl	80015f8 <ILI9341_Set_Rotation>
  ILI9341_Draw_Image(img_logo, 30, 30, 80, 80, size_img);
 80024ba:	221e      	movs	r2, #30
 80024bc:	462b      	mov	r3, r5
 80024be:	4611      	mov	r1, r2
 80024c0:	e88d 0120 	stmia.w	sp, {r5, r8}
 80024c4:	4897      	ldr	r0, [pc, #604]	; (8002724 <main+0x700>)
 80024c6:	f7ff fce3 	bl	8001e90 <ILI9341_Draw_Image>
  ILI9341_WriteString(30, 120, "SCREEN_VERTICAL_2", Font_11x18, WHITE, MYFON);
 80024ca:	9702      	str	r7, [sp, #8]
 80024cc:	9401      	str	r4, [sp, #4]
 80024ce:	6873      	ldr	r3, [r6, #4]
 80024d0:	4a97      	ldr	r2, [pc, #604]	; (8002730 <main+0x70c>)
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	6833      	ldr	r3, [r6, #0]
 80024d6:	2178      	movs	r1, #120	; 0x78
 80024d8:	201e      	movs	r0, #30
 80024da:	f7ff fd11 	bl	8001f00 <ILI9341_WriteString>
  HAL_Delay(1000);
 80024de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024e2:	f7fd fe83 	bl	80001ec <HAL_Delay>
  ILI9341_Fill_Screen(MYFON);
 80024e6:	4638      	mov	r0, r7
 80024e8:	f7ff fa04 	bl	80018f4 <ILI9341_Fill_Screen>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80024ec:	2003      	movs	r0, #3
 80024ee:	f7ff f883 	bl	80015f8 <ILI9341_Set_Rotation>
  ILI9341_Draw_Image(img_logo, 30, 30, 80, 80, size_img);
 80024f2:	221e      	movs	r2, #30
 80024f4:	462b      	mov	r3, r5
 80024f6:	4611      	mov	r1, r2
 80024f8:	e88d 0120 	stmia.w	sp, {r5, r8}
 80024fc:	4889      	ldr	r0, [pc, #548]	; (8002724 <main+0x700>)
 80024fe:	f7ff fcc7 	bl	8001e90 <ILI9341_Draw_Image>
  ILI9341_WriteString(30, 120, "SCREEN_HORIZONTAL_2", Font_11x18, WHITE, MYFON);
 8002502:	9702      	str	r7, [sp, #8]
 8002504:	9401      	str	r4, [sp, #4]
 8002506:	6873      	ldr	r3, [r6, #4]
 8002508:	4a8a      	ldr	r2, [pc, #552]	; (8002734 <main+0x710>)
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	6833      	ldr	r3, [r6, #0]
 800250e:	2178      	movs	r1, #120	; 0x78
 8002510:	201e      	movs	r0, #30
 8002512:	f7ff fcf5 	bl	8001f00 <ILI9341_WriteString>
  char buf[64] = {0,};
 8002516:	2240      	movs	r2, #64	; 0x40
 8002518:	2100      	movs	r1, #0
 800251a:	a80e      	add	r0, sp, #56	; 0x38
 800251c:	f000 fb16 	bl	8002b4c <memset>
  uint8_t flag_hold = 1;
 8002520:	2401      	movs	r4, #1
  uint16_t x = 0;
 8002522:	2300      	movs	r3, #0
  uint8_t flag_press = 1;
 8002524:	4627      	mov	r7, r4
  uint32_t time_press = 0;
 8002526:	469b      	mov	fp, r3
  if(HAL_GPIO_ReadPin(IRQ_GPIO_Port, IRQ_Pin) == GPIO_PIN_RESET && flag_press) // если нажат тачскрин
 8002528:	4d83      	ldr	r5, [pc, #524]	; (8002738 <main+0x714>)
	  HAL_SPI_DeInit(DISP_SPI_PTR);
 800252a:	f8df 9228 	ldr.w	r9, [pc, #552]	; 8002754 <main+0x730>
  uint16_t x = 0;
 800252e:	f8ad 301c 	strh.w	r3, [sp, #28]
  uint16_t y = 0;
 8002532:	f8ad 301e 	strh.w	r3, [sp, #30]
  uint32_t timme_hold = 0;
 8002536:	9305      	str	r3, [sp, #20]
  if(HAL_GPIO_ReadPin(IRQ_GPIO_Port, IRQ_Pin) == GPIO_PIN_RESET && flag_press) // если нажат тачскрин
 8002538:	2104      	movs	r1, #4
 800253a:	4628      	mov	r0, r5
 800253c:	f7fe f814 	bl	8000568 <HAL_GPIO_ReadPin>
 8002540:	4680      	mov	r8, r0
 8002542:	2800      	cmp	r0, #0
 8002544:	f040 808a 	bne.w	800265c <main+0x638>
 8002548:	2f00      	cmp	r7, #0
 800254a:	f000 8088 	beq.w	800265e <main+0x63a>
	  TOUCH_CS_UNSELECT;
 800254e:	2201      	movs	r2, #1
	  y = 0;
 8002550:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
 8002554:	f82b 0d5a 	strh.w	r0, [fp, #-90]!
	  TOUCH_CS_UNSELECT;
 8002558:	4611      	mov	r1, r2
	  x = 0;
 800255a:	f8ad 001c 	strh.w	r0, [sp, #28]
	  TOUCH_CS_UNSELECT;
 800255e:	4628      	mov	r0, r5
 8002560:	f7fe f808 	bl	8000574 <HAL_GPIO_WritePin>
	  DISP_CS_UNSELECT;
 8002564:	2102      	movs	r1, #2
 8002566:	2201      	movs	r2, #1
 8002568:	4628      	mov	r0, r5
 800256a:	f7fe f803 	bl	8000574 <HAL_GPIO_WritePin>
	  HAL_SPI_DeInit(DISP_SPI_PTR);
 800256e:	4648      	mov	r0, r9
 8002570:	f7fe fb22 	bl	8000bb8 <HAL_SPI_DeInit>
	  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002574:	2328      	movs	r3, #40	; 0x28
	  HAL_SPI_Init(DISP_SPI_PTR);
 8002576:	4648      	mov	r0, r9
	  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002578:	f8ca 301c 	str.w	r3, [sl, #28]
	  HAL_SPI_Init(DISP_SPI_PTR);
 800257c:	f7fe fae1 	bl	8000b42 <HAL_SPI_Init>
	  if(ILI9341_TouchGetCoordinates(&x, &y))
 8002580:	4659      	mov	r1, fp
 8002582:	a807      	add	r0, sp, #28
 8002584:	f000 fa18 	bl	80029b8 <ILI9341_TouchGetCoordinates>
 8002588:	b1d0      	cbz	r0, 80025c0 <main+0x59c>
		  snprintf(buf, 64, "X = %d, Y = %d\n", x, y);
 800258a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800258e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8002592:	2140      	movs	r1, #64	; 0x40
 8002594:	9200      	str	r2, [sp, #0]
 8002596:	a80e      	add	r0, sp, #56	; 0x38
 8002598:	4a68      	ldr	r2, [pc, #416]	; (800273c <main+0x718>)
 800259a:	f000 fadf 	bl	8002b5c <sniprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), 100);
 800259e:	a80e      	add	r0, sp, #56	; 0x38
 80025a0:	f7fd fdd4 	bl	800014c <strlen>
 80025a4:	2364      	movs	r3, #100	; 0x64
 80025a6:	b282      	uxth	r2, r0
 80025a8:	a90e      	add	r1, sp, #56	; 0x38
 80025aa:	4865      	ldr	r0, [pc, #404]	; (8002740 <main+0x71c>)
 80025ac:	f7fe fee0 	bl	8001370 <HAL_UART_Transmit>
		  buf[strlen(buf) - 1] = '\0';
 80025b0:	a80e      	add	r0, sp, #56	; 0x38
 80025b2:	f7fd fdcb 	bl	800014c <strlen>
		  flag_press = 0;
 80025b6:	4647      	mov	r7, r8
		  buf[strlen(buf) - 1] = '\0';
 80025b8:	ab1e      	add	r3, sp, #120	; 0x78
 80025ba:	4418      	add	r0, r3
 80025bc:	f800 8c41 	strb.w	r8, [r0, #-65]
	  HAL_SPI_DeInit(DISP_SPI_PTR);
 80025c0:	4648      	mov	r0, r9
 80025c2:	f7fe faf9 	bl	8000bb8 <HAL_SPI_DeInit>
	  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80025c6:	2308      	movs	r3, #8
	  HAL_SPI_Init(DISP_SPI_PTR);
 80025c8:	4648      	mov	r0, r9
	  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80025ca:	f8ca 301c 	str.w	r3, [sl, #28]
	  HAL_SPI_Init(DISP_SPI_PTR);
 80025ce:	f7fe fab8 	bl	8000b42 <HAL_SPI_Init>
	  __HAL_SPI_ENABLE(DISP_SPI_PTR);
 80025d2:	f8da 2000 	ldr.w	r2, [sl]
	  DISP_CS_SELECT;
 80025d6:	2102      	movs	r1, #2
	  __HAL_SPI_ENABLE(DISP_SPI_PTR);
 80025d8:	6813      	ldr	r3, [r2, #0]
	  DISP_CS_SELECT;
 80025da:	4628      	mov	r0, r5
	  __HAL_SPI_ENABLE(DISP_SPI_PTR);
 80025dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025e0:	6013      	str	r3, [r2, #0]
	  DISP_CS_SELECT;
 80025e2:	2200      	movs	r2, #0
 80025e4:	f7fd ffc6 	bl	8000574 <HAL_GPIO_WritePin>
	  ILI9341_Fill_Screen(MYFON);
 80025e8:	f642 1065 	movw	r0, #10597	; 0x2965
 80025ec:	f7ff f982 	bl	80018f4 <ILI9341_Fill_Screen>
	  ILI9341_WriteString(10, 120, buf, Font_11x18, WHITE, MYFON);
 80025f0:	f642 1365 	movw	r3, #10597	; 0x2965
 80025f4:	9302      	str	r3, [sp, #8]
 80025f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025fa:	9301      	str	r3, [sp, #4]
 80025fc:	6873      	ldr	r3, [r6, #4]
 80025fe:	aa0e      	add	r2, sp, #56	; 0x38
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	6833      	ldr	r3, [r6, #0]
 8002604:	2178      	movs	r1, #120	; 0x78
 8002606:	200a      	movs	r0, #10
 8002608:	f7ff fc7a 	bl	8001f00 <ILI9341_WriteString>
	  if(x > 250 && x < 285 && y > 65 && y < 96) // если нажатие происходит в области этих координат
 800260c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8002610:	f1a3 02fb 	sub.w	r2, r3, #251	; 0xfb
 8002614:	2a21      	cmp	r2, #33	; 0x21
 8002616:	d805      	bhi.n	8002624 <main+0x600>
 8002618:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800261c:	3a42      	subs	r2, #66	; 0x42
 800261e:	b292      	uxth	r2, r2
 8002620:	2a1d      	cmp	r2, #29
 8002622:	d918      	bls.n	8002656 <main+0x632>
	  else if(x > 120 && x < 160 && y > 50 && y < 90) // если нажатие происходит в области этих координат
 8002624:	f1a3 0279 	sub.w	r2, r3, #121	; 0x79
 8002628:	2a26      	cmp	r2, #38	; 0x26
 800262a:	d805      	bhi.n	8002638 <main+0x614>
 800262c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8002630:	3a33      	subs	r2, #51	; 0x33
 8002632:	b292      	uxth	r2, r2
 8002634:	2a26      	cmp	r2, #38	; 0x26
 8002636:	d90e      	bls.n	8002656 <main+0x632>
	  else if(x > 5 && x < 90 && y > 160 && y < 230 && flag_hold) // первая кнопка
 8002638:	1f9a      	subs	r2, r3, #6
 800263a:	2a53      	cmp	r2, #83	; 0x53
 800263c:	d84b      	bhi.n	80026d6 <main+0x6b2>
 800263e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8002642:	3aa1      	subs	r2, #161	; 0xa1
 8002644:	b292      	uxth	r2, r2
 8002646:	2a44      	cmp	r2, #68	; 0x44
 8002648:	d845      	bhi.n	80026d6 <main+0x6b2>
 800264a:	2c00      	cmp	r4, #0
 800264c:	d043      	beq.n	80026d6 <main+0x6b2>
		  timme_hold = HAL_GetTick();
 800264e:	f7fd fdc7 	bl	80001e0 <HAL_GetTick>
		  flag_hold = 0;
 8002652:	2400      	movs	r4, #0
		  timme_hold = HAL_GetTick();
 8002654:	9005      	str	r0, [sp, #20]
	  time_press = HAL_GetTick();
 8002656:	f7fd fdc3 	bl	80001e0 <HAL_GetTick>
 800265a:	4683      	mov	fp, r0
  if(!flag_press && (HAL_GetTick() - time_press) > 200) // задержка до следующего нажатия
 800265c:	b93f      	cbnz	r7, 800266e <main+0x64a>
 800265e:	f7fd fdbf 	bl	80001e0 <HAL_GetTick>
 8002662:	eba0 000b 	sub.w	r0, r0, fp
 8002666:	28c8      	cmp	r0, #200	; 0xc8
 8002668:	bf94      	ite	ls
 800266a:	2700      	movls	r7, #0
 800266c:	2701      	movhi	r7, #1
  if(!flag_hold && HAL_GPIO_ReadPin(IRQ_GPIO_Port, IRQ_Pin) != GPIO_PIN_RESET)
 800266e:	bb84      	cbnz	r4, 80026d2 <main+0x6ae>
 8002670:	2104      	movs	r1, #4
 8002672:	4628      	mov	r0, r5
 8002674:	f7fd ff78 	bl	8000568 <HAL_GPIO_ReadPin>
 8002678:	bb58      	cbnz	r0, 80026d2 <main+0x6ae>
  if(!flag_hold && (HAL_GetTick() - timme_hold) > 2000) // 2 sek удержание кнопки
 800267a:	f7fd fdb1 	bl	80001e0 <HAL_GetTick>
 800267e:	9b05      	ldr	r3, [sp, #20]
 8002680:	1ac0      	subs	r0, r0, r3
 8002682:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8002686:	f67f af57 	bls.w	8002538 <main+0x514>
	  if(HAL_GPIO_ReadPin(IRQ_GPIO_Port, IRQ_Pin) == GPIO_PIN_RESET)
 800268a:	2104      	movs	r1, #4
 800268c:	4628      	mov	r0, r5
 800268e:	f7fd ff6b 	bl	8000568 <HAL_GPIO_ReadPin>
 8002692:	b9f0      	cbnz	r0, 80026d2 <main+0x6ae>
		  if(x > 5 && x < 90 && y > 160 && y < 230) // первая кнопка
 8002694:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8002698:	1f93      	subs	r3, r2, #6
 800269a:	2b53      	cmp	r3, #83	; 0x53
 800269c:	d827      	bhi.n	80026ee <main+0x6ca>
 800269e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80026a2:	3ba1      	subs	r3, #161	; 0xa1
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	2b44      	cmp	r3, #68	; 0x44
 80026a8:	d821      	bhi.n	80026ee <main+0x6ca>
			  HAL_UART_Transmit(&huart1, (uint8_t*)"LONG PRESS_1\n", 13, 100); // отладка
 80026aa:	2364      	movs	r3, #100	; 0x64
 80026ac:	220d      	movs	r2, #13
 80026ae:	4925      	ldr	r1, [pc, #148]	; (8002744 <main+0x720>)
 80026b0:	4823      	ldr	r0, [pc, #140]	; (8002740 <main+0x71c>)
 80026b2:	f7fe fe5d 	bl	8001370 <HAL_UART_Transmit>
			  ILI9341_WriteString(10, 150, "LONG PRESS_1", Font_11x18, WHITE, MYFON); // отладка
 80026b6:	f642 1365 	movw	r3, #10597	; 0x2965
 80026ba:	9302      	str	r3, [sp, #8]
 80026bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026c0:	9301      	str	r3, [sp, #4]
 80026c2:	6873      	ldr	r3, [r6, #4]
 80026c4:	4a20      	ldr	r2, [pc, #128]	; (8002748 <main+0x724>)
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	6833      	ldr	r3, [r6, #0]
			  ILI9341_WriteString(10, 150, "LONG PRESS_2", Font_11x18, WHITE, MYFON); // отладка
 80026ca:	2196      	movs	r1, #150	; 0x96
 80026cc:	200a      	movs	r0, #10
 80026ce:	f7ff fc17 	bl	8001f00 <ILI9341_WriteString>
 80026d2:	2401      	movs	r4, #1
 80026d4:	e730      	b.n	8002538 <main+0x514>
	  else if(x > 100 && x < 200 && y > 160 && y < 230 && flag_hold) // вторая кнопка
 80026d6:	3b65      	subs	r3, #101	; 0x65
 80026d8:	2b62      	cmp	r3, #98	; 0x62
 80026da:	d8bc      	bhi.n	8002656 <main+0x632>
 80026dc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80026e0:	3ba1      	subs	r3, #161	; 0xa1
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	2b44      	cmp	r3, #68	; 0x44
 80026e6:	d8b6      	bhi.n	8002656 <main+0x632>
 80026e8:	2c00      	cmp	r4, #0
 80026ea:	d0b4      	beq.n	8002656 <main+0x632>
 80026ec:	e7af      	b.n	800264e <main+0x62a>
		  else if(x > 100 && x < 200 && y > 160 && y < 230) // вторая кнопка
 80026ee:	3a65      	subs	r2, #101	; 0x65
 80026f0:	2a62      	cmp	r2, #98	; 0x62
 80026f2:	d8ee      	bhi.n	80026d2 <main+0x6ae>
 80026f4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80026f8:	3ba1      	subs	r3, #161	; 0xa1
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	2b44      	cmp	r3, #68	; 0x44
 80026fe:	d8e8      	bhi.n	80026d2 <main+0x6ae>
			  HAL_UART_Transmit(&huart1, (uint8_t*)"LONG PRESS_2\n", 13, 100); // отладка
 8002700:	2364      	movs	r3, #100	; 0x64
 8002702:	220d      	movs	r2, #13
 8002704:	4911      	ldr	r1, [pc, #68]	; (800274c <main+0x728>)
 8002706:	480e      	ldr	r0, [pc, #56]	; (8002740 <main+0x71c>)
 8002708:	f7fe fe32 	bl	8001370 <HAL_UART_Transmit>
			  ILI9341_WriteString(10, 150, "LONG PRESS_2", Font_11x18, WHITE, MYFON); // отладка
 800270c:	f642 1365 	movw	r3, #10597	; 0x2965
 8002710:	9302      	str	r3, [sp, #8]
 8002712:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002716:	9301      	str	r3, [sp, #4]
 8002718:	6873      	ldr	r3, [r6, #4]
 800271a:	4a0d      	ldr	r2, [pc, #52]	; (8002750 <main+0x72c>)
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	6833      	ldr	r3, [r6, #0]
 8002720:	e7d3      	b.n	80026ca <main+0x6a6>
 8002722:	bf00      	nop
 8002724:	08005c10 	.word	0x08005c10
 8002728:	08008e23 	.word	0x08008e23
 800272c:	08008e35 	.word	0x08008e35
 8002730:	08008e49 	.word	0x08008e49
 8002734:	08008e5b 	.word	0x08008e5b
 8002738:	40010c00 	.word	0x40010c00
 800273c:	08008e6f 	.word	0x08008e6f
 8002740:	200000f8 	.word	0x200000f8
 8002744:	08008e7f 	.word	0x08008e7f
 8002748:	08008e8d 	.word	0x08008e8d
 800274c:	08008e9a 	.word	0x08008e9a
 8002750:	08008ea8 	.word	0x08008ea8
 8002754:	20000138 	.word	0x20000138

08002758 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002758:	4b0e      	ldr	r3, [pc, #56]	; (8002794 <HAL_MspInit+0x3c>)
{
 800275a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 800275c:	699a      	ldr	r2, [r3, #24]
 800275e:	f042 0201 	orr.w	r2, r2, #1
 8002762:	619a      	str	r2, [r3, #24]
 8002764:	699a      	ldr	r2, [r3, #24]
 8002766:	f002 0201 	and.w	r2, r2, #1
 800276a:	9200      	str	r2, [sp, #0]
 800276c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800276e:	69da      	ldr	r2, [r3, #28]
 8002770:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002774:	61da      	str	r2, [r3, #28]
 8002776:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002778:	4a07      	ldr	r2, [pc, #28]	; (8002798 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800277a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277e:	9301      	str	r3, [sp, #4]
 8002780:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002782:	6853      	ldr	r3, [r2, #4]
 8002784:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002788:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800278c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800278e:	b002      	add	sp, #8
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	40021000 	.word	0x40021000
 8002798:	40010000 	.word	0x40010000

0800279c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800279c:	b510      	push	{r4, lr}
 800279e:	4604      	mov	r4, r0
 80027a0:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a2:	2210      	movs	r2, #16
 80027a4:	2100      	movs	r1, #0
 80027a6:	a802      	add	r0, sp, #8
 80027a8:	f000 f9d0 	bl	8002b4c <memset>
  if(hspi->Instance==SPI1)
 80027ac:	6822      	ldr	r2, [r4, #0]
 80027ae:	4b16      	ldr	r3, [pc, #88]	; (8002808 <HAL_SPI_MspInit+0x6c>)
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d126      	bne.n	8002802 <HAL_SPI_MspInit+0x66>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80027b4:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 80027b8:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ba:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 80027bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80027c0:	619a      	str	r2, [r3, #24]
 80027c2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c4:	4811      	ldr	r0, [pc, #68]	; (800280c <HAL_SPI_MspInit+0x70>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80027c6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80027ca:	9200      	str	r2, [sp, #0]
 80027cc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ce:	699a      	ldr	r2, [r3, #24]
 80027d0:	f042 0204 	orr.w	r2, r2, #4
 80027d4:	619a      	str	r2, [r3, #24]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	f003 0304 	and.w	r3, r3, #4
 80027dc:	9301      	str	r3, [sp, #4]
 80027de:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80027e0:	23a0      	movs	r3, #160	; 0xa0
 80027e2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e4:	2302      	movs	r3, #2
 80027e6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027e8:	2303      	movs	r3, #3
 80027ea:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ec:	f7fd fd6c 	bl	80002c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80027f0:	2340      	movs	r3, #64	; 0x40
 80027f2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027f4:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f6:	a902      	add	r1, sp, #8
 80027f8:	4804      	ldr	r0, [pc, #16]	; (800280c <HAL_SPI_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027fa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fc:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027fe:	f7fd fd63 	bl	80002c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002802:	b006      	add	sp, #24
 8002804:	bd10      	pop	{r4, pc}
 8002806:	bf00      	nop
 8002808:	40013000 	.word	0x40013000
 800280c:	40010800 	.word	0x40010800

08002810 <HAL_SPI_MspDeInit>:
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
  if(hspi->Instance==SPI1)
 8002810:	6802      	ldr	r2, [r0, #0]
 8002812:	4b06      	ldr	r3, [pc, #24]	; (800282c <HAL_SPI_MspDeInit+0x1c>)
 8002814:	429a      	cmp	r2, r3
 8002816:	d108      	bne.n	800282a <HAL_SPI_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8002818:	4a05      	ldr	r2, [pc, #20]	; (8002830 <HAL_SPI_MspDeInit+0x20>)
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 800281a:	21e0      	movs	r1, #224	; 0xe0
    __HAL_RCC_SPI1_CLK_DISABLE();
 800281c:	6993      	ldr	r3, [r2, #24]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 800281e:	4805      	ldr	r0, [pc, #20]	; (8002834 <HAL_SPI_MspDeInit+0x24>)
    __HAL_RCC_SPI1_CLK_DISABLE();
 8002820:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002824:	6193      	str	r3, [r2, #24]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8002826:	f7fd be31 	b.w	800048c <HAL_GPIO_DeInit>
 800282a:	4770      	bx	lr
 800282c:	40013000 	.word	0x40013000
 8002830:	40021000 	.word	0x40021000
 8002834:	40010800 	.word	0x40010800

08002838 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM4)
 8002838:	6802      	ldr	r2, [r0, #0]
 800283a:	4b08      	ldr	r3, [pc, #32]	; (800285c <HAL_TIM_PWM_MspInit+0x24>)
{
 800283c:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM4)
 800283e:	429a      	cmp	r2, r3
 8002840:	d10a      	bne.n	8002858 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002842:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002846:	69da      	ldr	r2, [r3, #28]
 8002848:	f042 0204 	orr.w	r2, r2, #4
 800284c:	61da      	str	r2, [r3, #28]
 800284e:	69db      	ldr	r3, [r3, #28]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	9301      	str	r3, [sp, #4]
 8002856:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002858:	b002      	add	sp, #8
 800285a:	4770      	bx	lr
 800285c:	40000800 	.word	0x40000800

08002860 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002860:	b510      	push	{r4, lr}
 8002862:	4604      	mov	r4, r0
 8002864:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002866:	2210      	movs	r2, #16
 8002868:	2100      	movs	r1, #0
 800286a:	a802      	add	r0, sp, #8
 800286c:	f000 f96e 	bl	8002b4c <memset>
  if(htim->Instance==TIM4)
 8002870:	6822      	ldr	r2, [r4, #0]
 8002872:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <HAL_TIM_MspPostInit+0x44>)
 8002874:	429a      	cmp	r2, r3
 8002876:	d113      	bne.n	80028a0 <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002878:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800287c:	699a      	ldr	r2, [r3, #24]
    PB6     ------> TIM4_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800287e:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002880:	f042 0208 	orr.w	r2, r2, #8
 8002884:	619a      	str	r2, [r3, #24]
 8002886:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002888:	4807      	ldr	r0, [pc, #28]	; (80028a8 <HAL_TIM_MspPostInit+0x48>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800288a:	f003 0308 	and.w	r3, r3, #8
 800288e:	9301      	str	r3, [sp, #4]
 8002890:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002892:	2340      	movs	r3, #64	; 0x40
 8002894:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002896:	2302      	movs	r3, #2
 8002898:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800289c:	f7fd fd14 	bl	80002c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80028a0:	b006      	add	sp, #24
 80028a2:	bd10      	pop	{r4, pc}
 80028a4:	40000800 	.word	0x40000800
 80028a8:	40010c00 	.word	0x40010c00

080028ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028ac:	b510      	push	{r4, lr}
 80028ae:	4604      	mov	r4, r0
 80028b0:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b2:	2210      	movs	r2, #16
 80028b4:	2100      	movs	r1, #0
 80028b6:	a802      	add	r0, sp, #8
 80028b8:	f000 f948 	bl	8002b4c <memset>
  if(huart->Instance==USART1)
 80028bc:	6822      	ldr	r2, [r4, #0]
 80028be:	4b17      	ldr	r3, [pc, #92]	; (800291c <HAL_UART_MspInit+0x70>)
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d128      	bne.n	8002916 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028c4:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80028c8:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ca:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 80028cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028d0:	619a      	str	r2, [r3, #24]
 80028d2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028d4:	4812      	ldr	r0, [pc, #72]	; (8002920 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80028d6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80028da:	9200      	str	r2, [sp, #0]
 80028dc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028de:	699a      	ldr	r2, [r3, #24]
 80028e0:	f042 0204 	orr.w	r2, r2, #4
 80028e4:	619a      	str	r2, [r3, #24]
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	9301      	str	r3, [sp, #4]
 80028ee:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80028f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028f4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f6:	2302      	movs	r3, #2
 80028f8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028fa:	2303      	movs	r3, #3
 80028fc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028fe:	f7fd fce3 	bl	80002c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002902:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002906:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002908:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800290a:	a902      	add	r1, sp, #8
 800290c:	4804      	ldr	r0, [pc, #16]	; (8002920 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800290e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002910:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002912:	f7fd fcd9 	bl	80002c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002916:	b006      	add	sp, #24
 8002918:	bd10      	pop	{r4, pc}
 800291a:	bf00      	nop
 800291c:	40013800 	.word	0x40013800
 8002920:	40010800 	.word	0x40010800

08002924 <NMI_Handler>:
 8002924:	4770      	bx	lr

08002926 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002926:	e7fe      	b.n	8002926 <HardFault_Handler>

08002928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002928:	e7fe      	b.n	8002928 <MemManage_Handler>

0800292a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800292a:	e7fe      	b.n	800292a <BusFault_Handler>

0800292c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800292c:	e7fe      	b.n	800292c <UsageFault_Handler>

0800292e <SVC_Handler>:
 800292e:	4770      	bx	lr

08002930 <DebugMon_Handler>:
 8002930:	4770      	bx	lr

08002932 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002932:	4770      	bx	lr

08002934 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002934:	f7fd bc48 	b.w	80001c8 <HAL_IncTick>

08002938 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002938:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800293a:	4b0a      	ldr	r3, [pc, #40]	; (8002964 <_sbrk+0x2c>)
{
 800293c:	4602      	mov	r2, r0
	if (heap_end == 0)
 800293e:	6819      	ldr	r1, [r3, #0]
 8002940:	b909      	cbnz	r1, 8002946 <_sbrk+0xe>
		heap_end = &end;
 8002942:	4909      	ldr	r1, [pc, #36]	; (8002968 <_sbrk+0x30>)
 8002944:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8002946:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8002948:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800294a:	4402      	add	r2, r0
 800294c:	428a      	cmp	r2, r1
 800294e:	d906      	bls.n	800295e <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002950:	f000 f8d2 	bl	8002af8 <__errno>
 8002954:	230c      	movs	r3, #12
 8002956:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002958:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800295c:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 800295e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8002960:	bd08      	pop	{r3, pc}
 8002962:	bf00      	nop
 8002964:	200000a8 	.word	0x200000a8
 8002968:	20000194 	.word	0x20000194

0800296c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800296c:	4b0f      	ldr	r3, [pc, #60]	; (80029ac <SystemInit+0x40>)
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	f042 0201 	orr.w	r2, r2, #1
 8002974:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002976:	6859      	ldr	r1, [r3, #4]
 8002978:	4a0d      	ldr	r2, [pc, #52]	; (80029b0 <SystemInit+0x44>)
 800297a:	400a      	ands	r2, r1
 800297c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002984:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002988:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002990:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002998:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800299a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800299e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80029a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029a4:	4b03      	ldr	r3, [pc, #12]	; (80029b4 <SystemInit+0x48>)
 80029a6:	609a      	str	r2, [r3, #8]
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	40021000 	.word	0x40021000
 80029b0:	f8ff0000 	.word	0xf8ff0000
 80029b4:	e000ed00 	.word	0xe000ed00

080029b8 <ILI9341_TouchGetCoordinates>:
#include "stdio.h"
extern UART_HandleTypeDef huart1;*/


uint8_t ILI9341_TouchGetCoordinates(uint16_t *x, uint16_t *y)
{
 80029b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ba:	4606      	mov	r6, r0
 80029bc:	b085      	sub	sp, #20
 80029be:	460d      	mov	r5, r1
	if(HAL_GPIO_ReadPin(IRQ_GPIO_Port, IRQ_Pin) != GPIO_PIN_RESET) return 0;
 80029c0:	4835      	ldr	r0, [pc, #212]	; (8002a98 <ILI9341_TouchGetCoordinates+0xe0>)
 80029c2:	2104      	movs	r1, #4
 80029c4:	f7fd fdd0 	bl	8000568 <HAL_GPIO_ReadPin>
 80029c8:	4604      	mov	r4, r0
 80029ca:	2800      	cmp	r0, #0
 80029cc:	d162      	bne.n	8002a94 <ILI9341_TouchGetCoordinates+0xdc>
    uint32_t avg_y = 0;

	HAL_SPI_Transmit(TOUCH_SPI_PTR, (uint8_t*)&cmd_read_y, 1, 1000);

	uint8_t y_raw[2] = {0,};
	HAL_SPI_TransmitReceive(TOUCH_SPI_PTR, (uint8_t*)zeroes_tx, y_raw, 2, 1000);
 80029ce:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
    TOUCH_CS_SELECT;
 80029d2:	4602      	mov	r2, r0
 80029d4:	2101      	movs	r1, #1
 80029d6:	4830      	ldr	r0, [pc, #192]	; (8002a98 <ILI9341_TouchGetCoordinates+0xe0>)
 80029d8:	f7fd fdcc 	bl	8000574 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(TOUCH_SPI_PTR, (uint8_t*)&cmd_read_y, 1, 1000);
 80029dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029e0:	2201      	movs	r2, #1
 80029e2:	492e      	ldr	r1, [pc, #184]	; (8002a9c <ILI9341_TouchGetCoordinates+0xe4>)
 80029e4:	482e      	ldr	r0, [pc, #184]	; (8002aa0 <ILI9341_TouchGetCoordinates+0xe8>)
 80029e6:	f7fe f8fd 	bl	8000be4 <HAL_SPI_Transmit>
	uint8_t y_raw[2] = {0,};
 80029ea:	aa04      	add	r2, sp, #16
 80029ec:	f822 4d08 	strh.w	r4, [r2, #-8]!
	HAL_SPI_TransmitReceive(TOUCH_SPI_PTR, (uint8_t*)zeroes_tx, y_raw, 2, 1000);
 80029f0:	2302      	movs	r3, #2
 80029f2:	9700      	str	r7, [sp, #0]
 80029f4:	492b      	ldr	r1, [pc, #172]	; (8002aa4 <ILI9341_TouchGetCoordinates+0xec>)
 80029f6:	482a      	ldr	r0, [pc, #168]	; (8002aa0 <ILI9341_TouchGetCoordinates+0xe8>)
 80029f8:	f7fe f99d 	bl	8000d36 <HAL_SPI_TransmitReceive>

	HAL_SPI_Transmit(TOUCH_SPI_PTR, (uint8_t*)&cmd_read_x, 1, 1000);
 80029fc:	463b      	mov	r3, r7
 80029fe:	2201      	movs	r2, #1
 8002a00:	4929      	ldr	r1, [pc, #164]	; (8002aa8 <ILI9341_TouchGetCoordinates+0xf0>)
 8002a02:	4827      	ldr	r0, [pc, #156]	; (8002aa0 <ILI9341_TouchGetCoordinates+0xe8>)
 8002a04:	f7fe f8ee 	bl	8000be4 <HAL_SPI_Transmit>

	uint8_t x_raw[2] = {0,};
 8002a08:	aa04      	add	r2, sp, #16
 8002a0a:	f822 4d04 	strh.w	r4, [r2, #-4]!
	HAL_SPI_TransmitReceive(TOUCH_SPI_PTR, (uint8_t*)zeroes_tx, x_raw, 2, 1000);
 8002a0e:	2302      	movs	r3, #2
 8002a10:	9700      	str	r7, [sp, #0]
 8002a12:	4924      	ldr	r1, [pc, #144]	; (8002aa4 <ILI9341_TouchGetCoordinates+0xec>)
 8002a14:	4822      	ldr	r0, [pc, #136]	; (8002aa0 <ILI9341_TouchGetCoordinates+0xe8>)
 8002a16:	f7fe f98e 	bl	8000d36 <HAL_SPI_TransmitReceive>
	// калибровка
	/*char buf[64] = {0,};
	snprintf(buf, 64, "ADC_X = %lu, ADC_Y = %lu\n", avg_x, avg_y);
	HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), 100);*/

    TOUCH_CS_UNSELECT;
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	481e      	ldr	r0, [pc, #120]	; (8002a98 <ILI9341_TouchGetCoordinates+0xe0>)
 8002a1e:	4611      	mov	r1, r2
 8002a20:	f8bd 700c 	ldrh.w	r7, [sp, #12]
 8002a24:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 8002a28:	f7fd fda4 	bl	8000574 <HAL_GPIO_WritePin>

    if(avg_x < TOUCH_MIN_RAW_X) avg_x = TOUCH_MIN_RAW_X;
 8002a2c:	f240 53db 	movw	r3, #1499	; 0x5db
 8002a30:	ba7f      	rev16	r7, r7
 8002a32:	b2bf      	uxth	r7, r7
 8002a34:	ba64      	rev16	r4, r4
 8002a36:	429f      	cmp	r7, r3
 8002a38:	b2a4      	uxth	r4, r4
 8002a3a:	d925      	bls.n	8002a88 <ILI9341_TouchGetCoordinates+0xd0>
 8002a3c:	f247 5230 	movw	r2, #30000	; 0x7530
 8002a40:	4297      	cmp	r7, r2
 8002a42:	bf28      	it	cs
 8002a44:	4617      	movcs	r7, r2
    if(avg_x > TOUCH_MAX_RAW_X) avg_x = TOUCH_MAX_RAW_X;

    if(avg_y < TOUCH_MIN_RAW_X) avg_y = TOUCH_MIN_RAW_Y;
 8002a46:	429c      	cmp	r4, r3
 8002a48:	d921      	bls.n	8002a8e <ILI9341_TouchGetCoordinates+0xd6>
 8002a4a:	f247 5330 	movw	r3, #30000	; 0x7530
 8002a4e:	429c      	cmp	r4, r3
 8002a50:	bf28      	it	cs
 8002a52:	461c      	movcs	r4, r3
    if(avg_y > TOUCH_MAX_RAW_Y) avg_y = TOUCH_MAX_RAW_Y;

    *x = (avg_x - TOUCH_MIN_RAW_X) * TOUCH_SCALE_X / (TOUCH_MAX_RAW_X - TOUCH_MIN_RAW_X);
 8002a54:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002a58:	f646 7254 	movw	r2, #28500	; 0x6f54
 8002a5c:	437b      	muls	r3, r7
 8002a5e:	f5a3 23ea 	sub.w	r3, r3, #479232	; 0x75000
 8002a62:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8002a66:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a6a:	8033      	strh	r3, [r6, #0]
    *y = (avg_y - TOUCH_MIN_RAW_Y) * TOUCH_SCALE_Y / (TOUCH_MAX_RAW_Y - TOUCH_MIN_RAW_Y);
 8002a6c:	23f0      	movs	r3, #240	; 0xf0
 8002a6e:	f646 326c 	movw	r2, #27500	; 0x6b6c
 8002a72:	4363      	muls	r3, r4
 8002a74:	f5a3 2312 	sub.w	r3, r3, #598016	; 0x92000
 8002a78:	f5a3 63f8 	sub.w	r3, r3, #1984	; 0x7c0
 8002a7c:	fbb3 f3f2 	udiv	r3, r3, r2

    return 1;
 8002a80:	2001      	movs	r0, #1
    *y = (avg_y - TOUCH_MIN_RAW_Y) * TOUCH_SCALE_Y / (TOUCH_MAX_RAW_Y - TOUCH_MIN_RAW_Y);
 8002a82:	802b      	strh	r3, [r5, #0]
}
 8002a84:	b005      	add	sp, #20
 8002a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(avg_x < TOUCH_MIN_RAW_X) avg_x = TOUCH_MIN_RAW_X;
 8002a88:	f240 57dc 	movw	r7, #1500	; 0x5dc
 8002a8c:	e7db      	b.n	8002a46 <ILI9341_TouchGetCoordinates+0x8e>
    if(avg_y < TOUCH_MIN_RAW_X) avg_y = TOUCH_MIN_RAW_Y;
 8002a8e:	f640 14c4 	movw	r4, #2500	; 0x9c4
 8002a92:	e7df      	b.n	8002a54 <ILI9341_TouchGetCoordinates+0x9c>
	if(HAL_GPIO_ReadPin(IRQ_GPIO_Port, IRQ_Pin) != GPIO_PIN_RESET) return 0;
 8002a94:	2000      	movs	r0, #0
 8002a96:	e7f5      	b.n	8002a84 <ILI9341_TouchGetCoordinates+0xcc>
 8002a98:	40010c00 	.word	0x40010c00
 8002a9c:	08008ece 	.word	0x08008ece
 8002aa0:	20000138 	.word	0x20000138
 8002aa4:	08008ecf 	.word	0x08008ecf
 8002aa8:	08008ecd 	.word	0x08008ecd

08002aac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002aac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002aae:	e003      	b.n	8002ab8 <LoopCopyDataInit>

08002ab0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002ab0:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002ab2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002ab4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002ab6:	3104      	adds	r1, #4

08002ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002ab8:	480a      	ldr	r0, [pc, #40]	; (8002ae4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002aba:	4b0b      	ldr	r3, [pc, #44]	; (8002ae8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002abc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002abe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002ac0:	d3f6      	bcc.n	8002ab0 <CopyDataInit>
  ldr r2, =_sbss
 8002ac2:	4a0a      	ldr	r2, [pc, #40]	; (8002aec <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002ac4:	e002      	b.n	8002acc <LoopFillZerobss>

08002ac6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002ac6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002ac8:	f842 3b04 	str.w	r3, [r2], #4

08002acc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002acc:	4b08      	ldr	r3, [pc, #32]	; (8002af0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002ace:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002ad0:	d3f9      	bcc.n	8002ac6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002ad2:	f7ff ff4b 	bl	800296c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ad6:	f000 f815 	bl	8002b04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ada:	f7ff faa3 	bl	8002024 <main>
  bx lr
 8002ade:	4770      	bx	lr
  ldr r3, =_sidata
 8002ae0:	08008f0c 	.word	0x08008f0c
  ldr r0, =_sdata
 8002ae4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002ae8:	2000008c 	.word	0x2000008c
  ldr r2, =_sbss
 8002aec:	2000008c 	.word	0x2000008c
  ldr r3, = _ebss
 8002af0:	20000194 	.word	0x20000194

08002af4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002af4:	e7fe      	b.n	8002af4 <ADC1_2_IRQHandler>
	...

08002af8 <__errno>:
 8002af8:	4b01      	ldr	r3, [pc, #4]	; (8002b00 <__errno+0x8>)
 8002afa:	6818      	ldr	r0, [r3, #0]
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	20000028 	.word	0x20000028

08002b04 <__libc_init_array>:
 8002b04:	b570      	push	{r4, r5, r6, lr}
 8002b06:	2500      	movs	r5, #0
 8002b08:	4e0c      	ldr	r6, [pc, #48]	; (8002b3c <__libc_init_array+0x38>)
 8002b0a:	4c0d      	ldr	r4, [pc, #52]	; (8002b40 <__libc_init_array+0x3c>)
 8002b0c:	1ba4      	subs	r4, r4, r6
 8002b0e:	10a4      	asrs	r4, r4, #2
 8002b10:	42a5      	cmp	r5, r4
 8002b12:	d109      	bne.n	8002b28 <__libc_init_array+0x24>
 8002b14:	f000 fc5e 	bl	80033d4 <_init>
 8002b18:	2500      	movs	r5, #0
 8002b1a:	4e0a      	ldr	r6, [pc, #40]	; (8002b44 <__libc_init_array+0x40>)
 8002b1c:	4c0a      	ldr	r4, [pc, #40]	; (8002b48 <__libc_init_array+0x44>)
 8002b1e:	1ba4      	subs	r4, r4, r6
 8002b20:	10a4      	asrs	r4, r4, #2
 8002b22:	42a5      	cmp	r5, r4
 8002b24:	d105      	bne.n	8002b32 <__libc_init_array+0x2e>
 8002b26:	bd70      	pop	{r4, r5, r6, pc}
 8002b28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b2c:	4798      	blx	r3
 8002b2e:	3501      	adds	r5, #1
 8002b30:	e7ee      	b.n	8002b10 <__libc_init_array+0xc>
 8002b32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b36:	4798      	blx	r3
 8002b38:	3501      	adds	r5, #1
 8002b3a:	e7f2      	b.n	8002b22 <__libc_init_array+0x1e>
 8002b3c:	08008f04 	.word	0x08008f04
 8002b40:	08008f04 	.word	0x08008f04
 8002b44:	08008f04 	.word	0x08008f04
 8002b48:	08008f08 	.word	0x08008f08

08002b4c <memset>:
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	4402      	add	r2, r0
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d100      	bne.n	8002b56 <memset+0xa>
 8002b54:	4770      	bx	lr
 8002b56:	f803 1b01 	strb.w	r1, [r3], #1
 8002b5a:	e7f9      	b.n	8002b50 <memset+0x4>

08002b5c <sniprintf>:
 8002b5c:	b40c      	push	{r2, r3}
 8002b5e:	b530      	push	{r4, r5, lr}
 8002b60:	4b17      	ldr	r3, [pc, #92]	; (8002bc0 <sniprintf+0x64>)
 8002b62:	1e0c      	subs	r4, r1, #0
 8002b64:	b09d      	sub	sp, #116	; 0x74
 8002b66:	681d      	ldr	r5, [r3, #0]
 8002b68:	da08      	bge.n	8002b7c <sniprintf+0x20>
 8002b6a:	238b      	movs	r3, #139	; 0x8b
 8002b6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b70:	602b      	str	r3, [r5, #0]
 8002b72:	b01d      	add	sp, #116	; 0x74
 8002b74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002b78:	b002      	add	sp, #8
 8002b7a:	4770      	bx	lr
 8002b7c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002b80:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002b84:	bf0c      	ite	eq
 8002b86:	4623      	moveq	r3, r4
 8002b88:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8002b8c:	9304      	str	r3, [sp, #16]
 8002b8e:	9307      	str	r3, [sp, #28]
 8002b90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b94:	9002      	str	r0, [sp, #8]
 8002b96:	9006      	str	r0, [sp, #24]
 8002b98:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002b9c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002b9e:	ab21      	add	r3, sp, #132	; 0x84
 8002ba0:	a902      	add	r1, sp, #8
 8002ba2:	4628      	mov	r0, r5
 8002ba4:	9301      	str	r3, [sp, #4]
 8002ba6:	f000 f869 	bl	8002c7c <_svfiprintf_r>
 8002baa:	1c43      	adds	r3, r0, #1
 8002bac:	bfbc      	itt	lt
 8002bae:	238b      	movlt	r3, #139	; 0x8b
 8002bb0:	602b      	strlt	r3, [r5, #0]
 8002bb2:	2c00      	cmp	r4, #0
 8002bb4:	d0dd      	beq.n	8002b72 <sniprintf+0x16>
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	9b02      	ldr	r3, [sp, #8]
 8002bba:	701a      	strb	r2, [r3, #0]
 8002bbc:	e7d9      	b.n	8002b72 <sniprintf+0x16>
 8002bbe:	bf00      	nop
 8002bc0:	20000028 	.word	0x20000028

08002bc4 <__ssputs_r>:
 8002bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bc8:	688e      	ldr	r6, [r1, #8]
 8002bca:	4682      	mov	sl, r0
 8002bcc:	429e      	cmp	r6, r3
 8002bce:	460c      	mov	r4, r1
 8002bd0:	4691      	mov	r9, r2
 8002bd2:	4698      	mov	r8, r3
 8002bd4:	d835      	bhi.n	8002c42 <__ssputs_r+0x7e>
 8002bd6:	898a      	ldrh	r2, [r1, #12]
 8002bd8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002bdc:	d031      	beq.n	8002c42 <__ssputs_r+0x7e>
 8002bde:	2302      	movs	r3, #2
 8002be0:	6825      	ldr	r5, [r4, #0]
 8002be2:	6909      	ldr	r1, [r1, #16]
 8002be4:	1a6f      	subs	r7, r5, r1
 8002be6:	6965      	ldr	r5, [r4, #20]
 8002be8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002bec:	fb95 f5f3 	sdiv	r5, r5, r3
 8002bf0:	f108 0301 	add.w	r3, r8, #1
 8002bf4:	443b      	add	r3, r7
 8002bf6:	429d      	cmp	r5, r3
 8002bf8:	bf38      	it	cc
 8002bfa:	461d      	movcc	r5, r3
 8002bfc:	0553      	lsls	r3, r2, #21
 8002bfe:	d531      	bpl.n	8002c64 <__ssputs_r+0xa0>
 8002c00:	4629      	mov	r1, r5
 8002c02:	f000 fb47 	bl	8003294 <_malloc_r>
 8002c06:	4606      	mov	r6, r0
 8002c08:	b950      	cbnz	r0, 8002c20 <__ssputs_r+0x5c>
 8002c0a:	230c      	movs	r3, #12
 8002c0c:	f8ca 3000 	str.w	r3, [sl]
 8002c10:	89a3      	ldrh	r3, [r4, #12]
 8002c12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c1a:	81a3      	strh	r3, [r4, #12]
 8002c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c20:	463a      	mov	r2, r7
 8002c22:	6921      	ldr	r1, [r4, #16]
 8002c24:	f000 fac4 	bl	80031b0 <memcpy>
 8002c28:	89a3      	ldrh	r3, [r4, #12]
 8002c2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c32:	81a3      	strh	r3, [r4, #12]
 8002c34:	6126      	str	r6, [r4, #16]
 8002c36:	443e      	add	r6, r7
 8002c38:	6026      	str	r6, [r4, #0]
 8002c3a:	4646      	mov	r6, r8
 8002c3c:	6165      	str	r5, [r4, #20]
 8002c3e:	1bed      	subs	r5, r5, r7
 8002c40:	60a5      	str	r5, [r4, #8]
 8002c42:	4546      	cmp	r6, r8
 8002c44:	bf28      	it	cs
 8002c46:	4646      	movcs	r6, r8
 8002c48:	4649      	mov	r1, r9
 8002c4a:	4632      	mov	r2, r6
 8002c4c:	6820      	ldr	r0, [r4, #0]
 8002c4e:	f000 faba 	bl	80031c6 <memmove>
 8002c52:	68a3      	ldr	r3, [r4, #8]
 8002c54:	2000      	movs	r0, #0
 8002c56:	1b9b      	subs	r3, r3, r6
 8002c58:	60a3      	str	r3, [r4, #8]
 8002c5a:	6823      	ldr	r3, [r4, #0]
 8002c5c:	441e      	add	r6, r3
 8002c5e:	6026      	str	r6, [r4, #0]
 8002c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c64:	462a      	mov	r2, r5
 8002c66:	f000 fb73 	bl	8003350 <_realloc_r>
 8002c6a:	4606      	mov	r6, r0
 8002c6c:	2800      	cmp	r0, #0
 8002c6e:	d1e1      	bne.n	8002c34 <__ssputs_r+0x70>
 8002c70:	6921      	ldr	r1, [r4, #16]
 8002c72:	4650      	mov	r0, sl
 8002c74:	f000 fac2 	bl	80031fc <_free_r>
 8002c78:	e7c7      	b.n	8002c0a <__ssputs_r+0x46>
	...

08002c7c <_svfiprintf_r>:
 8002c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c80:	b09d      	sub	sp, #116	; 0x74
 8002c82:	9303      	str	r3, [sp, #12]
 8002c84:	898b      	ldrh	r3, [r1, #12]
 8002c86:	4680      	mov	r8, r0
 8002c88:	061c      	lsls	r4, r3, #24
 8002c8a:	460d      	mov	r5, r1
 8002c8c:	4616      	mov	r6, r2
 8002c8e:	d50f      	bpl.n	8002cb0 <_svfiprintf_r+0x34>
 8002c90:	690b      	ldr	r3, [r1, #16]
 8002c92:	b96b      	cbnz	r3, 8002cb0 <_svfiprintf_r+0x34>
 8002c94:	2140      	movs	r1, #64	; 0x40
 8002c96:	f000 fafd 	bl	8003294 <_malloc_r>
 8002c9a:	6028      	str	r0, [r5, #0]
 8002c9c:	6128      	str	r0, [r5, #16]
 8002c9e:	b928      	cbnz	r0, 8002cac <_svfiprintf_r+0x30>
 8002ca0:	230c      	movs	r3, #12
 8002ca2:	f8c8 3000 	str.w	r3, [r8]
 8002ca6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002caa:	e0c4      	b.n	8002e36 <_svfiprintf_r+0x1ba>
 8002cac:	2340      	movs	r3, #64	; 0x40
 8002cae:	616b      	str	r3, [r5, #20]
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	9309      	str	r3, [sp, #36]	; 0x24
 8002cb4:	2320      	movs	r3, #32
 8002cb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002cba:	2330      	movs	r3, #48	; 0x30
 8002cbc:	f04f 0b01 	mov.w	fp, #1
 8002cc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002cc4:	4637      	mov	r7, r6
 8002cc6:	463c      	mov	r4, r7
 8002cc8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d13c      	bne.n	8002d4a <_svfiprintf_r+0xce>
 8002cd0:	ebb7 0a06 	subs.w	sl, r7, r6
 8002cd4:	d00b      	beq.n	8002cee <_svfiprintf_r+0x72>
 8002cd6:	4653      	mov	r3, sl
 8002cd8:	4632      	mov	r2, r6
 8002cda:	4629      	mov	r1, r5
 8002cdc:	4640      	mov	r0, r8
 8002cde:	f7ff ff71 	bl	8002bc4 <__ssputs_r>
 8002ce2:	3001      	adds	r0, #1
 8002ce4:	f000 80a2 	beq.w	8002e2c <_svfiprintf_r+0x1b0>
 8002ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002cea:	4453      	add	r3, sl
 8002cec:	9309      	str	r3, [sp, #36]	; 0x24
 8002cee:	783b      	ldrb	r3, [r7, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f000 809b 	beq.w	8002e2c <_svfiprintf_r+0x1b0>
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cfc:	9304      	str	r3, [sp, #16]
 8002cfe:	9307      	str	r3, [sp, #28]
 8002d00:	9205      	str	r2, [sp, #20]
 8002d02:	9306      	str	r3, [sp, #24]
 8002d04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002d08:	931a      	str	r3, [sp, #104]	; 0x68
 8002d0a:	2205      	movs	r2, #5
 8002d0c:	7821      	ldrb	r1, [r4, #0]
 8002d0e:	4850      	ldr	r0, [pc, #320]	; (8002e50 <_svfiprintf_r+0x1d4>)
 8002d10:	f000 fa40 	bl	8003194 <memchr>
 8002d14:	1c67      	adds	r7, r4, #1
 8002d16:	9b04      	ldr	r3, [sp, #16]
 8002d18:	b9d8      	cbnz	r0, 8002d52 <_svfiprintf_r+0xd6>
 8002d1a:	06d9      	lsls	r1, r3, #27
 8002d1c:	bf44      	itt	mi
 8002d1e:	2220      	movmi	r2, #32
 8002d20:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002d24:	071a      	lsls	r2, r3, #28
 8002d26:	bf44      	itt	mi
 8002d28:	222b      	movmi	r2, #43	; 0x2b
 8002d2a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002d2e:	7822      	ldrb	r2, [r4, #0]
 8002d30:	2a2a      	cmp	r2, #42	; 0x2a
 8002d32:	d016      	beq.n	8002d62 <_svfiprintf_r+0xe6>
 8002d34:	2100      	movs	r1, #0
 8002d36:	200a      	movs	r0, #10
 8002d38:	9a07      	ldr	r2, [sp, #28]
 8002d3a:	4627      	mov	r7, r4
 8002d3c:	783b      	ldrb	r3, [r7, #0]
 8002d3e:	3401      	adds	r4, #1
 8002d40:	3b30      	subs	r3, #48	; 0x30
 8002d42:	2b09      	cmp	r3, #9
 8002d44:	d950      	bls.n	8002de8 <_svfiprintf_r+0x16c>
 8002d46:	b1c9      	cbz	r1, 8002d7c <_svfiprintf_r+0x100>
 8002d48:	e011      	b.n	8002d6e <_svfiprintf_r+0xf2>
 8002d4a:	2b25      	cmp	r3, #37	; 0x25
 8002d4c:	d0c0      	beq.n	8002cd0 <_svfiprintf_r+0x54>
 8002d4e:	4627      	mov	r7, r4
 8002d50:	e7b9      	b.n	8002cc6 <_svfiprintf_r+0x4a>
 8002d52:	4a3f      	ldr	r2, [pc, #252]	; (8002e50 <_svfiprintf_r+0x1d4>)
 8002d54:	463c      	mov	r4, r7
 8002d56:	1a80      	subs	r0, r0, r2
 8002d58:	fa0b f000 	lsl.w	r0, fp, r0
 8002d5c:	4318      	orrs	r0, r3
 8002d5e:	9004      	str	r0, [sp, #16]
 8002d60:	e7d3      	b.n	8002d0a <_svfiprintf_r+0x8e>
 8002d62:	9a03      	ldr	r2, [sp, #12]
 8002d64:	1d11      	adds	r1, r2, #4
 8002d66:	6812      	ldr	r2, [r2, #0]
 8002d68:	9103      	str	r1, [sp, #12]
 8002d6a:	2a00      	cmp	r2, #0
 8002d6c:	db01      	blt.n	8002d72 <_svfiprintf_r+0xf6>
 8002d6e:	9207      	str	r2, [sp, #28]
 8002d70:	e004      	b.n	8002d7c <_svfiprintf_r+0x100>
 8002d72:	4252      	negs	r2, r2
 8002d74:	f043 0302 	orr.w	r3, r3, #2
 8002d78:	9207      	str	r2, [sp, #28]
 8002d7a:	9304      	str	r3, [sp, #16]
 8002d7c:	783b      	ldrb	r3, [r7, #0]
 8002d7e:	2b2e      	cmp	r3, #46	; 0x2e
 8002d80:	d10d      	bne.n	8002d9e <_svfiprintf_r+0x122>
 8002d82:	787b      	ldrb	r3, [r7, #1]
 8002d84:	1c79      	adds	r1, r7, #1
 8002d86:	2b2a      	cmp	r3, #42	; 0x2a
 8002d88:	d132      	bne.n	8002df0 <_svfiprintf_r+0x174>
 8002d8a:	9b03      	ldr	r3, [sp, #12]
 8002d8c:	3702      	adds	r7, #2
 8002d8e:	1d1a      	adds	r2, r3, #4
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	9203      	str	r2, [sp, #12]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	bfb8      	it	lt
 8002d98:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002d9c:	9305      	str	r3, [sp, #20]
 8002d9e:	4c2d      	ldr	r4, [pc, #180]	; (8002e54 <_svfiprintf_r+0x1d8>)
 8002da0:	2203      	movs	r2, #3
 8002da2:	7839      	ldrb	r1, [r7, #0]
 8002da4:	4620      	mov	r0, r4
 8002da6:	f000 f9f5 	bl	8003194 <memchr>
 8002daa:	b138      	cbz	r0, 8002dbc <_svfiprintf_r+0x140>
 8002dac:	2340      	movs	r3, #64	; 0x40
 8002dae:	1b00      	subs	r0, r0, r4
 8002db0:	fa03 f000 	lsl.w	r0, r3, r0
 8002db4:	9b04      	ldr	r3, [sp, #16]
 8002db6:	3701      	adds	r7, #1
 8002db8:	4303      	orrs	r3, r0
 8002dba:	9304      	str	r3, [sp, #16]
 8002dbc:	7839      	ldrb	r1, [r7, #0]
 8002dbe:	2206      	movs	r2, #6
 8002dc0:	4825      	ldr	r0, [pc, #148]	; (8002e58 <_svfiprintf_r+0x1dc>)
 8002dc2:	1c7e      	adds	r6, r7, #1
 8002dc4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002dc8:	f000 f9e4 	bl	8003194 <memchr>
 8002dcc:	2800      	cmp	r0, #0
 8002dce:	d035      	beq.n	8002e3c <_svfiprintf_r+0x1c0>
 8002dd0:	4b22      	ldr	r3, [pc, #136]	; (8002e5c <_svfiprintf_r+0x1e0>)
 8002dd2:	b9fb      	cbnz	r3, 8002e14 <_svfiprintf_r+0x198>
 8002dd4:	9b03      	ldr	r3, [sp, #12]
 8002dd6:	3307      	adds	r3, #7
 8002dd8:	f023 0307 	bic.w	r3, r3, #7
 8002ddc:	3308      	adds	r3, #8
 8002dde:	9303      	str	r3, [sp, #12]
 8002de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002de2:	444b      	add	r3, r9
 8002de4:	9309      	str	r3, [sp, #36]	; 0x24
 8002de6:	e76d      	b.n	8002cc4 <_svfiprintf_r+0x48>
 8002de8:	fb00 3202 	mla	r2, r0, r2, r3
 8002dec:	2101      	movs	r1, #1
 8002dee:	e7a4      	b.n	8002d3a <_svfiprintf_r+0xbe>
 8002df0:	2300      	movs	r3, #0
 8002df2:	240a      	movs	r4, #10
 8002df4:	4618      	mov	r0, r3
 8002df6:	9305      	str	r3, [sp, #20]
 8002df8:	460f      	mov	r7, r1
 8002dfa:	783a      	ldrb	r2, [r7, #0]
 8002dfc:	3101      	adds	r1, #1
 8002dfe:	3a30      	subs	r2, #48	; 0x30
 8002e00:	2a09      	cmp	r2, #9
 8002e02:	d903      	bls.n	8002e0c <_svfiprintf_r+0x190>
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0ca      	beq.n	8002d9e <_svfiprintf_r+0x122>
 8002e08:	9005      	str	r0, [sp, #20]
 8002e0a:	e7c8      	b.n	8002d9e <_svfiprintf_r+0x122>
 8002e0c:	fb04 2000 	mla	r0, r4, r0, r2
 8002e10:	2301      	movs	r3, #1
 8002e12:	e7f1      	b.n	8002df8 <_svfiprintf_r+0x17c>
 8002e14:	ab03      	add	r3, sp, #12
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	462a      	mov	r2, r5
 8002e1a:	4b11      	ldr	r3, [pc, #68]	; (8002e60 <_svfiprintf_r+0x1e4>)
 8002e1c:	a904      	add	r1, sp, #16
 8002e1e:	4640      	mov	r0, r8
 8002e20:	f3af 8000 	nop.w
 8002e24:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002e28:	4681      	mov	r9, r0
 8002e2a:	d1d9      	bne.n	8002de0 <_svfiprintf_r+0x164>
 8002e2c:	89ab      	ldrh	r3, [r5, #12]
 8002e2e:	065b      	lsls	r3, r3, #25
 8002e30:	f53f af39 	bmi.w	8002ca6 <_svfiprintf_r+0x2a>
 8002e34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e36:	b01d      	add	sp, #116	; 0x74
 8002e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e3c:	ab03      	add	r3, sp, #12
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	462a      	mov	r2, r5
 8002e42:	4b07      	ldr	r3, [pc, #28]	; (8002e60 <_svfiprintf_r+0x1e4>)
 8002e44:	a904      	add	r1, sp, #16
 8002e46:	4640      	mov	r0, r8
 8002e48:	f000 f884 	bl	8002f54 <_printf_i>
 8002e4c:	e7ea      	b.n	8002e24 <_svfiprintf_r+0x1a8>
 8002e4e:	bf00      	nop
 8002e50:	08008ed1 	.word	0x08008ed1
 8002e54:	08008ed7 	.word	0x08008ed7
 8002e58:	08008edb 	.word	0x08008edb
 8002e5c:	00000000 	.word	0x00000000
 8002e60:	08002bc5 	.word	0x08002bc5

08002e64 <_printf_common>:
 8002e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e68:	4691      	mov	r9, r2
 8002e6a:	461f      	mov	r7, r3
 8002e6c:	688a      	ldr	r2, [r1, #8]
 8002e6e:	690b      	ldr	r3, [r1, #16]
 8002e70:	4606      	mov	r6, r0
 8002e72:	4293      	cmp	r3, r2
 8002e74:	bfb8      	it	lt
 8002e76:	4613      	movlt	r3, r2
 8002e78:	f8c9 3000 	str.w	r3, [r9]
 8002e7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e80:	460c      	mov	r4, r1
 8002e82:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e86:	b112      	cbz	r2, 8002e8e <_printf_common+0x2a>
 8002e88:	3301      	adds	r3, #1
 8002e8a:	f8c9 3000 	str.w	r3, [r9]
 8002e8e:	6823      	ldr	r3, [r4, #0]
 8002e90:	0699      	lsls	r1, r3, #26
 8002e92:	bf42      	ittt	mi
 8002e94:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002e98:	3302      	addmi	r3, #2
 8002e9a:	f8c9 3000 	strmi.w	r3, [r9]
 8002e9e:	6825      	ldr	r5, [r4, #0]
 8002ea0:	f015 0506 	ands.w	r5, r5, #6
 8002ea4:	d107      	bne.n	8002eb6 <_printf_common+0x52>
 8002ea6:	f104 0a19 	add.w	sl, r4, #25
 8002eaa:	68e3      	ldr	r3, [r4, #12]
 8002eac:	f8d9 2000 	ldr.w	r2, [r9]
 8002eb0:	1a9b      	subs	r3, r3, r2
 8002eb2:	429d      	cmp	r5, r3
 8002eb4:	db2a      	blt.n	8002f0c <_printf_common+0xa8>
 8002eb6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002eba:	6822      	ldr	r2, [r4, #0]
 8002ebc:	3300      	adds	r3, #0
 8002ebe:	bf18      	it	ne
 8002ec0:	2301      	movne	r3, #1
 8002ec2:	0692      	lsls	r2, r2, #26
 8002ec4:	d42f      	bmi.n	8002f26 <_printf_common+0xc2>
 8002ec6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002eca:	4639      	mov	r1, r7
 8002ecc:	4630      	mov	r0, r6
 8002ece:	47c0      	blx	r8
 8002ed0:	3001      	adds	r0, #1
 8002ed2:	d022      	beq.n	8002f1a <_printf_common+0xb6>
 8002ed4:	6823      	ldr	r3, [r4, #0]
 8002ed6:	68e5      	ldr	r5, [r4, #12]
 8002ed8:	f003 0306 	and.w	r3, r3, #6
 8002edc:	2b04      	cmp	r3, #4
 8002ede:	bf18      	it	ne
 8002ee0:	2500      	movne	r5, #0
 8002ee2:	f8d9 2000 	ldr.w	r2, [r9]
 8002ee6:	f04f 0900 	mov.w	r9, #0
 8002eea:	bf08      	it	eq
 8002eec:	1aad      	subeq	r5, r5, r2
 8002eee:	68a3      	ldr	r3, [r4, #8]
 8002ef0:	6922      	ldr	r2, [r4, #16]
 8002ef2:	bf08      	it	eq
 8002ef4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	bfc4      	itt	gt
 8002efc:	1a9b      	subgt	r3, r3, r2
 8002efe:	18ed      	addgt	r5, r5, r3
 8002f00:	341a      	adds	r4, #26
 8002f02:	454d      	cmp	r5, r9
 8002f04:	d11b      	bne.n	8002f3e <_printf_common+0xda>
 8002f06:	2000      	movs	r0, #0
 8002f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	4652      	mov	r2, sl
 8002f10:	4639      	mov	r1, r7
 8002f12:	4630      	mov	r0, r6
 8002f14:	47c0      	blx	r8
 8002f16:	3001      	adds	r0, #1
 8002f18:	d103      	bne.n	8002f22 <_printf_common+0xbe>
 8002f1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f22:	3501      	adds	r5, #1
 8002f24:	e7c1      	b.n	8002eaa <_printf_common+0x46>
 8002f26:	2030      	movs	r0, #48	; 0x30
 8002f28:	18e1      	adds	r1, r4, r3
 8002f2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f2e:	1c5a      	adds	r2, r3, #1
 8002f30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f34:	4422      	add	r2, r4
 8002f36:	3302      	adds	r3, #2
 8002f38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f3c:	e7c3      	b.n	8002ec6 <_printf_common+0x62>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	4622      	mov	r2, r4
 8002f42:	4639      	mov	r1, r7
 8002f44:	4630      	mov	r0, r6
 8002f46:	47c0      	blx	r8
 8002f48:	3001      	adds	r0, #1
 8002f4a:	d0e6      	beq.n	8002f1a <_printf_common+0xb6>
 8002f4c:	f109 0901 	add.w	r9, r9, #1
 8002f50:	e7d7      	b.n	8002f02 <_printf_common+0x9e>
	...

08002f54 <_printf_i>:
 8002f54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002f58:	4617      	mov	r7, r2
 8002f5a:	7e0a      	ldrb	r2, [r1, #24]
 8002f5c:	b085      	sub	sp, #20
 8002f5e:	2a6e      	cmp	r2, #110	; 0x6e
 8002f60:	4698      	mov	r8, r3
 8002f62:	4606      	mov	r6, r0
 8002f64:	460c      	mov	r4, r1
 8002f66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002f68:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002f6c:	f000 80bc 	beq.w	80030e8 <_printf_i+0x194>
 8002f70:	d81a      	bhi.n	8002fa8 <_printf_i+0x54>
 8002f72:	2a63      	cmp	r2, #99	; 0x63
 8002f74:	d02e      	beq.n	8002fd4 <_printf_i+0x80>
 8002f76:	d80a      	bhi.n	8002f8e <_printf_i+0x3a>
 8002f78:	2a00      	cmp	r2, #0
 8002f7a:	f000 80c8 	beq.w	800310e <_printf_i+0x1ba>
 8002f7e:	2a58      	cmp	r2, #88	; 0x58
 8002f80:	f000 808a 	beq.w	8003098 <_printf_i+0x144>
 8002f84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f88:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002f8c:	e02a      	b.n	8002fe4 <_printf_i+0x90>
 8002f8e:	2a64      	cmp	r2, #100	; 0x64
 8002f90:	d001      	beq.n	8002f96 <_printf_i+0x42>
 8002f92:	2a69      	cmp	r2, #105	; 0x69
 8002f94:	d1f6      	bne.n	8002f84 <_printf_i+0x30>
 8002f96:	6821      	ldr	r1, [r4, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002f9e:	d023      	beq.n	8002fe8 <_printf_i+0x94>
 8002fa0:	1d11      	adds	r1, r2, #4
 8002fa2:	6019      	str	r1, [r3, #0]
 8002fa4:	6813      	ldr	r3, [r2, #0]
 8002fa6:	e027      	b.n	8002ff8 <_printf_i+0xa4>
 8002fa8:	2a73      	cmp	r2, #115	; 0x73
 8002faa:	f000 80b4 	beq.w	8003116 <_printf_i+0x1c2>
 8002fae:	d808      	bhi.n	8002fc2 <_printf_i+0x6e>
 8002fb0:	2a6f      	cmp	r2, #111	; 0x6f
 8002fb2:	d02a      	beq.n	800300a <_printf_i+0xb6>
 8002fb4:	2a70      	cmp	r2, #112	; 0x70
 8002fb6:	d1e5      	bne.n	8002f84 <_printf_i+0x30>
 8002fb8:	680a      	ldr	r2, [r1, #0]
 8002fba:	f042 0220 	orr.w	r2, r2, #32
 8002fbe:	600a      	str	r2, [r1, #0]
 8002fc0:	e003      	b.n	8002fca <_printf_i+0x76>
 8002fc2:	2a75      	cmp	r2, #117	; 0x75
 8002fc4:	d021      	beq.n	800300a <_printf_i+0xb6>
 8002fc6:	2a78      	cmp	r2, #120	; 0x78
 8002fc8:	d1dc      	bne.n	8002f84 <_printf_i+0x30>
 8002fca:	2278      	movs	r2, #120	; 0x78
 8002fcc:	496f      	ldr	r1, [pc, #444]	; (800318c <_printf_i+0x238>)
 8002fce:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002fd2:	e064      	b.n	800309e <_printf_i+0x14a>
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002fda:	1d11      	adds	r1, r2, #4
 8002fdc:	6019      	str	r1, [r3, #0]
 8002fde:	6813      	ldr	r3, [r2, #0]
 8002fe0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e0a3      	b.n	8003130 <_printf_i+0x1dc>
 8002fe8:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002fec:	f102 0104 	add.w	r1, r2, #4
 8002ff0:	6019      	str	r1, [r3, #0]
 8002ff2:	d0d7      	beq.n	8002fa4 <_printf_i+0x50>
 8002ff4:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	da03      	bge.n	8003004 <_printf_i+0xb0>
 8002ffc:	222d      	movs	r2, #45	; 0x2d
 8002ffe:	425b      	negs	r3, r3
 8003000:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003004:	4962      	ldr	r1, [pc, #392]	; (8003190 <_printf_i+0x23c>)
 8003006:	220a      	movs	r2, #10
 8003008:	e017      	b.n	800303a <_printf_i+0xe6>
 800300a:	6820      	ldr	r0, [r4, #0]
 800300c:	6819      	ldr	r1, [r3, #0]
 800300e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003012:	d003      	beq.n	800301c <_printf_i+0xc8>
 8003014:	1d08      	adds	r0, r1, #4
 8003016:	6018      	str	r0, [r3, #0]
 8003018:	680b      	ldr	r3, [r1, #0]
 800301a:	e006      	b.n	800302a <_printf_i+0xd6>
 800301c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003020:	f101 0004 	add.w	r0, r1, #4
 8003024:	6018      	str	r0, [r3, #0]
 8003026:	d0f7      	beq.n	8003018 <_printf_i+0xc4>
 8003028:	880b      	ldrh	r3, [r1, #0]
 800302a:	2a6f      	cmp	r2, #111	; 0x6f
 800302c:	bf14      	ite	ne
 800302e:	220a      	movne	r2, #10
 8003030:	2208      	moveq	r2, #8
 8003032:	4957      	ldr	r1, [pc, #348]	; (8003190 <_printf_i+0x23c>)
 8003034:	2000      	movs	r0, #0
 8003036:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800303a:	6865      	ldr	r5, [r4, #4]
 800303c:	2d00      	cmp	r5, #0
 800303e:	60a5      	str	r5, [r4, #8]
 8003040:	f2c0 809c 	blt.w	800317c <_printf_i+0x228>
 8003044:	6820      	ldr	r0, [r4, #0]
 8003046:	f020 0004 	bic.w	r0, r0, #4
 800304a:	6020      	str	r0, [r4, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d13f      	bne.n	80030d0 <_printf_i+0x17c>
 8003050:	2d00      	cmp	r5, #0
 8003052:	f040 8095 	bne.w	8003180 <_printf_i+0x22c>
 8003056:	4675      	mov	r5, lr
 8003058:	2a08      	cmp	r2, #8
 800305a:	d10b      	bne.n	8003074 <_printf_i+0x120>
 800305c:	6823      	ldr	r3, [r4, #0]
 800305e:	07da      	lsls	r2, r3, #31
 8003060:	d508      	bpl.n	8003074 <_printf_i+0x120>
 8003062:	6923      	ldr	r3, [r4, #16]
 8003064:	6862      	ldr	r2, [r4, #4]
 8003066:	429a      	cmp	r2, r3
 8003068:	bfde      	ittt	le
 800306a:	2330      	movle	r3, #48	; 0x30
 800306c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003070:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003074:	ebae 0305 	sub.w	r3, lr, r5
 8003078:	6123      	str	r3, [r4, #16]
 800307a:	f8cd 8000 	str.w	r8, [sp]
 800307e:	463b      	mov	r3, r7
 8003080:	aa03      	add	r2, sp, #12
 8003082:	4621      	mov	r1, r4
 8003084:	4630      	mov	r0, r6
 8003086:	f7ff feed 	bl	8002e64 <_printf_common>
 800308a:	3001      	adds	r0, #1
 800308c:	d155      	bne.n	800313a <_printf_i+0x1e6>
 800308e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003092:	b005      	add	sp, #20
 8003094:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003098:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800309c:	493c      	ldr	r1, [pc, #240]	; (8003190 <_printf_i+0x23c>)
 800309e:	6822      	ldr	r2, [r4, #0]
 80030a0:	6818      	ldr	r0, [r3, #0]
 80030a2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80030a6:	f100 0504 	add.w	r5, r0, #4
 80030aa:	601d      	str	r5, [r3, #0]
 80030ac:	d001      	beq.n	80030b2 <_printf_i+0x15e>
 80030ae:	6803      	ldr	r3, [r0, #0]
 80030b0:	e002      	b.n	80030b8 <_printf_i+0x164>
 80030b2:	0655      	lsls	r5, r2, #25
 80030b4:	d5fb      	bpl.n	80030ae <_printf_i+0x15a>
 80030b6:	8803      	ldrh	r3, [r0, #0]
 80030b8:	07d0      	lsls	r0, r2, #31
 80030ba:	bf44      	itt	mi
 80030bc:	f042 0220 	orrmi.w	r2, r2, #32
 80030c0:	6022      	strmi	r2, [r4, #0]
 80030c2:	b91b      	cbnz	r3, 80030cc <_printf_i+0x178>
 80030c4:	6822      	ldr	r2, [r4, #0]
 80030c6:	f022 0220 	bic.w	r2, r2, #32
 80030ca:	6022      	str	r2, [r4, #0]
 80030cc:	2210      	movs	r2, #16
 80030ce:	e7b1      	b.n	8003034 <_printf_i+0xe0>
 80030d0:	4675      	mov	r5, lr
 80030d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80030d6:	fb02 3310 	mls	r3, r2, r0, r3
 80030da:	5ccb      	ldrb	r3, [r1, r3]
 80030dc:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80030e0:	4603      	mov	r3, r0
 80030e2:	2800      	cmp	r0, #0
 80030e4:	d1f5      	bne.n	80030d2 <_printf_i+0x17e>
 80030e6:	e7b7      	b.n	8003058 <_printf_i+0x104>
 80030e8:	6808      	ldr	r0, [r1, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	f010 0f80 	tst.w	r0, #128	; 0x80
 80030f0:	6949      	ldr	r1, [r1, #20]
 80030f2:	d004      	beq.n	80030fe <_printf_i+0x1aa>
 80030f4:	1d10      	adds	r0, r2, #4
 80030f6:	6018      	str	r0, [r3, #0]
 80030f8:	6813      	ldr	r3, [r2, #0]
 80030fa:	6019      	str	r1, [r3, #0]
 80030fc:	e007      	b.n	800310e <_printf_i+0x1ba>
 80030fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003102:	f102 0004 	add.w	r0, r2, #4
 8003106:	6018      	str	r0, [r3, #0]
 8003108:	6813      	ldr	r3, [r2, #0]
 800310a:	d0f6      	beq.n	80030fa <_printf_i+0x1a6>
 800310c:	8019      	strh	r1, [r3, #0]
 800310e:	2300      	movs	r3, #0
 8003110:	4675      	mov	r5, lr
 8003112:	6123      	str	r3, [r4, #16]
 8003114:	e7b1      	b.n	800307a <_printf_i+0x126>
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	1d11      	adds	r1, r2, #4
 800311a:	6019      	str	r1, [r3, #0]
 800311c:	6815      	ldr	r5, [r2, #0]
 800311e:	2100      	movs	r1, #0
 8003120:	6862      	ldr	r2, [r4, #4]
 8003122:	4628      	mov	r0, r5
 8003124:	f000 f836 	bl	8003194 <memchr>
 8003128:	b108      	cbz	r0, 800312e <_printf_i+0x1da>
 800312a:	1b40      	subs	r0, r0, r5
 800312c:	6060      	str	r0, [r4, #4]
 800312e:	6863      	ldr	r3, [r4, #4]
 8003130:	6123      	str	r3, [r4, #16]
 8003132:	2300      	movs	r3, #0
 8003134:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003138:	e79f      	b.n	800307a <_printf_i+0x126>
 800313a:	6923      	ldr	r3, [r4, #16]
 800313c:	462a      	mov	r2, r5
 800313e:	4639      	mov	r1, r7
 8003140:	4630      	mov	r0, r6
 8003142:	47c0      	blx	r8
 8003144:	3001      	adds	r0, #1
 8003146:	d0a2      	beq.n	800308e <_printf_i+0x13a>
 8003148:	6823      	ldr	r3, [r4, #0]
 800314a:	079b      	lsls	r3, r3, #30
 800314c:	d507      	bpl.n	800315e <_printf_i+0x20a>
 800314e:	2500      	movs	r5, #0
 8003150:	f104 0919 	add.w	r9, r4, #25
 8003154:	68e3      	ldr	r3, [r4, #12]
 8003156:	9a03      	ldr	r2, [sp, #12]
 8003158:	1a9b      	subs	r3, r3, r2
 800315a:	429d      	cmp	r5, r3
 800315c:	db05      	blt.n	800316a <_printf_i+0x216>
 800315e:	68e0      	ldr	r0, [r4, #12]
 8003160:	9b03      	ldr	r3, [sp, #12]
 8003162:	4298      	cmp	r0, r3
 8003164:	bfb8      	it	lt
 8003166:	4618      	movlt	r0, r3
 8003168:	e793      	b.n	8003092 <_printf_i+0x13e>
 800316a:	2301      	movs	r3, #1
 800316c:	464a      	mov	r2, r9
 800316e:	4639      	mov	r1, r7
 8003170:	4630      	mov	r0, r6
 8003172:	47c0      	blx	r8
 8003174:	3001      	adds	r0, #1
 8003176:	d08a      	beq.n	800308e <_printf_i+0x13a>
 8003178:	3501      	adds	r5, #1
 800317a:	e7eb      	b.n	8003154 <_printf_i+0x200>
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1a7      	bne.n	80030d0 <_printf_i+0x17c>
 8003180:	780b      	ldrb	r3, [r1, #0]
 8003182:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003186:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800318a:	e765      	b.n	8003058 <_printf_i+0x104>
 800318c:	08008ef3 	.word	0x08008ef3
 8003190:	08008ee2 	.word	0x08008ee2

08003194 <memchr>:
 8003194:	b510      	push	{r4, lr}
 8003196:	b2c9      	uxtb	r1, r1
 8003198:	4402      	add	r2, r0
 800319a:	4290      	cmp	r0, r2
 800319c:	4603      	mov	r3, r0
 800319e:	d101      	bne.n	80031a4 <memchr+0x10>
 80031a0:	2000      	movs	r0, #0
 80031a2:	bd10      	pop	{r4, pc}
 80031a4:	781c      	ldrb	r4, [r3, #0]
 80031a6:	3001      	adds	r0, #1
 80031a8:	428c      	cmp	r4, r1
 80031aa:	d1f6      	bne.n	800319a <memchr+0x6>
 80031ac:	4618      	mov	r0, r3
 80031ae:	bd10      	pop	{r4, pc}

080031b0 <memcpy>:
 80031b0:	b510      	push	{r4, lr}
 80031b2:	1e43      	subs	r3, r0, #1
 80031b4:	440a      	add	r2, r1
 80031b6:	4291      	cmp	r1, r2
 80031b8:	d100      	bne.n	80031bc <memcpy+0xc>
 80031ba:	bd10      	pop	{r4, pc}
 80031bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80031c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80031c4:	e7f7      	b.n	80031b6 <memcpy+0x6>

080031c6 <memmove>:
 80031c6:	4288      	cmp	r0, r1
 80031c8:	b510      	push	{r4, lr}
 80031ca:	eb01 0302 	add.w	r3, r1, r2
 80031ce:	d803      	bhi.n	80031d8 <memmove+0x12>
 80031d0:	1e42      	subs	r2, r0, #1
 80031d2:	4299      	cmp	r1, r3
 80031d4:	d10c      	bne.n	80031f0 <memmove+0x2a>
 80031d6:	bd10      	pop	{r4, pc}
 80031d8:	4298      	cmp	r0, r3
 80031da:	d2f9      	bcs.n	80031d0 <memmove+0xa>
 80031dc:	1881      	adds	r1, r0, r2
 80031de:	1ad2      	subs	r2, r2, r3
 80031e0:	42d3      	cmn	r3, r2
 80031e2:	d100      	bne.n	80031e6 <memmove+0x20>
 80031e4:	bd10      	pop	{r4, pc}
 80031e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80031ea:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80031ee:	e7f7      	b.n	80031e0 <memmove+0x1a>
 80031f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80031f4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80031f8:	e7eb      	b.n	80031d2 <memmove+0xc>
	...

080031fc <_free_r>:
 80031fc:	b538      	push	{r3, r4, r5, lr}
 80031fe:	4605      	mov	r5, r0
 8003200:	2900      	cmp	r1, #0
 8003202:	d043      	beq.n	800328c <_free_r+0x90>
 8003204:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003208:	1f0c      	subs	r4, r1, #4
 800320a:	2b00      	cmp	r3, #0
 800320c:	bfb8      	it	lt
 800320e:	18e4      	addlt	r4, r4, r3
 8003210:	f000 f8d4 	bl	80033bc <__malloc_lock>
 8003214:	4a1e      	ldr	r2, [pc, #120]	; (8003290 <_free_r+0x94>)
 8003216:	6813      	ldr	r3, [r2, #0]
 8003218:	4610      	mov	r0, r2
 800321a:	b933      	cbnz	r3, 800322a <_free_r+0x2e>
 800321c:	6063      	str	r3, [r4, #4]
 800321e:	6014      	str	r4, [r2, #0]
 8003220:	4628      	mov	r0, r5
 8003222:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003226:	f000 b8ca 	b.w	80033be <__malloc_unlock>
 800322a:	42a3      	cmp	r3, r4
 800322c:	d90b      	bls.n	8003246 <_free_r+0x4a>
 800322e:	6821      	ldr	r1, [r4, #0]
 8003230:	1862      	adds	r2, r4, r1
 8003232:	4293      	cmp	r3, r2
 8003234:	bf01      	itttt	eq
 8003236:	681a      	ldreq	r2, [r3, #0]
 8003238:	685b      	ldreq	r3, [r3, #4]
 800323a:	1852      	addeq	r2, r2, r1
 800323c:	6022      	streq	r2, [r4, #0]
 800323e:	6063      	str	r3, [r4, #4]
 8003240:	6004      	str	r4, [r0, #0]
 8003242:	e7ed      	b.n	8003220 <_free_r+0x24>
 8003244:	4613      	mov	r3, r2
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	b10a      	cbz	r2, 800324e <_free_r+0x52>
 800324a:	42a2      	cmp	r2, r4
 800324c:	d9fa      	bls.n	8003244 <_free_r+0x48>
 800324e:	6819      	ldr	r1, [r3, #0]
 8003250:	1858      	adds	r0, r3, r1
 8003252:	42a0      	cmp	r0, r4
 8003254:	d10b      	bne.n	800326e <_free_r+0x72>
 8003256:	6820      	ldr	r0, [r4, #0]
 8003258:	4401      	add	r1, r0
 800325a:	1858      	adds	r0, r3, r1
 800325c:	4282      	cmp	r2, r0
 800325e:	6019      	str	r1, [r3, #0]
 8003260:	d1de      	bne.n	8003220 <_free_r+0x24>
 8003262:	6810      	ldr	r0, [r2, #0]
 8003264:	6852      	ldr	r2, [r2, #4]
 8003266:	4401      	add	r1, r0
 8003268:	6019      	str	r1, [r3, #0]
 800326a:	605a      	str	r2, [r3, #4]
 800326c:	e7d8      	b.n	8003220 <_free_r+0x24>
 800326e:	d902      	bls.n	8003276 <_free_r+0x7a>
 8003270:	230c      	movs	r3, #12
 8003272:	602b      	str	r3, [r5, #0]
 8003274:	e7d4      	b.n	8003220 <_free_r+0x24>
 8003276:	6820      	ldr	r0, [r4, #0]
 8003278:	1821      	adds	r1, r4, r0
 800327a:	428a      	cmp	r2, r1
 800327c:	bf01      	itttt	eq
 800327e:	6811      	ldreq	r1, [r2, #0]
 8003280:	6852      	ldreq	r2, [r2, #4]
 8003282:	1809      	addeq	r1, r1, r0
 8003284:	6021      	streq	r1, [r4, #0]
 8003286:	6062      	str	r2, [r4, #4]
 8003288:	605c      	str	r4, [r3, #4]
 800328a:	e7c9      	b.n	8003220 <_free_r+0x24>
 800328c:	bd38      	pop	{r3, r4, r5, pc}
 800328e:	bf00      	nop
 8003290:	200000ac 	.word	0x200000ac

08003294 <_malloc_r>:
 8003294:	b570      	push	{r4, r5, r6, lr}
 8003296:	1ccd      	adds	r5, r1, #3
 8003298:	f025 0503 	bic.w	r5, r5, #3
 800329c:	3508      	adds	r5, #8
 800329e:	2d0c      	cmp	r5, #12
 80032a0:	bf38      	it	cc
 80032a2:	250c      	movcc	r5, #12
 80032a4:	2d00      	cmp	r5, #0
 80032a6:	4606      	mov	r6, r0
 80032a8:	db01      	blt.n	80032ae <_malloc_r+0x1a>
 80032aa:	42a9      	cmp	r1, r5
 80032ac:	d903      	bls.n	80032b6 <_malloc_r+0x22>
 80032ae:	230c      	movs	r3, #12
 80032b0:	6033      	str	r3, [r6, #0]
 80032b2:	2000      	movs	r0, #0
 80032b4:	bd70      	pop	{r4, r5, r6, pc}
 80032b6:	f000 f881 	bl	80033bc <__malloc_lock>
 80032ba:	4a23      	ldr	r2, [pc, #140]	; (8003348 <_malloc_r+0xb4>)
 80032bc:	6814      	ldr	r4, [r2, #0]
 80032be:	4621      	mov	r1, r4
 80032c0:	b991      	cbnz	r1, 80032e8 <_malloc_r+0x54>
 80032c2:	4c22      	ldr	r4, [pc, #136]	; (800334c <_malloc_r+0xb8>)
 80032c4:	6823      	ldr	r3, [r4, #0]
 80032c6:	b91b      	cbnz	r3, 80032d0 <_malloc_r+0x3c>
 80032c8:	4630      	mov	r0, r6
 80032ca:	f000 f867 	bl	800339c <_sbrk_r>
 80032ce:	6020      	str	r0, [r4, #0]
 80032d0:	4629      	mov	r1, r5
 80032d2:	4630      	mov	r0, r6
 80032d4:	f000 f862 	bl	800339c <_sbrk_r>
 80032d8:	1c43      	adds	r3, r0, #1
 80032da:	d126      	bne.n	800332a <_malloc_r+0x96>
 80032dc:	230c      	movs	r3, #12
 80032de:	4630      	mov	r0, r6
 80032e0:	6033      	str	r3, [r6, #0]
 80032e2:	f000 f86c 	bl	80033be <__malloc_unlock>
 80032e6:	e7e4      	b.n	80032b2 <_malloc_r+0x1e>
 80032e8:	680b      	ldr	r3, [r1, #0]
 80032ea:	1b5b      	subs	r3, r3, r5
 80032ec:	d41a      	bmi.n	8003324 <_malloc_r+0x90>
 80032ee:	2b0b      	cmp	r3, #11
 80032f0:	d90f      	bls.n	8003312 <_malloc_r+0x7e>
 80032f2:	600b      	str	r3, [r1, #0]
 80032f4:	18cc      	adds	r4, r1, r3
 80032f6:	50cd      	str	r5, [r1, r3]
 80032f8:	4630      	mov	r0, r6
 80032fa:	f000 f860 	bl	80033be <__malloc_unlock>
 80032fe:	f104 000b 	add.w	r0, r4, #11
 8003302:	1d23      	adds	r3, r4, #4
 8003304:	f020 0007 	bic.w	r0, r0, #7
 8003308:	1ac3      	subs	r3, r0, r3
 800330a:	d01b      	beq.n	8003344 <_malloc_r+0xb0>
 800330c:	425a      	negs	r2, r3
 800330e:	50e2      	str	r2, [r4, r3]
 8003310:	bd70      	pop	{r4, r5, r6, pc}
 8003312:	428c      	cmp	r4, r1
 8003314:	bf0b      	itete	eq
 8003316:	6863      	ldreq	r3, [r4, #4]
 8003318:	684b      	ldrne	r3, [r1, #4]
 800331a:	6013      	streq	r3, [r2, #0]
 800331c:	6063      	strne	r3, [r4, #4]
 800331e:	bf18      	it	ne
 8003320:	460c      	movne	r4, r1
 8003322:	e7e9      	b.n	80032f8 <_malloc_r+0x64>
 8003324:	460c      	mov	r4, r1
 8003326:	6849      	ldr	r1, [r1, #4]
 8003328:	e7ca      	b.n	80032c0 <_malloc_r+0x2c>
 800332a:	1cc4      	adds	r4, r0, #3
 800332c:	f024 0403 	bic.w	r4, r4, #3
 8003330:	42a0      	cmp	r0, r4
 8003332:	d005      	beq.n	8003340 <_malloc_r+0xac>
 8003334:	1a21      	subs	r1, r4, r0
 8003336:	4630      	mov	r0, r6
 8003338:	f000 f830 	bl	800339c <_sbrk_r>
 800333c:	3001      	adds	r0, #1
 800333e:	d0cd      	beq.n	80032dc <_malloc_r+0x48>
 8003340:	6025      	str	r5, [r4, #0]
 8003342:	e7d9      	b.n	80032f8 <_malloc_r+0x64>
 8003344:	bd70      	pop	{r4, r5, r6, pc}
 8003346:	bf00      	nop
 8003348:	200000ac 	.word	0x200000ac
 800334c:	200000b0 	.word	0x200000b0

08003350 <_realloc_r>:
 8003350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003352:	4607      	mov	r7, r0
 8003354:	4614      	mov	r4, r2
 8003356:	460e      	mov	r6, r1
 8003358:	b921      	cbnz	r1, 8003364 <_realloc_r+0x14>
 800335a:	4611      	mov	r1, r2
 800335c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003360:	f7ff bf98 	b.w	8003294 <_malloc_r>
 8003364:	b922      	cbnz	r2, 8003370 <_realloc_r+0x20>
 8003366:	f7ff ff49 	bl	80031fc <_free_r>
 800336a:	4625      	mov	r5, r4
 800336c:	4628      	mov	r0, r5
 800336e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003370:	f000 f826 	bl	80033c0 <_malloc_usable_size_r>
 8003374:	4284      	cmp	r4, r0
 8003376:	d90f      	bls.n	8003398 <_realloc_r+0x48>
 8003378:	4621      	mov	r1, r4
 800337a:	4638      	mov	r0, r7
 800337c:	f7ff ff8a 	bl	8003294 <_malloc_r>
 8003380:	4605      	mov	r5, r0
 8003382:	2800      	cmp	r0, #0
 8003384:	d0f2      	beq.n	800336c <_realloc_r+0x1c>
 8003386:	4631      	mov	r1, r6
 8003388:	4622      	mov	r2, r4
 800338a:	f7ff ff11 	bl	80031b0 <memcpy>
 800338e:	4631      	mov	r1, r6
 8003390:	4638      	mov	r0, r7
 8003392:	f7ff ff33 	bl	80031fc <_free_r>
 8003396:	e7e9      	b.n	800336c <_realloc_r+0x1c>
 8003398:	4635      	mov	r5, r6
 800339a:	e7e7      	b.n	800336c <_realloc_r+0x1c>

0800339c <_sbrk_r>:
 800339c:	b538      	push	{r3, r4, r5, lr}
 800339e:	2300      	movs	r3, #0
 80033a0:	4c05      	ldr	r4, [pc, #20]	; (80033b8 <_sbrk_r+0x1c>)
 80033a2:	4605      	mov	r5, r0
 80033a4:	4608      	mov	r0, r1
 80033a6:	6023      	str	r3, [r4, #0]
 80033a8:	f7ff fac6 	bl	8002938 <_sbrk>
 80033ac:	1c43      	adds	r3, r0, #1
 80033ae:	d102      	bne.n	80033b6 <_sbrk_r+0x1a>
 80033b0:	6823      	ldr	r3, [r4, #0]
 80033b2:	b103      	cbz	r3, 80033b6 <_sbrk_r+0x1a>
 80033b4:	602b      	str	r3, [r5, #0]
 80033b6:	bd38      	pop	{r3, r4, r5, pc}
 80033b8:	20000190 	.word	0x20000190

080033bc <__malloc_lock>:
 80033bc:	4770      	bx	lr

080033be <__malloc_unlock>:
 80033be:	4770      	bx	lr

080033c0 <_malloc_usable_size_r>:
 80033c0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80033c4:	2800      	cmp	r0, #0
 80033c6:	f1a0 0004 	sub.w	r0, r0, #4
 80033ca:	bfbc      	itt	lt
 80033cc:	580b      	ldrlt	r3, [r1, r0]
 80033ce:	18c0      	addlt	r0, r0, r3
 80033d0:	4770      	bx	lr
	...

080033d4 <_init>:
 80033d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033d6:	bf00      	nop
 80033d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033da:	bc08      	pop	{r3}
 80033dc:	469e      	mov	lr, r3
 80033de:	4770      	bx	lr

080033e0 <_fini>:
 80033e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033e2:	bf00      	nop
 80033e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033e6:	bc08      	pop	{r3}
 80033e8:	469e      	mov	lr, r3
 80033ea:	4770      	bx	lr
